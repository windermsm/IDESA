package inventory.vistas;

import inventory.acceso.*;
import inventory.guatefacturas.GenerarDocumentoFEL;
import inventory.guatefacturas.GenerarDocumentoSinDecimalesFEL;
import inventory.guatefacturas.Resultado;
import inventory.objetos.ObjetosFactura;
import inventory.objetos.ObjetosFacturaFel;
import inventory.objetos.ObjetosListaProducto;
import inventory.objetos.ObjetosSucursal;
import java.awt.Color;
import java.awt.Dimension;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JRViewer;

public class wdwBaseDeDAtosHistorialDeVentas extends javax.swing.JInternalFrame {

    private String Log = "";
    private String tamanio_preferido = null;
    private String cantidad_decimales = null;
    
    /**
     * Creates new form wdwBaseDeDAtosHistorialDeVentas
     */
    public wdwBaseDeDAtosHistorialDeVentas() {
        initComponents();
        
        // Bloquear el cambio de datos de FEL
        if (Inventory.lblRol.getText().equals("Administrador") || Inventory.lblRol.getText().equals("Administrador")) {
            this.btnHabilitarEdicionFEL.setEnabled(true);
            this.btnGuardarDatosFEL.setEnabled(true);
        } else {
            this.btnHabilitarEdicionFEL.setEnabled(false);
            this.btnGuardarDatosFEL.setEnabled(false);
        }
        
        //Bloquear el boton para generar FEL
        boolean habilita_fel = false;

        try {
            if (archivo.leer("[FEL]").equals("TRUE")) {
                habilita_fel = true;
            } else {
                habilita_fel = false;
            }
        } catch (IOException Error) {
            agregarLog("No encontro etiqueta FEL en archivo de configuraciones.");
        }
        
        agregarLog("Verificando la cantidad de decimales.");
        //obtengo el metodo de ingreso utilizado manual o codigo de barras
        try {
            cantidad_decimales = archivo.leer("[Decimales]");
        } catch (IOException error) {
            cantidad_decimales = "0";
            agregarLog("Error al obtener el metodo de entrada: " + error.toString());
        }
        
        agregarLog("Verificando el tamaño preferido de impresion.");
        try {
            tamanio_preferido = archivo.leer("[TamanioPreferido]");
            agregarLog(tamanio_preferido);
            cbxTamanoImpresion.setSelectedItem(tamanio_preferido);
        } catch (IOException error) {
            tamanio_preferido = "Carta";
            agregarLog("Error al obtener el tamaño preferido de impresión: " + error.toString());
        } finally {
            cbxTamanoImpresion.setSelectedItem(tamanio_preferido);
        }
        
        btnGeneraFactura.setEnabled(habilita_fel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    //VARIABLES GLOBALES
    AccesoFactura NuevaFactura = new AccesoFactura();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoArchivo archivo = new AccesoArchivo();
    
    private void mostrarRegistrosGuardados(String pFecha_incial , String pFecha_final){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarFacturaFecha(pFecha_incial, pFecha_final, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura Fecha");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Tipo Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void limpiarCampos() {
        txtSerieFactura.setText("");
        txtNumFactura.setText("");
        txtRecibidoPor.setText("");
        txtSerieFacturaFEL.setText("");
        txtNumFacturaFEL.setText("");
        txtAutorizacionFEL.setText("");
        txtNombreVenta.setText("");
    }
    
    private void mostrarRegistrosGuardadosPorTipo(String pFecha_incial , String pFecha_final, String pTipo){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarFacturaFechaTipo(pTipo, pFecha_incial, pFecha_final, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura Tipo");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros Guardados Tipo");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.addColumn("POS");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                tabla.setValueAt(xFactura.getPos_factura(), cFactura, 10);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void mostrarRegistrosNombre(String nombre){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarFacturaNombre(nombre, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura Nombre");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros Nombre");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void mostrarRegistrosIdFactura(String id){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarFacturaPorId(id, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar ID Factura");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros por ID");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void mostrarRegistrosNumeroFEL(String numero){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarNumeroFacturaFEL(numero, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura Numero FEL");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros Numero FEL");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void generaFacturaElectronicaFEL() {
        
        Resultado resultado = new Resultado();
        
        if (Integer.parseInt(txtIdVenta.getText()) > 0 && txtAutorizacionFEL.getText().equals("0")
                && txtSerieFacturaFEL.getText().equals("0") && txtNumFacturaFEL.getText().endsWith("0")) {
            
            agregarLog("Intentando generar Factura Electronica");
            
            int id = Integer.parseInt(txtIdVenta.getText());
            
            agregarLog("ID Venta: " + id);
            
            GenerarDocumentoFEL felConDecimales = new GenerarDocumentoFEL();
            GenerarDocumentoSinDecimalesFEL felSinDecimales = new GenerarDocumentoSinDecimalesFEL();
            
            int decimales = Integer.parseInt(cantidad_decimales);
            if(decimales > 0) {
                agregarLog("Se utilizará el metodo con decimales");
                resultado = felConDecimales.generarFacturaElectronica(txtTipoConexionFEL.getSelectedItem().toString(), id, txtNombreVenta.getText(), 
                    "", "Venta de Productos", "FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), txtTipoDeDocumento.getText());
            } else {
                agregarLog("Se utilizará el metodo sin decimales");
                resultado = felSinDecimales.generarFacturaElectronica(txtTipoConexionFEL.getSelectedItem().toString(), id, txtNombreVenta.getText(), 
                    "", "Venta de Productos", "FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), txtTipoDeDocumento.getText());
            }
            
            String autorizacion_guatefactruas_fel = "";
            
            agregarLog("AUTORIZACION: " + resultado.getAutorizacion());
            
            
            if (resultado.getAutorizacion().equals("0")) {
                
                agregarLog("GeneraDOcumento: " + resultado.getResultado());
                String respuesta_fel = resultado.getResultado().replaceAll("<Resultado>", "").replaceAll("</Resultado>", "").replaceAll("-", " ").replaceAll("&", "");
                Mensaje.manipulacionExcepciones("critico", respuesta_fel, "Error Generacion FEL");
            
            } else {
                
                agregarLog("ALmacenando informacion en Base de Datos FEL");
                
                autorizacion_guatefactruas_fel = resultado.getAutorizacion();

                //almacenar datos de FEL en la base de datos
                AccesoFacturaFEL FEL = new AccesoFacturaFEL();
                ObjetosFacturaFel FAC = new ObjetosFacturaFel();
                FAC.setId_factura(Integer.parseInt(txtIdVenta.getText()));
                FAC.setSerie_factura_fel(resultado.getSerie());
                FAC.setNumero_factura_fel(resultado.getPreimpreso());
                FAC.setAutorizacion_factura_fel(resultado.getAutorizacion());
                
                String resultado_actualizacion_fel = FEL.actualizarDatosFEL(FAC, "Venta de Productos", "Generar FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

                agregarLog("Resultado: " + resultado_actualizacion_fel);
                
                if (resultado_actualizacion_fel.equals("Operacion realizada con exito.")) {
                    txtAutorizacionFEL.setText(resultado.getAutorizacion());
                    txtSerieFacturaFEL.setText(resultado.getSerie());
                    txtNumFacturaFEL.setText(resultado.getPreimpreso());
                    Mensaje.manipulacionExcepciones("informacion", "Numero de autorización:\n" + autorizacion_guatefactruas_fel, "FEL");
                } else {
                    Mensaje.manipulacionExcepciones("informacion", "No se pudeo actualizar los valores de FEL en la Base de Datos", "FEL");
                }
                
            }
        
        } else {
            
            Mensaje.manipulacionExcepciones("informacion", "No se puede generar Facutara a esta Venta", "FEL");
            
        }
        
    }
    
    private void mostrarRegistrosSerieFEL(String serie){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarSerieFacturaFEL(serie, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura Serie FEL");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros Serie FEL");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6);
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "HISTORIAL VENTA DE PRODUCTOS" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }
    
    private void mostrarRegistrosNIT(String nit){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosFactura> listaFacturas = new ArrayList();
        
        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LAS FACTURAS
        try{
            listaFacturas = NuevaFactura.seleccionarFacturaNIT(nit, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Factura NIT");
        }
        
        //MOSTRAR LA INFORMACION DE LAS FACTURAS EN LA VITAS
        if(listaFacturas.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de las ventas.", "Mostrar Registros NIT");
        } else {
            tabla.addColumn("ID Venta");
            tabla.addColumn("Factura");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Fecha");
            tabla.addColumn("Total");
            tabla.addColumn("Serie FEL");
            tabla.addColumn("Numero FEL");
            tabla.addColumn("Autorización");
            tabla.addColumn("Documento");
            tabla.setRowCount(listaFacturas.size());
            int cFactura = 0;
            
            for (ObjetosFactura xFactura : listaFacturas) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 1);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getSerie_factura_fel(), cFactura, 6); 
                tabla.setValueAt(xFactura.getNumero_factura_fel(), cFactura, 7);
                tabla.setValueAt(xFactura.getAtorizacion_fel(), cFactura, 8);
                tabla.setValueAt(xFactura.getTipo_documento_factura_fel(), cFactura, 9);
                cFactura++;
            }
            
            tblDetalleVenta.setModel(tabla);
        }
    }
    
    public void buscarDatosDeFel() {
        
        //Buscar los datos de FEL
        String id = txtIdVenta.getText();

        if (!id.isEmpty()) {

            AccesoFacturaFEL FEL = new AccesoFacturaFEL();
            ObjetosFacturaFel FAC = new ObjetosFacturaFel();
            FAC = FEL.buscarFacturaFEL(id, "Ventas Activas", Inventory.lblUsuario.getText(), "");
            this.txtSerieFacturaFEL.setText(FAC.getSerie_factura_fel());
            this.txtNumFacturaFEL.setText(FAC.getNumero_factura_fel());
            this.txtAutorizacionFEL.setText(FAC.getAutorizacion_factura_fel());
            //this.txtTipoDocumentoFEL.setText(FAC.getTipo_documento_factura_fel());

            if (FAC.getNumero_factura_fel().equals("0") || FAC.getNumero_factura_fel().isEmpty()) {
                this.btnGeneraFactura.setEnabled(true);
                this.cbxTipoImpresion.setSelectedItem("Comprobante");
            } else {
                this.btnGeneraFactura.setEnabled(false);
                this.cbxTipoImpresion.setSelectedItem("Factura Electronica");
            }

        } else {
            this.txtSerieFacturaFEL.setText("");
            this.txtNumFacturaFEL.setText("");
            this.txtAutorizacionFEL.setText("");
            this.cbxTipoImpresion.setSelectedItem("Comprobante");
        }
        
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleVenta = new javax.swing.JTable();
        pnlBotones = new javax.swing.JPanel();
        lblIdVenta = new javax.swing.JLabel();
        txtIdVenta = new javax.swing.JTextField();
        btnMostrar = new javax.swing.JButton();
        lblHasta = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        btnReporte = new javax.swing.JButton();
        lblFecha1 = new javax.swing.JLabel();
        btnMostrarNombre = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        cbxTipoImpresion = new javax.swing.JComboBox();
        cbxTamanoImpresion = new javax.swing.JComboBox();
        txtSerieFactura = new javax.swing.JTextField();
        txtNumFactura = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtRecibidoPor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSerieFacturaFEL = new javax.swing.JTextField();
        txtNumFacturaFEL = new javax.swing.JTextField();
        txtAutorizacionFEL = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSerie = new javax.swing.JButton();
        btnBuscarFEL = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtNIT = new javax.swing.JTextField();
        btnBuscarNIT = new javax.swing.JButton();
        btnHabilitarEdicionFEL = new javax.swing.JButton();
        btnGuardarDatosFEL = new javax.swing.JButton();
        btnGeneraFactura = new javax.swing.JButton();
        btnMostrar1 = new javax.swing.JButton();
        txtBuscarSrerieFEL = new javax.swing.JTextField();
        btnBuscarFEL1 = new javax.swing.JButton();
        txtBuscaNumeroFEL = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFechaInicial = new com.toedter.calendar.JDateChooser();
        txtFechaFinal = new com.toedter.calendar.JDateChooser();
        cbxTipoVenta = new javax.swing.JComboBox();
        btnBuscarFEL2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtTipoConexionFEL = new javax.swing.JComboBox<>();
        txtNombreVenta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTipoDeDocumento = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Historial de Ventas");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/historialVentas.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1115, 630));

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Venta", "Factura", "Serie", "Folio", "Fecha", "Total", "Serie FEL", "Numero FEL", "Autorización", "Tipo Documento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleVentaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleVenta);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdVenta.setText("ID Factura");

        txtIdVenta.setBackground(new java.awt.Color(255, 255, 204));
        txtIdVenta.setToolTipText("Ingrese el ID de la venta o seleccionela de la lista de busqueda");

        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrar.setText("Buscar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        lblHasta.setText("Hasta");

        lblFecha.setText("Desde");

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonImpresoraLaser.png"))); // NOI18N
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        lblFecha1.setText("Nombre");

        btnMostrarNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrarNombre.setText("Buscar");
        btnMostrarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarNombreActionPerformed(evt);
            }
        });

        txtNombre.setToolTipText("Espacios en blanco al final y al inico de la plabra colocar el simbolo %");

        cbxTipoImpresion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Comprobante", "Factura Electronica", "Vale de Mercaderia" }));

        cbxTamanoImpresion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Carta", "1/2 Carta", "TMU 2.5" }));

        txtSerieFactura.setEditable(false);
        txtSerieFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtSerieFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtSerieFactura.setToolTipText("");

        txtNumFactura.setEditable(false);
        txtNumFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtNumFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFactura.setToolTipText("");

        jLabel1.setText("Preimpreso");

        txtRecibidoPor.setEditable(false);
        txtRecibidoPor.setBackground(new java.awt.Color(102, 102, 102));
        txtRecibidoPor.setForeground(new java.awt.Color(255, 255, 255));
        txtRecibidoPor.setToolTipText("");

        jLabel3.setText("Recibido Por");

        txtSerieFacturaFEL.setEditable(false);
        txtSerieFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtSerieFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtSerieFacturaFEL.setToolTipText("");

        txtNumFacturaFEL.setEditable(false);
        txtNumFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtNumFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFacturaFEL.setToolTipText("");

        txtAutorizacionFEL.setEditable(false);
        txtAutorizacionFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtAutorizacionFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtAutorizacionFEL.setToolTipText("");

        jLabel4.setText("Datos FEL");

        jLabel6.setText("Serie");

        btnSerie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCodigoDeBarraMini.png"))); // NOI18N
        btnSerie.setActionCommand("btnReporte");
        btnSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerieActionPerformed(evt);
            }
        });

        btnBuscarFEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarFEL.setText("Buscar");
        btnBuscarFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFELActionPerformed(evt);
            }
        });

        jLabel7.setText("NIT | DPI");

        btnBuscarNIT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarNIT.setText("Buscar");
        btnBuscarNIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNITActionPerformed(evt);
            }
        });

        btnHabilitarEdicionFEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/btnEditarCampo.png"))); // NOI18N
        btnHabilitarEdicionFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHabilitarEdicionFELActionPerformed(evt);
            }
        });

        btnGuardarDatosFEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardarDatosFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDatosFELActionPerformed(evt);
            }
        });

        btnGeneraFactura.setText("FEL");
        btnGeneraFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneraFacturaActionPerformed(evt);
            }
        });

        btnMostrar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrar1.setText("Buscar");
        btnMostrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrar1ActionPerformed(evt);
            }
        });

        btnBuscarFEL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarFEL1.setText("Buscar");
        btnBuscarFEL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFEL1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Tipo Venta");

        txtFechaInicial.setBackground(new java.awt.Color(240, 240, 204));
        txtFechaInicial.setToolTipText("Ingrese la Fecha Inicial.");
        txtFechaInicial.setDateFormatString("yyyy-MM-dd");
        txtFechaInicial.setMaximumSize(new java.awt.Dimension(120, 20));
        txtFechaInicial.setMinimumSize(new java.awt.Dimension(120, 20));
        txtFechaInicial.setPreferredSize(new java.awt.Dimension(120, 20));

        txtFechaFinal.setBackground(new java.awt.Color(240, 240, 204));
        txtFechaFinal.setToolTipText("Ingrese la Fecha Final.");
        txtFechaFinal.setDateFormatString("yyyy-MM-dd");
        txtFechaFinal.setMaximumSize(new java.awt.Dimension(120, 20));
        txtFechaFinal.setMinimumSize(new java.awt.Dimension(120, 20));
        txtFechaFinal.setPreferredSize(new java.awt.Dimension(120, 20));

        cbxTipoVenta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contado", "Credito", "Tarjeta", "Contado / Credito" }));

        btnBuscarFEL2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarFEL2.setText("Buscar");
        btnBuscarFEL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFEL2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Numero");

        txtTipoConexionFEL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GFN", "GFC" }));

        txtNombreVenta.setEditable(false);
        txtNombreVenta.setBackground(new java.awt.Color(102, 102, 102));
        txtNombreVenta.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Cliente");

        txtTipoDeDocumento.setEditable(false);
        txtTipoDeDocumento.setBackground(new java.awt.Color(102, 102, 102));
        txtTipoDeDocumento.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdVenta)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAutorizacionFEL))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addComponent(txtNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscarNIT)
                                .addGap(18, 18, 18)
                                .addComponent(btnHabilitarEdicionFEL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGuardarDatosFEL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addComponent(txtTipoConexionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNombreVenta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGeneraFactura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTipoDeDocumento)))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtIdVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMostrar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSerieFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtRecibidoPor))
                .addGap(18, 18, 18)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFecha1)
                    .addComponent(lblFecha)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNombre)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblHasta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(txtFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtBuscarSrerieFEL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBuscarFEL1)
                                    .addComponent(jLabel5))
                                .addGap(25, 25, 25)
                                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBuscaNumeroFEL))
                                    .addComponent(cbxTipoVenta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnMostrarNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscarFEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscarFEL2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIdVenta)
                            .addComponent(jLabel1)
                            .addComponent(txtSerieFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMostrar1))
                        .addGap(11, 11, 11)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRecibidoPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtAutorizacionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtTipoDeDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnHabilitarEdicionFEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscarNIT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addComponent(btnGuardarDatosFEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnGeneraFactura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTipoConexionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblFecha, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHasta, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFechaFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFechaInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFecha1)
                            .addComponent(btnMostrarNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(btnBuscarFEL)
                            .addComponent(txtBuscarSrerieFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarFEL1)
                            .addComponent(txtBuscaNumeroFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxTipoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarFEL2)
                            .addComponent(jLabel5))
                        .addGap(5, 5, 5)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSerie)
                            .addComponent(btnReporte)
                            .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        if (txtFechaInicial.getDate().toString().equals("") || txtFechaFinal.getDate().toString().equals("")) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la Fechas.", "Boton Buscar");
        } else {
            String desde = ( txtFechaInicial.getDate().getYear() + 1900 ) + "-" + ( txtFechaInicial.getDate().getMonth() + 1 ) + "-" + txtFechaInicial.getDate().getDate();
            String hasta = ( txtFechaFinal.getDate().getYear() + 1900 ) + "-" + ( txtFechaFinal.getDate().getMonth() + 1 ) + "-" + txtFechaFinal.getDate().getDate();
            mostrarRegistrosGuardados(desde, hasta);
        }
        limpiarCampos();
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void tblDetalleVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleVentaMouseClicked
        
        int fila_seleccionada = tblDetalleVenta.getSelectedRow();
        
        txtIdVenta.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 0).toString());
        txtSerieFactura.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 2).toString());
        txtNumFactura.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 1).toString());
        txtSerieFacturaFEL.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 6).toString());
        txtNumFacturaFEL.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 7).toString());
        txtAutorizacionFEL.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 8).toString());
        txtTipoDeDocumento.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 9).toString());
        
        if (txtAutorizacionFEL.getText().equals("0") || txtAutorizacionFEL.getText().isEmpty()) {
            this.cbxTipoImpresion.setSelectedItem("Comprobante");
        } else {
            this.cbxTipoImpresion.setSelectedItem("Factura Electronica");
        }
        
        try {
            AccesoFactura venta = new AccesoFactura();
            String nombre = venta.buscarNombreFactura(txtIdVenta.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            txtNombreVenta.setText(nombre);
        } catch (Exception Error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el nombre ingresado en la Venta.", "Buscar Nombre");
            agregarLog("Error al buscar nombre de Cliente en la Venta");
            agregarLog(Error.toString());
        }
    }//GEN-LAST:event_tblDetalleVentaMouseClicked

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        
        //Verificar si pueden imprimir factura
        //de lo contrario seleccionar comprobante
        buscarDatosDeFel();
        if(txtAutorizacionFEL.getText().equals("0") && cbxTipoImpresion.getSelectedItem().equals("Factura Electronica")) {
            Mensaje.manipulacionExcepciones("critico", "Esta venta no tiene factura electronica", "Imprimir Factura FEL");
            cbxTipoImpresion.setSelectedItem("Comprobante");
        }
        
        String archivo_jasper = "";
        String regimen_empresa = "";
      
        //El mensaje del regimen de la factura se toma del archivo de texto
        try {
            regimen_empresa = archivo.leer("[Regimen]");
        } catch (IOException ex) {
            regimen_empresa = "";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Comprobante")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptComprobanteCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptComprobanteMediaCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptComprobanteTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Factura Electronica")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptFacturaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptFacturaMediaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptFacturaTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Vale de Mercaderia")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptValeCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptValeMediaCartaNormal";
            if (cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptValeTMU";
        }
        
        //ejecución del repote seleccionado
        try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/" + archivo_jasper + ".jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //parametros del reporte
            parametro.put("P_SERIE_FACTURA", txtSerieFactura.getText());
            parametro.put("P_NUMERO_FACTURA", txtNumFactura.getText());
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdVenta.getText()));
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal());
            parametro.put("P_NOMBRE_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_SUCURSAL", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());
            
            //parametros configuracion sistema
            parametro.put("P_REGIMEN_EMPRESA", regimen_empresa);
            
            //parametro para la impresión de vales
            parametro.put("P_RECIBIDO", txtRecibidoPor.getText());
            
            //parametros facturación FEL implementarlos solo si se desea
            //obtener facturacion electronica de la venta realizada
            parametro.put("P_SERIE_FEL", txtSerieFacturaFEL.getText());
            parametro.put("P_NUMERO_FEL", txtNumFacturaFEL.getText());
            parametro.put("P_AUTORIZACION_FEL", txtAutorizacionFEL.getText());
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte " + archivo_jasper.replaceAll("rpt", "").toUpperCase());
        }
        
    }//GEN-LAST:event_btnReporteActionPerformed

    private void btnMostrarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarNombreActionPerformed
        if (txtNombre.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese el nombre del Cliente.", "Boton Buscar");
        } else {
            mostrarRegistrosNombre(txtNombre.getText());
        }
        limpiarCampos();
    }//GEN-LAST:event_btnMostrarNombreActionPerformed

    private void btnSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerieActionPerformed

        //this.toBack();
        
        //Validar si la factura no ha sido anulada para agregar series
        String estado = NuevaFactura.buscarEstadoFactua(txtIdVenta.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

        if (estado.equals("Anulado")) {
            Mensaje.manipulacionExcepciones("critico", "No puede asignar seire a una factura Anulada.", "Agregar Serie");
        } else {
            if (txtIdVenta.getText().isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "Debe guardar la Venta para escanear los numeros de serie.", "Serie");
            } else {

                String id_venta = txtIdVenta.getText();

                //Armar el listado de productos de la venta, siempre y cuandos
                //estos tenga serie SI
                ArrayList<ObjetosListaProducto> listado_productos = new ArrayList<>();
                AccesoProducto acceso = new AccesoProducto();
                listado_productos = acceso.buscarListadoSeries(id_venta, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

                //Llamar pantalla para el ingreso de series      
                wdwCatalogoSerie Serie = new wdwCatalogoSerie(listado_productos, "0", "0", txtIdVenta.getText(), "Venta");
                int ancho = Inventory.pnlPrincipal.getWidth();
                int alto = Inventory.pnlPrincipal.getHeight();
                int x = (ancho / 2) - (Serie.getWidth() / 2);
                int y = (alto / 2) - (Serie.getHeight() / 2);
                Serie.setVisible(true);
                Inventory.pnlPrincipal.add(Serie);
                Serie.toFront();
                Serie.setLocation(x, y);
            }
        }
    }//GEN-LAST:event_btnSerieActionPerformed

    private void btnBuscarFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFELActionPerformed
        if (txtBuscaNumeroFEL.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese el numero de Factura FEL.", "Boton Buscar");
        } else {
            mostrarRegistrosNumeroFEL(txtBuscaNumeroFEL.getText());
        }
        limpiarCampos();
    }//GEN-LAST:event_btnBuscarFELActionPerformed

    private void btnBuscarNITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNITActionPerformed
        if(txtNIT.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT", "Buscar por NIT");
        } else {
            mostrarRegistrosNIT(txtNIT.getText());
        }
    }//GEN-LAST:event_btnBuscarNITActionPerformed

    private void btnHabilitarEdicionFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHabilitarEdicionFELActionPerformed
        if (this.txtNumFacturaFEL.getText().equals("0") || this.txtNumFacturaFEL.getText().isEmpty()) {
            this.txtSerieFacturaFEL.setEditable(true);
            this.txtNumFacturaFEL.setEditable(true);
            this.txtAutorizacionFEL.setEditable(true);
            this.txtSerieFacturaFEL.setForeground(Color.BLACK);
            this.txtNumFacturaFEL.setForeground(Color.BLACK);
            this.txtAutorizacionFEL.setForeground(Color.BLACK);
            this.txtSerieFacturaFEL.setBackground(Color.WHITE);
            this.txtNumFacturaFEL.setBackground(Color.WHITE);
            this.txtAutorizacionFEL.setBackground(Color.WHITE);
        } else {
            Mensaje.manipulacionExcepciones("critico", "Esta factura ya tiene datos de FEL", "Buscar Datos FEL");
        }
    }//GEN-LAST:event_btnHabilitarEdicionFELActionPerformed

    private void btnGuardarDatosFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDatosFELActionPerformed

        ObjetosFacturaFel det = new ObjetosFacturaFel();
        AccesoFacturaFEL fel = new AccesoFacturaFEL();

        det.setId_factura(Integer.parseInt(txtIdVenta.getText().trim()));
        det.setSerie_factura_fel(txtSerieFacturaFEL.getText().trim().toUpperCase());
        det.setNumero_factura_fel(txtNumFacturaFEL.getText().trim().toUpperCase());
        det.setAutorizacion_factura_fel(txtAutorizacionFEL.getText().trim().toUpperCase());

        if (fel.actualizarDatosFEL(det, "Historial Ventas", "Guardar", Inventory.lblUsuario.getText(), 
                Inventory.lblTerminal.getText()).equals("Operacion realizada con exito.")) {
            Mensaje.manipulacionExcepciones("informacion", "Datos de FEL guardados con exito.", "Guardar Datos Manuales FEL");
        } else {
            Mensaje.manipulacionExcepciones("critico", "No fué posible almacenar la información.", "Error Datos FEL");
            this.txtSerieFacturaFEL.setText("0");
            this.txtNumFacturaFEL.setText("0");
            this.txtAutorizacionFEL.setText("0");
        }

        this.txtSerieFacturaFEL.setEditable(false);
        this.txtNumFacturaFEL.setEditable(false);
        this.txtAutorizacionFEL.setEditable(false);
        this.txtSerieFacturaFEL.setForeground(new Color(255, 255, 255));
        this.txtNumFacturaFEL.setForeground(new Color(255, 255, 255));
        this.txtAutorizacionFEL.setForeground(new Color(255, 255, 255));
        this.txtSerieFacturaFEL.setBackground(new Color(102, 102, 102));
        this.txtNumFacturaFEL.setBackground(new Color(102, 102, 102));
        this.txtAutorizacionFEL.setBackground(new Color(102, 102, 102));

    }//GEN-LAST:event_btnGuardarDatosFELActionPerformed

    private void btnGeneraFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneraFacturaActionPerformed
        // Generar Factura FEL
        // Primero buscar si ya tiene FEL
        ObjetosFacturaFel det = new ObjetosFacturaFel();
        AccesoFacturaFEL fel = new AccesoFacturaFEL();
        try {
            agregarLog("Buscando datos de FEL");
            det = fel.buscarFacturaFEL(txtIdVenta.getText().trim(), "Historial Ventas", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            agregarLog("Factura FEL: " + det.getNumero_factura_fel());
            if (det.getNumero_factura_fel().equals("0")) {
                agregarLog("Iniciando méotodo para armar XML");
                generaFacturaElectronicaFEL();
            } else {
                this.txtSerieFacturaFEL.setText(det.getSerie_factura_fel());
                this.txtNumFacturaFEL.setText(det.getNumero_factura_fel());
                this.txtAutorizacionFEL.setText(det.getAutorizacion_factura_fel());
            }
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar datos de FEL.", "Buscar Datos FEL");
            agregarLog(error.toString());
        }
    }//GEN-LAST:event_btnGeneraFacturaActionPerformed

    private void btnMostrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrar1ActionPerformed
        if (txtIdVenta.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la ID de Factura.", "Boton Buscar");
        } else {
            mostrarRegistrosIdFactura(txtIdVenta.getText());
        }
        limpiarCampos();
    }//GEN-LAST:event_btnMostrar1ActionPerformed

    private void btnBuscarFEL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFEL1ActionPerformed
        if (txtBuscarSrerieFEL.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la serie de Factura FEL.", "Boton Buscar");
        } else {
            mostrarRegistrosSerieFEL(txtBuscarSrerieFEL.getText());
        }
        limpiarCampos();
    }//GEN-LAST:event_btnBuscarFEL1ActionPerformed

    private void btnBuscarFEL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFEL2ActionPerformed
        if (txtFechaInicial.getDate().toString().equals("") || txtFechaFinal.getDate().toString().equals("")) {
            Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la Fechas.", "Boton Buscar");
        } else {
            String desde = ( txtFechaInicial.getDate().getYear() + 1900 ) + "-" + ( txtFechaInicial.getDate().getMonth() + 1 ) + "-" + txtFechaInicial.getDate().getDate();
            String hasta = ( txtFechaFinal.getDate().getYear() + 1900 ) + "-" + ( txtFechaFinal.getDate().getMonth() + 1 ) + "-" + txtFechaFinal.getDate().getDate();
            mostrarRegistrosGuardadosPorTipo(desde, hasta, cbxTipoVenta.getSelectedItem().toString());
        }
        limpiarCampos();
    }//GEN-LAST:event_btnBuscarFEL2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarFEL;
    private javax.swing.JButton btnBuscarFEL1;
    private javax.swing.JButton btnBuscarFEL2;
    private javax.swing.JButton btnBuscarNIT;
    private javax.swing.JButton btnGeneraFactura;
    private javax.swing.JButton btnGuardarDatosFEL;
    private javax.swing.JButton btnHabilitarEdicionFEL;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnMostrar1;
    private javax.swing.JButton btnMostrarNombre;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSerie;
    private javax.swing.JComboBox cbxTamanoImpresion;
    private javax.swing.JComboBox cbxTipoImpresion;
    private javax.swing.JComboBox cbxTipoVenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFecha1;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblIdVenta;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JTable tblDetalleVenta;
    private javax.swing.JTextField txtAutorizacionFEL;
    private javax.swing.JTextField txtBuscaNumeroFEL;
    private javax.swing.JTextField txtBuscarSrerieFEL;
    private com.toedter.calendar.JDateChooser txtFechaFinal;
    private com.toedter.calendar.JDateChooser txtFechaInicial;
    private javax.swing.JTextField txtIdVenta;
    private javax.swing.JTextField txtNIT;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreVenta;
    private javax.swing.JTextField txtNumFactura;
    private javax.swing.JTextField txtNumFacturaFEL;
    private javax.swing.JTextField txtRecibidoPor;
    private javax.swing.JTextField txtSerieFactura;
    private javax.swing.JTextField txtSerieFacturaFEL;
    private javax.swing.JComboBox<String> txtTipoConexionFEL;
    private javax.swing.JTextField txtTipoDeDocumento;
    // End of variables declaration//GEN-END:variables
}
