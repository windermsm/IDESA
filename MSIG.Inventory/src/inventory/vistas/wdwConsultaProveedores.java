package inventory.vistas;

import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoLoggin;
import inventory.acceso.AccesoPersona;
import inventory.acceso.AccesoProveedor;
import inventory.objetos.ObjetosLoggin;
import inventory.objetos.ObjetosPersona;
import inventory.objetos.ObjetosProveedor;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

public class wdwConsultaProveedores extends javax.swing.JInternalFrame {

    /**
     * Creates new form wdwIngresosProveedores
     */
    public wdwConsultaProveedores() {
        initComponents();
        mostrarRegistrosGuardados();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProveedor NuevoProveedor = new AccesoProveedor();
    ObjetosPersona Persona = new ObjetosPersona();
    ObjetosProveedor Proveedor = new ObjetosProveedor();
    boolean proveedor_encontrado = false;
    boolean persona_encontrada = false;
    
    int idPersona = 0;

    private void limpiarCampos() {    
        idPersona = 0;
        proveedor_encontrado = false;
        persona_encontrada = false;
    }

    private void mostrarRegistrosGuardados() {

        DefaultTableModel tabla = new DefaultTableModel();
        ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

        //CONSULTAR LA TABLA PERSONA Y PROVEEDOR
        try {
            listaProveedores = NuevoProveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            listaPersonas = NuevaPersona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Error error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Proveedor - Seleccionar Persona");
        }

        //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
        if (listaProveedores.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de proveedores.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Proveedor");
            tabla.addColumn("NIT");
            tabla.addColumn("Nombre");
            tabla.addColumn("Direccion");
            tabla.addColumn("Telefono");
            tabla.setRowCount(listaProveedores.size());
            int cProveedor = 0;

            for (ObjetosProveedor xProveedor : listaProveedores) {
                
                for (ObjetosPersona xPersona : listaPersonas) {
                    if (xProveedor.getId_persona() == xPersona.getId_persona()) {
                        tabla.setValueAt(xProveedor.getId_proveedor(), cProveedor, 0);
                        tabla.setValueAt(xPersona.getNit_persona(), cProveedor, 1);
                        tabla.setValueAt(xPersona.getNom_persona(), cProveedor, 2);
                        tabla.setValueAt(xProveedor.getDir_proveedor(), cProveedor, 3);
                        tabla.setValueAt(xProveedor.getTel_proveedor(), cProveedor, 4);
                    }
                }
                cProveedor++;
            }

            tblProveedor.setModel(tabla);
        }
    }

    private int obtenerIdPersona(String pNit_persona) {

        int id_persona = 0;
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existe esta Persona en la Base de Datos.", "Obtener ID Persona");
        } else {
            id_persona = BuscarPersona.get(0).getId_persona();
        }

        return id_persona;
    }

    private int obtenerIdProveedor(String pNit_cliente) {

        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();
        int vId_persona = 0;
        int vId_Proveedor = 0;

        //BUSCAR EL ID DE LA PERSONA
        vId_persona = obtenerIdPersona(pNit_cliente);

        //CONSULTAR EL ID DE LA PERSONA EN PROVEEDOR
        try {
            BuscarProveedor = NuevoProveedor.buscarProveedor(vId_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", error.getMessage(), "Buscar Proveedor");
        }

        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if (BuscarProveedor.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe crear este proveedor en la base de datos.", "Obtener ID Proveedor");
        } else {
            if (BuscarProveedor.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Este numero de Nit esta repetido.", "Obtener ID Proveedor");
            } else {
                vId_Proveedor = BuscarProveedor.get(0).getId_proveedor();
            }
        }

        return vId_Proveedor;
    }

    private void buscarEnRegistrosGuardados() {

        // CAPTURO EL DATO A BUSCAR
        String busqueda = txtBuscar.getText();

        if (busqueda != null) {

            DefaultTableModel tabla = new DefaultTableModel();

            ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS CLIENTES
            try {
                listaProveedores = NuevoProveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                listaPersonas = NuevaPersona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Proveedor - Seleccionar Persona");
            }

            //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
            if (listaProveedores.isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de clientes.", "Buscar en Registros Guardados");
            } else {
                tabla.addColumn("ID Proveedor");
                tabla.addColumn("NIT");
                tabla.addColumn("Nombre");
                tabla.addColumn("Direccion");
                tabla.addColumn("Telefono");

                int cProveedor = 0;
                int contadorFilas = 1;

                // RECORRO TODA LA LISTA DE PERSONAS
                for (ObjetosPersona xPersona : listaPersonas) {

                    // COMPARA CADA ELEMENTO NIT Y NOMBRE DE LA LISTA PARA VER SI ALGUNO ES EL BUSCADO
                    if (xPersona.getNit_persona().indexOf(busqueda) >= 0
                            || xPersona.getNom_persona().toUpperCase().indexOf(busqueda.toUpperCase()) >= 0) {


                        // SI LA BUSQUEDA COINCIDE RECORRO LA LISTA DE CLIENTES 
                        // PARA OBTENER LA DIRECCION Y EL TELEFONO DE LA PERSONA
                        for (ObjetosProveedor xProveedor : listaProveedores) {
                            
                            if (xPersona.getId_persona() == xProveedor.getId_persona()) {
                                // ESTABLECE EL TAMAÃ‘O DE LA TABLA
                                tabla.setRowCount(contadorFilas);
                                tabla.setValueAt(xProveedor.getId_proveedor(), cProveedor, 0);
                                tabla.setValueAt(xPersona.getNit_persona(), cProveedor, 1);
                                tabla.setValueAt(xPersona.getNom_persona(), cProveedor, 2);
                                tabla.setValueAt(xProveedor.getDir_proveedor(), cProveedor, 3);
                                tabla.setValueAt(xProveedor.getTel_proveedor(), cProveedor, 4);
                                cProveedor++;
                                contadorFilas++;
                            }
                        }

                    }
                }
                tblProveedor.setModel(tabla);
            }
        } else {
            // SI NO HAY CARACTER DE BUSQUEDA SE DESPLIEGAN TODOS LOS DATOS
            mostrarRegistrosGuardados();
        }

    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBotones = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnBuscar1 = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProveedor = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Proveedores");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgCatalgoProveedores.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(550, 300));
        setPreferredSize(new java.awt.Dimension(550, 300));

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblBuscar.setText("Buscar");

        txtBuscar.setToolTipText("Ingrese el nombre del proveedor a buscar");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonLimpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnBuscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonAgregar.png"))); // NOI18N
        btnBuscar1.setActionCommand("buscar");
        btnBuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar1)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar1)
                    .addComponent(btnBuscar)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblProveedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProveedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProveedorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProveedor);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblProveedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProveedorMouseClicked

        if (String.valueOf(tblProveedor.getSelectedColumn()).equals("0")) {
            //ASIGNAR AL ENCABEZADO LOS DATOS
            int fila_seleccionada = tblProveedor.getSelectedRow();
            int columna_seleccionada = tblProveedor.getSelectedColumn();
            idPersona = obtenerIdPersona(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada+1)));
        }
        
    }//GEN-LAST:event_tblProveedorMouseClicked

    private void btnBuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscar1ActionPerformed
        wdwCatalogoProductos.txtIdProveedor.setText(tblProveedor.getValueAt(tblProveedor.getSelectedRow(), 0).toString());
        wdwCatalogoProductos.txtNomProvedor.setText(tblProveedor.getValueAt(tblProveedor.getSelectedRow(), 2).toString());
        this.dispose();
    }//GEN-LAST:event_btnBuscar1ActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscar1;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JTable tblProveedor;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
