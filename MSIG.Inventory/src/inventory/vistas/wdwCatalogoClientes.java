package inventory.vistas;

import inventory.acceso.AccesoArchivo;
import inventory.acceso.AccesoCliente;
import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoPersona;
import inventory.objetos.ObjetosCliente;
import inventory.objetos.ObjetosPersona;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

public class wdwCatalogoClientes extends javax.swing.JInternalFrame {

    private String Log;
    AccesoArchivo Archivo = new AccesoArchivo();
    
    /**
     * Creates new form wdwIngresoClientes
     */
    public wdwCatalogoClientes() {
        initComponents();
        //mostrarRegistrosGuardados();
        txtLimiteCredito.setEnabled(false);
        cbxDiasCredito.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdCliente = new javax.swing.JLabel();
        txtIdCliente = new javax.swing.JTextField();
        lblNombreCliente = new javax.swing.JLabel();
        lblNitCliente = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        lblTelCliente = new javax.swing.JLabel();
        txtTelCliente = new javax.swing.JTextField();
        lblDirCliente = new javax.swing.JLabel();
        txtDirCliente = new javax.swing.JTextField();
        txtNomPersona = new javax.swing.JTextField();
        lblCelular = new javax.swing.JLabel();
        txtCelular = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblIdPersona = new javax.swing.JLabel();
        txtIdPersona = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtLimiteCredito = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbxDiasCredito = new javax.swing.JComboBox();
        cbxTipo = new javax.swing.JComboBox();
        pnlBotones = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Clientes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgCatalogoClientes.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdCliente.setText("ID Cliente");

        txtIdCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtIdCliente.setEditable(false);
        txtIdCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtIdCliente.setToolTipText("Este campo no se puede editar el programa asigana automaticamente un numero de ID");

        lblNombreCliente.setText("Nombre");

        lblNitCliente.setText("NIT");

        txtNitPersona.setBackground(new java.awt.Color(255, 255, 204));
        txtNitPersona.setToolTipText("Ingrese el numero de NIT");
        txtNitPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitPersonaFocusLost(evt);
            }
        });

        lblTelCliente.setText("Telefono");

        txtTelCliente.setBackground(new java.awt.Color(255, 255, 204));
        txtTelCliente.setToolTipText("Ingrese el numero de Telefono sin guiones");

        lblDirCliente.setText("Direccion");

        txtDirCliente.setBackground(new java.awt.Color(255, 255, 204));
        txtDirCliente.setToolTipText("Ingrese la direccion tien un espacio maximo de 200 caracteres");

        txtNomPersona.setBackground(new java.awt.Color(255, 255, 204));
        txtNomPersona.setToolTipText("Ingrese el nombre completo del cliente este nombre no puede contener simbolos ni numeros");
        txtNomPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPersonaFocusGained(evt);
            }
        });

        lblCelular.setText("Celular");

        txtCelular.setBackground(new java.awt.Color(255, 255, 204));
        txtCelular.setToolTipText("Ingrese el numero de Telefono sin guiones");

        lblEmail.setText("Correo");

        txtEmail.setToolTipText("Ingrese la direccion tien un espacio maximo de 200 caracteres");

        lblIdPersona.setText("ID Persona");

        txtIdPersona.setBackground(new java.awt.Color(102, 102, 102));
        txtIdPersona.setEditable(false);
        txtIdPersona.setForeground(new java.awt.Color(255, 255, 255));
        txtIdPersona.setToolTipText("Este campo no se puede editar el programa asigana automaticamente un numero de ID");

        jLabel1.setText("Limite credito");

        txtLimiteCredito.setBackground(new java.awt.Color(255, 255, 204));
        txtLimiteCredito.setText("0");
        txtLimiteCredito.setToolTipText("Ingrese el limit de credito para este cliente");

        jLabel2.setText("Dias credito");

        jLabel3.setText("Tipo");

        cbxDiasCredito.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "15", "30", "90", "180", "365" }));

        cbxTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C", "B", "A" }));
        cbxTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerormed(evt);
            }
        });

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(lblTelCliente)
                            .addGap(38, 38, 38))
                        .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                            .addComponent(lblIdCliente)
                            .addGap(34, 34, 34)))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblNombreCliente))
                        .addGap(18, 18, 18)))
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtIdCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblIdPersona)
                        .addGap(18, 18, 18)
                        .addComponent(txtIdPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNomPersona)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtLimiteCredito, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(txtTelCliente))
                        .addGap(18, 18, 18)
                        .addComponent(lblCelular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lblEmail)
                    .addComponent(lblDirCliente)
                    .addComponent(lblNitCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDirCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(cbxDiasCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxTipo, 0, 69, Short.MAX_VALUE))
                    .addComponent(txtNitPersona))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdCliente)
                    .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdPersona)
                    .addComponent(txtIdPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNitCliente)
                    .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDirCliente)
                    .addComponent(txtDirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreCliente)
                    .addComponent(txtNomPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCelular)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(lblTelCliente)
                    .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLimiteCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(cbxDiasCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblBuscar.setText("Buscar");

        txtBuscar.setToolTipText("Ingreseel nombre dle cliente a buscar");

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonLimpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setToolTipText("");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonEditar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addGap(97, 97, 97)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLimpiar)
                        .addComponent(btnModificar)
                        .addComponent(btnGuardar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCliente);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoCliente NuevoCliente = new AccesoCliente();
    ObjetosPersona Persona = new ObjetosPersona();
    ObjetosCliente Cliente = new ObjetosCliente();
    boolean cliente_encontrado = false;
    boolean persona_encontrada = false;
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "CATALOGO CLIENTES" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }

    private void limpiarCampos() {
        agregarLog("Limpiar todos los campos del formulario.");
        btnGuardar.setEnabled(true);
        
        txtIdCliente.setText("");
        txtIdPersona.setText("");
        txtNitPersona.setText("");
        txtNomPersona.setText("");
        txtTelCliente.setText("");
        txtDirCliente.setText("");
        txtCelular.setText("");
        txtEmail.setText("");
        txtLimiteCredito.setText("");
        cbxTipo.setSelectedIndex(0);
        cbxDiasCredito.setSelectedIndex(0);
        agregarLog("Reiniciar variables de Persona y Clientes encontrados.");
        cliente_encontrado = false;
        persona_encontrada = false;
    }

    private void mostrarRegistrosGuardados() {
        
        agregarLog("Listar registros guardados.");
        DefaultTableModel tabla = new DefaultTableModel();

        ArrayList<ObjetosCliente> listaClientes = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

        //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS CLIENTES
        try {
            agregarLog("Listar Personas.");
            listaPersonas = NuevaPersona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            agregarLog("Listar Clientes.");
            listaClientes = NuevoCliente.seleccionarCliente(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Error error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Persona - Seleccionar Cliente");
            agregarLog("Error al listar datos. \nError: " + error.toString());
        }

        //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
        try {
            agregarLog("Mostrar información de Clientes.");
            if (listaClientes.isEmpty()) {
                agregarLog("El listado de clientes esta vacio.");
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de clientes.", "Mostrar Registros Guardados");
            } else {
                
                agregarLog("Agregar columnas a la tabla detalle.");
                tabla.addColumn("NIT");
                tabla.addColumn("Nombre");
                tabla.addColumn("Direccion");
                tabla.addColumn("Telefono");
                tabla.addColumn("Celular");
                tabla.addColumn("Email");
                tabla.addColumn("Limite de credito");
                tabla.addColumn("Dias de credito");
                tabla.addColumn("Tipo cliente");
                tabla.setRowCount(listaClientes.size());
                int cCliente = 0;
                
                agregarLog("Recorrer listado de Clientes y Personas.");
                for (ObjetosCliente xCliente : listaClientes) {
                    for (ObjetosPersona xPersona : listaPersonas) {
                        if (xCliente.getId_persona() == xPersona.getId_persona()) {
                            tabla.setValueAt(xPersona.getNit_persona(), cCliente, 0);
                            tabla.setValueAt(xPersona.getNom_persona(), cCliente, 1);
                            tabla.setValueAt(xCliente.getDir_cliente(), cCliente, 2);
                            tabla.setValueAt(xCliente.getTel_cliente(), cCliente, 3);
                            tabla.setValueAt(xCliente.getCelular_cliente(), cCliente, 4);
                            tabla.setValueAt(xCliente.getEmail_cliente(), cCliente, 5);
                            tabla.setValueAt(xCliente.getLimite_credito(), cCliente, 6);
                            tabla.setValueAt(xCliente.getDias_de_credito(), cCliente, 7);
                            tabla.setValueAt(xCliente.getTipo_cliente(), cCliente, 8);
                        }
                    }
                    cCliente++;
                }
                
                agregarLog("Asignar valores a la tabla detalle.");
                tblCliente.setModel(tabla);
            }
        } catch (Exception Error) {
            agregarLog("Ocurrio un error al comparar las listas de datos. \nError: " + Error.toString());
        }
        
    }

    private int obtenerIdPersona(String pNit_persona) {

        agregarLog("Buscado datos de la Persona por medio del NIT.");
        int id_persona = 0;
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
            agregarLog("Ocurrio un error al buscar a la Persona. \nError: " + error.toString());
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existe esta Persona en la Base de Datos.", "Obtener ID Persona");
        } else {
            id_persona = BuscarPersona.get(0).getId_persona();
        }

        agregarLog("ID Persona: " + id_persona);
        return id_persona;
        
    }

    private int obtenerIdCliente(String pNit_cliente) {

        agregarLog("Tratando de obtener el ID del Cliente.");
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        int vId_persona = 0;
        int vId_cliente = 0;

        //BUSCAR EL ID DE LA PERSONA
        vId_persona = obtenerIdPersona(pNit_cliente);
        agregarLog("ID Persona: " + vId_persona);

        //CONSULTAR EL ID DE LA PERSONA EN CLIENTE
        try {
            agregarLog("Buscando datos del Cliente.");
            BuscarCliente = NuevoCliente.buscarCliente(vId_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", error.getMessage(), "Buscar Cliente");
        }
        
        agregarLog("Cantidad de Clientes encontrados: " + BuscarCliente.size());

        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if (BuscarCliente.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe crear este cliente en la base de datos.", "Obtener ID Cliente");
        } else {
            if (BuscarCliente.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Este numero de Nit esta repetido.", "Obtener ID Cliente");
            } else {
                vId_cliente = BuscarCliente.get(0).getId_cliente();
            }
        }

        agregarLog("ID Cliente: " + vId_cliente);
        return vId_cliente;
    }

    private void buscarEnRegistrosGuardados() {

        agregarLog("Buscando registros guardados.");
        
        String busqueda = txtBuscar.getText().trim();

        agregarLog("Verificar que el campo de busqueda no este vacio.");
        if (busqueda != null) {
            
            DefaultTableModel tabla = new DefaultTableModel();
            ArrayList<ObjetosCliente> listaClientes = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS CLIENTES
            try {
                agregarLog("Listar Clientes.");
                listaClientes = NuevoCliente.seleccionarCliente(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                agregarLog("Listar Personas.");
                listaPersonas = NuevaPersona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Cliente - Seleccionar Persona");
                agregarLog("Eror al listar Clientes y Personas. \nError: " + error.toString());
            }

            //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
            if (listaClientes.isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de clientes.", "Buscar en Registros Guardados");
            } else {
                
                agregarLog("Establecer el nombre de las columnas.");
                tabla.addColumn("NIT");
                tabla.addColumn("Nombre");
                tabla.addColumn("Direccion");
                tabla.addColumn("Telefono");
                tabla.addColumn("Celular");
                tabla.addColumn("Email");
                tabla.addColumn("Limite de credito");
                tabla.addColumn("Dias de credito");
                tabla.addColumn("Tipo cliente");

                int cCliente = 0;
                int contadorFilas = 1;

                // RECORRO TODA LA LISTA DE PERSONAS
                for (ObjetosPersona xPersona : listaPersonas) {

                    // COMPARA CADA ELEMENTO NIT Y NOMBRE DE LA LISTA PARA VER SI ALGUNO ES EL BUSCADO
                    if (xPersona.getNit_persona().indexOf(busqueda) >= 0
                            || xPersona.getNom_persona().toUpperCase().indexOf(busqueda.toUpperCase()) >= 0) {


                        // SI LA BUSQUEDA COINCIDE RECORRO LA LISTA DE CLIENTES 
                        // PARA OBTENER LA DIRECCION Y EL TELEFONO DE LA PERSONA
                        for (ObjetosCliente xCliente : listaClientes) {
                            if (xPersona.getId_persona() == xCliente.getId_persona()) {

                                // ESTABLECE EL TAMAÑO DE LA TABLA
                                tabla.setRowCount(contadorFilas);

                                tabla.setValueAt(xPersona.getNit_persona(), cCliente, 0);
                                tabla.setValueAt(xPersona.getNom_persona(), cCliente, 1);
                                tabla.setValueAt(xCliente.getDir_cliente(), cCliente, 2);
                                tabla.setValueAt(xCliente.getTel_cliente(), cCliente, 3);
                                tabla.setValueAt(xCliente.getCelular_cliente(), cCliente, 4);
                                tabla.setValueAt(xCliente.getEmail_cliente(), cCliente, 5);
                                tabla.setValueAt(xCliente.getLimite_credito(), cCliente, 6);
                                tabla.setValueAt(xCliente.getDias_de_credito(), cCliente, 7);
                                tabla.setValueAt(xCliente.getTipo_cliente(), cCliente, 8);
                                cCliente++;
                                contadorFilas++;
                            }
                        }

                    }
                }
                tblCliente.setModel(tabla);
            }
        } else {
            // SI NO HAY CARACTER DE BUSQUEDA SE DESPLIEGAN TODOS LOS DATOS
            mostrarRegistrosGuardados();
        }

    }

    private void buscarCliente() {

        cliente_encontrado = false;
        persona_encontrada = false;

        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(txtNitPersona.getText().trim(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }

        if (BuscarPersona.isEmpty()) {
            persona_encontrada = false;
            txtIdPersona.setText(String.valueOf(BuscarPersona.get(0).getId_persona()));
            txtNomPersona.setText(BuscarPersona.get(0).getNom_persona());
        } else {
            persona_encontrada = true; 
            try {
                BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Cliente");
            }
        }

        if (BuscarCliente.isEmpty()) {
            cliente_encontrado = false;
            txtIdCliente.setText(String.valueOf(BuscarCliente.get(0).getId_cliente()));
            txtDirCliente.setText(BuscarCliente.get(0).getDir_cliente());
            txtTelCliente.setText(String.valueOf(BuscarCliente.get(0).getTel_cliente()));
        } else {
            cliente_encontrado = true;
        }
    }

    private boolean verificarDatosCliente() {

        boolean vDatosCorrectos = true;

        if (txtNitPersona.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT.", "Verificar Datos Cliente");
            vDatosCorrectos = false;
        }

        if (txtNomPersona.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el Nombre del cliente.", "Verificar Datos Cliente");
            vDatosCorrectos = false;
        }

        if (txtTelCliente.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de Telefono.", "Verificar Datos Cliente");
            vDatosCorrectos = false;
        }
        if (txtDirCliente.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese la Direccion del cliente.", "Verificar Datos Cliente");
            vDatosCorrectos = false;
        }
        if(txtCelular.getText().isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de celular.", "Verificar Datos Cliente");
        }
        
        return vDatosCorrectos;
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        boolean persona_guardada = false;

        if (verificarDatosCliente()) {
            Persona.setId_persona(0);
            Persona.setNit_persona(txtNitPersona.getText().trim());
            Persona.setNom_persona(txtNomPersona.getText().replaceAll("'", "´"));
            Cliente.setId_cliente(0);
            Cliente.setId_persona(0);
            String valor_direccion = txtDirCliente.getText();
            if(valor_direccion.equals("0") || valor_direccion.isEmpty()) {
                valor_direccion = "Ciudad";
            } else {
                valor_direccion = txtDirCliente.getText().replaceAll("'", "´");
            }
            Cliente.setDir_cliente(valor_direccion);
            Cliente.setTel_cliente(Integer.parseInt(txtTelCliente.getText()));
            Cliente.setCelular_cliente(Integer.parseInt(txtCelular.getText()));
            Cliente.setEmail_cliente(txtEmail.getText().trim());
            Cliente.setLimite_credito(Float.parseFloat(txtLimiteCredito.getText()));
            Cliente.setDias_de_credito(Integer.parseInt(cbxDiasCredito.getSelectedItem().toString()));
            Cliente.setTipo_cliente(cbxTipo.getSelectedItem().toString());
        }

        try {
            if(persona_encontrada == false) {
                NuevaPersona.insertarPersona(Persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                persona_guardada = true;
            } else {
                persona_guardada = false;
            }
        } catch (Exception error) {
            persona_guardada = false;
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Insertar Persona");
        }

        
        try {
            if(persona_encontrada == true || persona_guardada == true) {
                Cliente.setId_persona(obtenerIdPersona(txtNitPersona.getText()));
                NuevoCliente.insertarCliente(Cliente, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            }
            limpiarCampos();
            mostrarRegistrosGuardados();
            Mensaje.manipulacionExcepciones("informacion", "Datos guardados exitosamente.", "Guardar");
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Insertar Cliente");
        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNitPersonaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitPersonaFocusLost
        //Pattern patron = Pattern.compile("[0-9]*[-][0-9A-Z]");
        //Matcher expresion = patron.matcher(txtNitPersona.getText());
        //if(expresion.matches()) {
            buscarCliente();
        //} else {
            //Mensaje.manipulacionExcepciones("critico", "Este numero de NIT no es valido, ingreselo de nuevo.", "NIT Persona");
            //txtNitPersona.requestFocus();
        //}
    }//GEN-LAST:event_txtNitPersonaFocusLost

    private void txtNomPersonaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPersonaFocusGained

        if (txtNitPersona.getText().isEmpty()) {
            txtNitPersona.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT para este cliente.", "Nombre Persona");
        }
    }//GEN-LAST:event_txtNomPersonaFocusGained

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        //ACTUALIZAR LOS DATOS DE PERSONA
        Persona.setId_persona(Integer.parseInt(txtIdPersona.getText()));
        Persona.setNit_persona(txtNitPersona.getText().trim());
        Persona.setNom_persona(txtNomPersona.getText().replaceAll("'", "´"));
       
        try {
            Mensaje.manipulacionExcepciones("informacion", NuevaPersona.actualizarPersona(Persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()), "Actualizar Persona");
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Actualizar Persona");
        }
        //ACTUALIZAR LOS DATOS DE CLIENTE
        Cliente.setId_cliente(Integer.parseInt(txtIdCliente.getText().trim()));
        Cliente.setId_persona(Persona.getId_persona());
        String valor_direccion = txtDirCliente.getText();
        if (valor_direccion.equals("0") || valor_direccion.isEmpty()) {
            valor_direccion = "Ciudad";
        } else {
            valor_direccion = txtDirCliente.getText().replaceAll("'", "´");
        }
        Cliente.setDir_cliente(valor_direccion);
        Cliente.setTel_cliente(Integer.parseInt(txtTelCliente.getText()));
        Cliente.setCelular_cliente(Integer.parseInt(txtCelular.getText()));
        Cliente.setEmail_cliente(txtEmail.getText().trim());
        Cliente.setLimite_credito(Float.parseFloat(txtLimiteCredito.getText()));
        //Cliente.setDias_de_credito(Integer.parseInt(txtDiasCredito.getText()));
        Cliente.setDias_de_credito(Integer.parseInt(cbxDiasCredito.getSelectedItem().toString()));
        Cliente.setTipo_cliente(cbxTipo.getSelectedItem().toString());

        try {
            Mensaje.manipulacionExcepciones("informacion", NuevoCliente.actualizarCliente(Cliente, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()), "Actualizar Cliente");
            mostrarRegistrosGuardados();
            limpiarCampos();
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Actualizar Cliente");
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void tblClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClienteMouseClicked
        
        btnGuardar.setEnabled(false);
        if (String.valueOf(tblCliente.getSelectedColumn()).equals("0")) {
            int fila_seleccionada = tblCliente.getSelectedRow();
            int columna_seleccionada = tblCliente.getSelectedColumn();
            txtNitPersona.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada)));
            txtNomPersona.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 1)));
            txtDirCliente.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 2)));
            txtTelCliente.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 3)));
            txtCelular.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 4)));
            txtEmail.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 5)));
            txtLimiteCredito.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 6)));
            //txtDiasCredito.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 7)));
            cbxDiasCredito.setSelectedItem(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 7)));
            cbxTipo.setSelectedItem(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 8)));
            
            // CON EL NUMERO DE NIT OBTENGO EL ID DE LA PERSONA
            txtIdPersona.setText(String.valueOf(obtenerIdPersona(txtNitPersona.getText())));
            
            //YA SELECCIONADO EL NIT BUSCO EL CLIENTE CON EL METODO BUSCAR ID CLIENTE
            txtIdCliente.setText(String.valueOf(obtenerIdCliente(txtNitPersona.getText())));
            
        }
    }//GEN-LAST:event_tblClienteMouseClicked

    private void tipoActionPerormed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerormed
        
        String version = "";

        try {
            version = Archivo.leer("[Version]");
        } catch (Exception Error) {
            System.out.println(Error.toString());
            Mensaje.manipulacionExcepciones("critico", "No encontro la versión del Sistema.", "Versión del sistema");
        }
        
        
        if(cbxTipo.getSelectedItem().toString().equals("C")) {
            cbxDiasCredito.setSelectedItem("0");
            cbxDiasCredito.setEnabled(false);
            txtLimiteCredito.setText("0");
            txtLimiteCredito.setEnabled(false);
        } else {
            if(Inventory.lblRol.getText().equals("Administrador") && version.equals("2020")) {
                cbxDiasCredito.setEnabled(true);
                txtLimiteCredito.setEnabled(true);
            } else {
                Mensaje.manipulacionExcepciones("critico", "Usted no tiene permisos para asignar otro tipo de cliente distinco a C.", "Cambio de Tipo");
                cbxTipo.setSelectedItem("C");
                cbxDiasCredito.setSelectedItem("0");
                cbxDiasCredito.setEnabled(false);
                txtLimiteCredito.setText("0");
                txtLimiteCredito.setEnabled(false);
            }
        }
    }//GEN-LAST:event_tipoActionPerormed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox cbxDiasCredito;
    private javax.swing.JComboBox cbxTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCelular;
    private javax.swing.JLabel lblDirCliente;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblIdCliente;
    private javax.swing.JLabel lblIdPersona;
    private javax.swing.JLabel lblNitCliente;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblTelCliente;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtDirCliente;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIdCliente;
    private javax.swing.JTextField txtIdPersona;
    private javax.swing.JTextField txtLimiteCredito;
    public static javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNomPersona;
    private javax.swing.JTextField txtTelCliente;
    // End of variables declaration//GEN-END:variables
}
