package inventory.vistas;

import inventory.acceso.*;
import inventory.objetos.ObjetosDetalleOrdenEstado;
import inventory.objetos.ObjetosOrden;
import inventory.objetos.ObjetosSucursal;
import inventory.servicios.Matematicas;
import java.awt.Dimension;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import objetos.ObjetosCaja;

public class wdwBaseDeDAtosHistorialOrdenesDeServicio extends javax.swing.JInternalFrame {

    private static String Log = "";
    private Matematicas matematicas = new Matematicas();
    
    /**
     * Creates new form wdwBaseDeDAtosHistorialDeVentas
     */
    public wdwBaseDeDAtosHistorialOrdenesDeServicio() {
        initComponents();
        //Ocultar el boton para eliminar estado si no es administrador o jefe de sucursal
        if(Inventory.lblRol.getText().equals("Administrador") || Inventory.lblRol.getText().equals("Jefe Sucursal")) {
            btnEliminaUltimoEstado.setEnabled(true);
        } else {
            btnEliminaUltimoEstado.setEnabled(false);
        }
    }
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "HISTORIAL ORDENES" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    AccesoOrden acceso = new AccesoOrden();
    AccesoDetalleOrden acceso_detalle_orden = new AccesoDetalleOrden();
    ObjetosDetalleOrdenEstado objeto_detalle_orden = new ObjetosDetalleOrdenEstado();
    AccesoExcepciones mensaje = new AccesoExcepciones();
    
    private void mostrarRegistrosGuardados(String pFecha_incial , String pFecha_final){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosOrden>  listado = new ArrayList();
        
        try{
            listado = acceso.listarOrdenesPorFecha(pFecha_incial, pFecha_final, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Fecha");
        }
        
        //Mostrar los valores de la lista
        if(listado.isEmpty()){
            mensaje.manipulacionExcepciones("critico", "No existen datos almacenados para esta Fecha.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Orden");
            tabla.addColumn("Serie");
            tabla.addColumn("Modelo");
            tabla.addColumn("Marca");
            tabla.addColumn("Fecha Creacion");
            tabla.addColumn("Usuario Encargado");
            tabla.addColumn("Fecha Estimada");
            tabla.addColumn("Estado");
            tabla.addColumn("Total");
            tabla.addColumn("Abono");
            tabla.addColumn("Saldo");
            tabla.setRowCount(listado.size());
            
            int c = 0;

            for(ObjetosOrden x : listado) {
                tabla.setValueAt(x.getId_orden(), c, 0); 
                tabla.setValueAt(x.getSerie_producto_orden(), c, 1);
                tabla.setValueAt(x.getModelo_producto_orden(), c, 2);
                tabla.setValueAt(x.getMarca_producto_orden(), c, 3);
                tabla.setValueAt(x.getFecha_creacion_orden(), c, 4);
                tabla.setValueAt(x.getUsuario_creacion_orden(), c, 5);
                tabla.setValueAt(x.getFecha_programada_entrega_orden(), c, 6);
                tabla.setValueAt(x.getEstado_orden(), c, 7);
                tabla.setValueAt(x.getTotal_orden(), c, 8);
                tabla.setValueAt(x.getAbono_presupuesto_orden(), c, 9);
                double saldo = matematicas.aproxima(x.getTotal_orden() - x.getAbono_presupuesto_orden(), 2);
                tabla.setValueAt(saldo, c, 10);
                c++;
            }
            
            tblDetalleHistorial.setModel(tabla);
        }
    }

    private void limpiarTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        try {
            for (int x = 0; x < modelo.getRowCount(); x++) {
                modelo.removeRow(x);
            }
        } catch (Exception Error) {
            System.out.println("Error al limpira tabla de Componentes: \n" + Error.toString());
        }
        tblDetalleHistorial.setModel(modelo);
    }
    
    private void mostrarRegistrosNombre(String nombre){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosOrden>  listado = new ArrayList();
        
        try{
            if(txtNombre.getText().isEmpty()) {
                mensaje.manipulacionExcepciones("critico", "Por favor ingrese el nombre a buscar.", "Buscar por Nombre");
            } else {
                listado = acceso.listarOrdenesPorNombre(txtNombre.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            }
        }catch(Error error){
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Fecha");
        }
        
        //Mostrar los valores de la lista
        if(listado.isEmpty()){
            mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de este Cliente.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Orden");
            tabla.addColumn("Serie");
            tabla.addColumn("Modelo");
            tabla.addColumn("Marca");
            tabla.addColumn("Fecha Creacion");
            tabla.addColumn("Usuario Encargado");
            tabla.addColumn("Fecha Estimada");
            tabla.addColumn("Estado");
            tabla.addColumn("Total");
            tabla.addColumn("Abono");
            tabla.addColumn("Saldo");
            tabla.setRowCount(listado.size());
            int c = 0;
            
            for (ObjetosOrden x : listado) {
                tabla.setValueAt(x.getId_orden(), c, 0);
                tabla.setValueAt(x.getSerie_producto_orden(), c, 1);
                tabla.setValueAt(x.getModelo_producto_orden(), c, 2);
                tabla.setValueAt(x.getMarca_producto_orden(), c, 3);
                tabla.setValueAt(x.getFecha_creacion_orden(), c, 4);
                tabla.setValueAt(x.getUsuario_creacion_orden(), c, 5);
                tabla.setValueAt(x.getFecha_programada_entrega_orden(), c, 6);
                tabla.setValueAt(x.getEstado_orden(), c, 7);
                tabla.setValueAt(x.getTotal_orden(), c, 8);
                tabla.setValueAt(x.getAbono_presupuesto_orden(), c, 9);
                double saldo = matematicas.aproxima(x.getTotal_orden() - x.getAbono_presupuesto_orden(), 2);
                tabla.setValueAt(saldo, c, 10);
                c++;
            }
            
            tblDetalleHistorial.setModel(tabla);
        }
        
    }
    
    private void mostrarRegistrosEstado(String estado){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosOrden>  listado = new ArrayList();
        
        try {
            listado = acceso.listarOrdenesPorEstado(estado, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Error error) {
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Fecha");
        }
        
        //Mostrar los valores de la lista
        if(listado.isEmpty()){
            mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de este Cliente.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Orden");
            tabla.addColumn("Serie");
            tabla.addColumn("Modelo");
            tabla.addColumn("Marca");
            tabla.addColumn("Fecha Creacion");
            tabla.addColumn("Usuario Encargado");
            tabla.addColumn("Fecha Estimada");
            tabla.addColumn("Estado");
            tabla.addColumn("Total");
            tabla.addColumn("Abono");
            tabla.addColumn("Saldo");
            tabla.setRowCount(listado.size());
            int c = 0;
            
            for (ObjetosOrden x : listado) {
                tabla.setValueAt(x.getId_orden(), c, 0);
                tabla.setValueAt(x.getSerie_producto_orden(), c, 1);
                tabla.setValueAt(x.getModelo_producto_orden(), c, 2);
                tabla.setValueAt(x.getMarca_producto_orden(), c, 3);
                tabla.setValueAt(x.getFecha_creacion_orden(), c, 4);
                tabla.setValueAt(x.getUsuario_creacion_orden(), c, 5);
                tabla.setValueAt(x.getFecha_programada_entrega_orden(), c, 6);
                tabla.setValueAt(x.getEstado_orden(), c, 7);
                tabla.setValueAt(x.getTotal_orden(), c, 8);
                tabla.setValueAt(x.getAbono_presupuesto_orden(), c, 9);
                double saldo = matematicas.aproxima(x.getTotal_orden() - x.getAbono_presupuesto_orden(), 2);
                tabla.setValueAt(saldo, c, 10);
                c++;
            }
            
            tblDetalleHistorial.setModel(tabla);
        }
        
    }
    
    private void mostrarRegistrosAplicaGarantia(String aplica){
        
        DefaultTableModel tabla = new DefaultTableModel();
        
        ArrayList<ObjetosOrden>  listado = new ArrayList();
        
        try {
            listado = acceso.listarOrdenesAplicaGarantia(aplica, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Error error) {
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Aplica Garantia");
        }
        
        //Mostrar los valores de la lista
        if(listado.isEmpty()){
            mensaje.manipulacionExcepciones("critico", "No existen datos almacenados en la base de datos.", "Mostrar Registros Garantia");
        } else {
            tabla.addColumn("ID Orden");
            tabla.addColumn("Serie");
            tabla.addColumn("Modelo");
            tabla.addColumn("Marca");
            tabla.addColumn("Fecha Creacion");
            tabla.addColumn("Usuario Encargado");
            tabla.addColumn("Fecha Estimada");
            tabla.addColumn("Estado");
            tabla.addColumn("Total");
            tabla.addColumn("Abono");
            tabla.addColumn("Saldo");
            tabla.setRowCount(listado.size());
            int c = 0;
            
            for (ObjetosOrden x : listado) {
                tabla.setValueAt(x.getId_orden(), c, 0);
                tabla.setValueAt(x.getSerie_producto_orden(), c, 1);
                tabla.setValueAt(x.getModelo_producto_orden(), c, 2);
                tabla.setValueAt(x.getMarca_producto_orden(), c, 3);
                tabla.setValueAt(x.getFecha_creacion_orden(), c, 4);
                tabla.setValueAt(x.getUsuario_creacion_orden(), c, 5);
                tabla.setValueAt(x.getFecha_programada_entrega_orden(), c, 6);
                tabla.setValueAt(x.getEstado_orden(), c, 7);
                tabla.setValueAt(x.getTotal_orden(), c, 8);
                tabla.setValueAt(x.getAbono_presupuesto_orden(), c, 9);
                double saldo = matematicas.aproxima(x.getTotal_orden() - x.getAbono_presupuesto_orden(), 2);
                tabla.setValueAt(saldo, c, 10);
                c++;
            }
            
            tblDetalleHistorial.setModel(tabla);
        }
        
    }
    
    private void mostrarRegistrosSerie(String serie){
        
        DefaultTableModel tabla = new DefaultTableModel();
        ArrayList<ObjetosOrden>  listado = new ArrayList();
     
        try {
            listado = acceso.listarOrdenesPorSerie(txtSerie.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

        } catch (Error error) {
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Fecha");
        }
        
        //Mostrar los valores de la lista
        if(listado.isEmpty()){
            mensaje.manipulacionExcepciones("critico", "No existen datos almacenados para esta Serie.", "Mostrar Registros Guardados");
        } else {
            tabla.addColumn("ID Orden");
            tabla.addColumn("Serie");
            tabla.addColumn("Modelo");
            tabla.addColumn("Marca");
            tabla.addColumn("Fecha Creacion");
            tabla.addColumn("Usuario Encargado");
            tabla.addColumn("Fecha Estimada");
            tabla.addColumn("Estado");
            tabla.addColumn("Total");
            tabla.addColumn("Abono");
            tabla.addColumn("Saldo");
            tabla.setRowCount(listado.size());
            int c = 0;
            
            for (ObjetosOrden x : listado) {
                tabla.setValueAt(x.getId_orden(), c, 0);
                tabla.setValueAt(x.getSerie_producto_orden(), c, 1);
                tabla.setValueAt(x.getModelo_producto_orden(), c, 2);
                tabla.setValueAt(x.getMarca_producto_orden(), c, 3);
                tabla.setValueAt(x.getFecha_creacion_orden(), c, 4);
                tabla.setValueAt(x.getUsuario_creacion_orden(), c, 5);
                tabla.setValueAt(x.getFecha_programada_entrega_orden(), c, 6);
                tabla.setValueAt(x.getEstado_orden(), c, 7);
                tabla.setValueAt(x.getTotal_orden(), c, 8);
                tabla.setValueAt(x.getAbono_presupuesto_orden(), c, 9);
                double saldo = matematicas.aproxima(x.getTotal_orden() - x.getAbono_presupuesto_orden(), 2);
                tabla.setValueAt(saldo, c, 10);
                c++;
            }
            
            tblDetalleHistorial.setModel(tabla);
        }
        
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleHistorial = new javax.swing.JTable();
        pnlBotones = new javax.swing.JPanel();
        lblIdVenta = new javax.swing.JLabel();
        txtIdOrden = new javax.swing.JTextField();
        lblHasta = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        btnReporte = new javax.swing.JButton();
        lblFecha1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtSerie = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDescripcionProducto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFechaInicial = new com.toedter.calendar.JDateChooser();
        txtFechaFinal = new com.toedter.calendar.JDateChooser();
        btnBuscarSerie = new javax.swing.JButton();
        btnBuscarIdProducto = new javax.swing.JButton();
        cbxEstado = new javax.swing.JComboBox();
        btnEliminaUltimoEstado = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbxAplicaGarantia = new javax.swing.JComboBox();
        btnMostrar = new javax.swing.JButton();
        btnMostrarNombre = new javax.swing.JButton();
        txtBuscarAplicaGarantia = new javax.swing.JButton();
        btnMostrarPorEstadoFecha = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Historial de Ordenes de Servicio");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/historialVentas.png"))); // NOI18N

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Orden", "Serie", "Modelo", "Marca", "Fecha Creacion", "Usuario Encargado", "Fecha Estimada", "Estado", "Total", "Abono", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleHistorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleHistorialMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleHistorial);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdVenta.setText("ID Orden");

        txtIdOrden.setBackground(new java.awt.Color(255, 255, 204));
        txtIdOrden.setToolTipText("Ingrese el ID de la venta o seleccionela de la lista de busqueda");

        lblHasta.setText("Hasta");

        lblFecha.setText("Desde");

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonImpresoraLaser.png"))); // NOI18N
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        lblFecha1.setText("Nombre");

        txtNombre.setToolTipText("Espacios en blanco al final y al inico de la plabra colocar el simbolo %");

        txtSerie.setToolTipText("");

        jLabel1.setText("Serie");

        txtIdProducto.setToolTipText("");

        jLabel3.setText("ID Producto");

        txtDescripcionProducto.setBackground(new java.awt.Color(102, 102, 102));
        txtDescripcionProducto.setEditable(false);
        txtDescripcionProducto.setForeground(new java.awt.Color(255, 255, 255));
        txtDescripcionProducto.setToolTipText("");

        jLabel4.setText("Descripcion");

        txtFechaInicial.setBackground(new java.awt.Color(240, 240, 204));
        txtFechaInicial.setToolTipText("Ingrese la Fecha Inicial.");
        txtFechaInicial.setDateFormatString("yyyy-MM-dd");
        txtFechaInicial.setMaximumSize(new java.awt.Dimension(120, 20));
        txtFechaInicial.setMinimumSize(new java.awt.Dimension(120, 20));
        txtFechaInicial.setPreferredSize(new java.awt.Dimension(120, 20));

        txtFechaFinal.setBackground(new java.awt.Color(240, 240, 204));
        txtFechaFinal.setToolTipText("Ingrese la Fecha Final.");
        txtFechaFinal.setDateFormatString("yyyy-MM-dd");
        txtFechaFinal.setMaximumSize(new java.awt.Dimension(120, 20));
        txtFechaFinal.setMinimumSize(new java.awt.Dimension(120, 20));
        txtFechaFinal.setPreferredSize(new java.awt.Dimension(120, 20));

        btnBuscarSerie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarSerieActionPerformed(evt);
            }
        });

        btnBuscarIdProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarIdProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarIdProductoActionPerformed(evt);
            }
        });

        cbxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Creada", "Diagnostico", "No Contesta", "Acepta Reparacion", "No Acepta Reparacion", "Remplazo de Equipo", "Rembolso de Efectivo", "En Proceso", "Finaliza Reparacion", "Notifica Finalizacion", "Entregado", "En Espera" }));

        btnEliminaUltimoEstado.setText("Elimina Ultimo Estado");
        btnEliminaUltimoEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaUltimoEstadoActionPerformed(evt);
            }
        });

        jLabel2.setText("Aplica Garantía ");

        cbxAplicaGarantia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrar.setText("Buscar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnMostrarNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrarNombre.setText("Buscar");
        btnMostrarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarNombreActionPerformed(evt);
            }
        });

        txtBuscarAplicaGarantia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        txtBuscarAplicaGarantia.setText("Buscar");
        txtBuscarAplicaGarantia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarAplicaGarantiaActionPerformed(evt);
            }
        });

        btnMostrarPorEstadoFecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnMostrarPorEstadoFecha.setText("Buscar");
        btnMostrarPorEstadoFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarPorEstadoFechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdVenta)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtIdOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarSerie))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtIdProducto)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarIdProducto))
                    .addComponent(txtDescripcionProducto))
                .addGap(18, 18, 18)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFecha1)
                    .addComponent(lblFecha)
                    .addComponent(btnReporte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblHasta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEliminaUltimoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxAplicaGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbxEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(txtNombre))
                .addGap(18, 18, 18)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMostrar)
                            .addComponent(btnMostrarNombre))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBuscarAplicaGarantia)
                            .addComponent(btnMostrarPorEstadoFecha))
                        .addContainerGap())))
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIdVenta)
                            .addComponent(jLabel1)
                            .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarSerie))
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addGroup(pnlBotonesLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(btnBuscarIdProducto)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFechaInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFecha, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHasta, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMostrar, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFecha1)
                            .addComponent(btnMostrarNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxAplicaGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtBuscarAplicaGarantia))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEliminaUltimoEstado)
                        .addComponent(btnMostrarPorEstadoFecha))
                    .addComponent(btnReporte))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        limpiarTabla();
        if (txtFechaInicial.getDate().toString().equals("") || txtFechaFinal.getDate().toString().equals("")) {
            mensaje.manipulacionExcepciones("critico", "Por favor ingrese la Fechas.", "Boton Buscar");
        } else {
            String desde = ( txtFechaInicial.getDate().getYear() + 1900 ) + "-" + ( txtFechaInicial.getDate().getMonth() + 1 ) + "-" + txtFechaInicial.getDate().getDate();
            String hasta = ( txtFechaFinal.getDate().getYear() + 1900 ) + "-" + ( txtFechaFinal.getDate().getMonth() + 1 ) + "-" + txtFechaFinal.getDate().getDate();
            mostrarRegistrosGuardados(desde, hasta);
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void tblDetalleHistorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleHistorialMouseClicked
        
        if (String.valueOf(tblDetalleHistorial.getSelectedColumn()).equals("0")) {   
            int fila_seleccionada = tblDetalleHistorial.getSelectedRow();
            txtIdOrden.setText(tblDetalleHistorial.getValueAt(fila_seleccionada, 0).toString());
        }
    }//GEN-LAST:event_tblDetalleHistorialMouseClicked

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        
        String costo = "0.00";
        String costo_extra = "0.00";
        
        //Obtener valores constantes
        try {
            AccesoArchivo archivo = new AccesoArchivo();
            costo = archivo.leer("[Costo]");
            costo_extra = archivo.leer("[CostoExtra]");
        } catch(IOException Error) {
            costo = "Q.75.00";
            costo_extra = "Q.100.00";
            mensaje.manipulacionExcepciones("critico", "No se encontro el valor del Costo fijo del Diagnostico.", "Costo Diagnostico");
        }
                
        //LLamar al reporte
        try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            AccesoOrden acceso_orden = new AccesoOrden();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            ObjetosOrden objeto_orden = new ObjetosOrden();
            AccesoCaja acceso_caja = new AccesoCaja();
            ObjetosCaja objeto_caja = new ObjetosCaja();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptOrdenServicioHistorial.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //buscar los datos de la orden por el id de la orden
            objeto_orden = acceso_orden.buscarOrdenPorId(Integer.parseInt(txtIdOrden.getText()), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //Parametros del reporte para los datos de la empresa.
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal());
            parametro.put("P_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_INFORMACION", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());
            parametro.put("P_USUARIO", "Impreso por: " + Inventory.lblUsuario.getText().toUpperCase());

            //Parametros del reporte para el encabezado de los datos 
            parametro.put("P_ID_ORDEN", Integer.parseInt(txtIdOrden.getText()));
            parametro.put("P_ID_CLIENTE", String.valueOf(objeto_orden.getId_cliente()));
            parametro.put("P_ID_SERIE", String.valueOf(objeto_orden.getId_serie()));
            parametro.put("P_ID_FACTURA", String.valueOf(objeto_orden.getId_factura_emitida()));
            parametro.put("P_CARACTERISTICAS", objeto_orden.getCaracteristicas_producto_orden());
            parametro.put("P_DEFECTO", objeto_orden.getDefecto_reportado_orden());
            parametro.put("P_DIAGNOSTICO", objeto_orden.getDiagnostico_orden());
            
            parametro.put("P_NOMBRE", txtNombre.getText().toUpperCase());
            parametro.put("P_TELEFONO", String.valueOf(objeto_orden.getTelefono_cliente_orden()));
            parametro.put("P_FECHA_CREACION", objeto_orden.getFecha_creacion_orden());
            parametro.put("P_USUARIO_RECIBE", objeto_orden.getTecnico_encargado_reparacion_orden());
            
            parametro.put("P_NUMERO_SERIE", objeto_orden.getSerie_producto_orden());
            parametro.put("P_MARCA", objeto_orden.getMarca_producto_orden());
            parametro.put("P_MODELO", objeto_orden.getModelo_producto_orden());
            
            parametro.put("P_SALDO_TOTAL", String.valueOf(objeto_orden.getValor_presupuesto_orden()));
            parametro.put("P_SALDO_INICIAL", String.valueOf(objeto_orden.getAbono_presupuesto_orden()));
            
            Double valor = objeto_orden.getValor_presupuesto_orden();
            Double abono = objeto_orden.getAbono_presupuesto_orden();
            Double saldo = valor - abono;
            
            parametro.put("P_SALDO_VENTAS", String.valueOf(saldo));
            
            parametro.put("P_ESTADO", objeto_orden.getEstado_orden());
            
            parametro.put("P_COSTO", String.valueOf(valor));
            parametro.put("P_COSTO_EXTRA", String.valueOf(costo_extra));
            
            
            //Datos nuevos para las series internas
            parametro.put("P_CASE", objeto_orden.getCase_orden());
            parametro.put("P_CARGADOR", objeto_orden.getCargador_orden());
            parametro.put("P_BATERIA", objeto_orden.getBateria_orden());
            parametro.put("P_FUENTE", objeto_orden.getFuente_orden());
            parametro.put("P_RAM1", objeto_orden.getRam1_orden());
            parametro.put("P_RAM2", objeto_orden.getRam2_orden());
            parametro.put("P_RAM3", objeto_orden.getRam3_orden());
            parametro.put("P_DISCO", objeto_orden.getDisco_orden());
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new net.sf.jasperreports.swing.JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
            this.toBack();
            
        } catch (JRException error) {
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte de Orden Servicio");
        }             
    }//GEN-LAST:event_btnReporteActionPerformed

    private void btnMostrarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarNombreActionPerformed
        limpiarTabla();
        if (txtNombre.getText().isEmpty()) {
            mensaje.manipulacionExcepciones("critico", "Por favor ingrese el nombre del Cliente.", "Boton Mostar");
        } else {
            mostrarRegistrosNombre(txtNombre.getText());
        }
    }//GEN-LAST:event_btnMostrarNombreActionPerformed

    private void btnBuscarSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarSerieActionPerformed
        limpiarTabla();
        if (txtSerie.getText().isEmpty()) {
            mensaje.manipulacionExcepciones("critico", "Por favor ingrese el numero de serie.", "Buscar por Serie");
        } else {
            mostrarRegistrosSerie(txtSerie.getText());
        }
        
    }//GEN-LAST:event_btnBuscarSerieActionPerformed

    private void btnBuscarIdProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarIdProductoActionPerformed
        wdwConsultaProductos ConsultaProductos = new wdwConsultaProductos("Historial Ordenes");
        int ancho = Inventory.pnlPrincipal.getWidth();
        int alto = Inventory.pnlPrincipal.getHeight();
        int x  = (ancho / 2) - (ConsultaProductos.getWidth() / 2);
        int y  = ((alto / 2) - (ConsultaProductos.getHeight() / 2)) / 2;
        ConsultaProductos.setVisible(true);
        Inventory.pnlPrincipal.add(ConsultaProductos);
        ConsultaProductos.toFront();
        ConsultaProductos.setLocation(x, y);
        wdwConsultaProductos.btnAgregarEquipo.setEnabled(true);
    }//GEN-LAST:event_btnBuscarIdProductoActionPerformed

    private void btnMostrarPorEstadoFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarPorEstadoFechaActionPerformed
        limpiarTabla();
        mostrarRegistrosEstado(cbxEstado.getSelectedItem().toString());
    }//GEN-LAST:event_btnMostrarPorEstadoFechaActionPerformed

    private void btnEliminaUltimoEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaUltimoEstadoActionPerformed
        
        //Busca el ultimo estado en el detalle de la Orden
        objeto_detalle_orden = acceso_detalle_orden.buscarUltimoEstadoOrden(Integer.parseInt(txtIdOrden.getText()), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        agregarLog("Estado encontrado: " + objeto_detalle_orden.getId_d_orden_estado());
        
        if(objeto_detalle_orden.getId_d_orden_estado() > 0) {
            
            //Elimina el ultimo estado del detalle de la orden siempre y cuando no este entregado ni creado
            if(!objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Equipo entregado al Cliente") || !objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Ingreso de la Orden de Servicio a Taller")) {
                
                agregarLog("Eliminando ultimo estado de la orden " + objeto_detalle_orden.getId_orden() + ".");
                acceso_detalle_orden.EliminarDetalleOrdenEstado(objeto_detalle_orden.getId_d_orden_estado(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                
                //Actualizar el estado actual de la orden
                agregarLog("Actualizando al estado correspondiente.");
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Inicio de Diagnostico")) { acceso.actualizarUltimoEstadoOrden("Creada", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Cliente No Contesta")) { acceso.actualizarUltimoEstadoOrden("Diagnostico", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Cliente Acepta Presupuesto Reparacion")) { acceso.actualizarUltimoEstadoOrden("Diagnostico", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Cleinte solicita remplazo de Equipo")) { acceso.actualizarUltimoEstadoOrden("Diagnostico", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Cleinte rembolso de dinero")) { acceso.actualizarUltimoEstadoOrden("Diagnostico", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Inicia el proceso de reparacion")) { acceso.actualizarUltimoEstadoOrden("Diagnostico", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Finaliza proceso de reparacion")) { acceso.actualizarUltimoEstadoOrden("En Proceso", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
                if(objeto_detalle_orden.getDescripcion_d_orden_estado().equals("Notifica a Cliente finalizacion")) { acceso.actualizarUltimoEstadoOrden("Finaliza Reparacion", objeto_detalle_orden.getId_orden(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()); }
            
            } else {
                mensaje.manipulacionExcepciones("critico", "El estado " + objeto_detalle_orden.getDescripcion_d_orden_estado() + " no puede ser eliminado." , "Eliminacion Invalida");
            }
            
        } else {
            mensaje.manipulacionExcepciones("critico", "No se encontro ningun cambio de estado para esta Orden.", "Eliminar Ultimo Estado");
        }
    }//GEN-LAST:event_btnEliminaUltimoEstadoActionPerformed

    private void txtBuscarAplicaGarantiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarAplicaGarantiaActionPerformed
        limpiarTabla();
        mostrarRegistrosAplicaGarantia(cbxAplicaGarantia.getSelectedItem().toString());
    }//GEN-LAST:event_txtBuscarAplicaGarantiaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarIdProducto;
    private javax.swing.JButton btnBuscarSerie;
    private javax.swing.JButton btnEliminaUltimoEstado;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnMostrarNombre;
    private javax.swing.JButton btnMostrarPorEstadoFecha;
    private javax.swing.JButton btnReporte;
    private javax.swing.JComboBox cbxAplicaGarantia;
    private javax.swing.JComboBox cbxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFecha1;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblIdVenta;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JTable tblDetalleHistorial;
    private javax.swing.JButton txtBuscarAplicaGarantia;
    public static javax.swing.JTextField txtDescripcionProducto;
    private com.toedter.calendar.JDateChooser txtFechaFinal;
    private com.toedter.calendar.JDateChooser txtFechaInicial;
    private javax.swing.JTextField txtIdOrden;
    public static javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSerie;
    // End of variables declaration//GEN-END:variables
}
