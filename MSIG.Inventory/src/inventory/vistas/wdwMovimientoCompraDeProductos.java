package inventory.vistas;

import inventory.acceso.*;
import inventory.librerias.WindowController;
import inventory.objetos.*;
import inventory.servicios.Matematicas;
import static inventory.vistas.wdwMovimientoVentaDeProductosNueva.tblDetalleFactura;
import java.awt.Dimension;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;

public class wdwMovimientoCompraDeProductos extends javax.swing.JInternalFrame {
    
    private Matematicas matematicas = new Matematicas();
    private DefaultTableModel detalle = new DefaultTableModel();
    private WindowController ventana = new WindowController();
    private ArrayList<ObjetosDetalleCompra> detalle_productos = new ArrayList<>();
    
    private String Log = "";

    /**
     * Creates new form wdwMovimientoCompraDeProductos
     */
    public wdwMovimientoCompraDeProductos() {
        initComponents();
        //this.tblDetalleCompra.setDefaultRenderer(Object.class, new SaveCellCompras());
    }
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "COMPRA" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }

    private void cargarDetalle() {
        
        detalle.addColumn("No.");
        detalle.addColumn("Codigo");
        detalle.addColumn("Descripcion");
        detalle.addColumn("Cantidad");
        detalle.addColumn("P. Compra");
        detalle.addColumn("P. Minimo");
        detalle.addColumn("P. Estandar");
        detalle.addColumn("Total");
        detalle.addColumn("Comentario");
        detalle.addColumn("Arancel");
        detalle.addColumn("Guardado");
        detalle.setRowCount(0);
        tblDetalleFactura.setModel(detalle);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdCompra = new javax.swing.JLabel();
        txtIdCompra = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        lblNumFacturaCompra = new javax.swing.JLabel();
        lblSerieFacturaCompra = new javax.swing.JLabel();
        txtSerieFacturaCompra = new javax.swing.JTextField();
        lblFolioFacturaCompra = new javax.swing.JLabel();
        txtFolioFacturaCompra = new javax.swing.JTextField();
        lblTotalFacturaCompra = new javax.swing.JLabel();
        txtTotalCompra = new javax.swing.JTextField();
        lblNitProveedor = new javax.swing.JLabel();
        txtNitProveedor = new javax.swing.JTextField();
        txtNombreProveedor = new javax.swing.JTextField();
        lblNumeroFactura = new javax.swing.JLabel();
        lblNombreProveedor = new javax.swing.JLabel();
        txtNumeroFacturaCompra = new javax.swing.JFormattedTextField();
        lblTipoCompra = new javax.swing.JLabel();
        jcomboTipoCompra = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txt_dias_credito = new javax.swing.JTextField();
        ckbPrecioPonderado = new javax.swing.JComboBox();
        txtFechaCompra = new com.toedter.calendar.JDateChooser();
        pnlBotones = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSerie = new javax.swing.JButton();
        btnReconectar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleCompra = new javax.swing.JTable();
        pnlTarjeta = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txt_banco_emisor_tarjeta = new javax.swing.JTextField();
        txt_numero_tarjeta = new javax.swing.JTextField();
        pnlNotaCredito = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_numeroNC = new javax.swing.JTextField();
        txt_serie_ncredito = new javax.swing.JTextField();
        pnlPago = new javax.swing.JPanel();
        txt_cant_contado = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_cant_credito = new javax.swing.JTextField();
        pnlCheque = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_no_cheque = new javax.swing.JTextField();
        txt_banco_emisor_cheque = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Compra de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgMovimientoCompraDeProductos.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(850, 500));
        setMinimumSize(new java.awt.Dimension(850, 500));
        setPreferredSize(new java.awt.Dimension(850, 500));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdCompra.setText("ID Compra");

        txtIdCompra.setEditable(false);
        txtIdCompra.setBackground(new java.awt.Color(102, 102, 102));
        txtIdCompra.setForeground(new java.awt.Color(255, 255, 255));
        txtIdCompra.setToolTipText("El numero de compra se genera automaticamente.");

        lblFecha.setText("Fecha");

        lblNumFacturaCompra.setToolTipText("Ingrese el numero de factura (no es requerido)");

        lblSerieFacturaCompra.setText("Serie");

        txtSerieFacturaCompra.setBackground(new java.awt.Color(255, 255, 204));
        txtSerieFacturaCompra.setToolTipText("Ingrese la serie de la Factura");

        lblFolioFacturaCompra.setText("Folio");

        txtFolioFacturaCompra.setBackground(new java.awt.Color(255, 255, 204));
        txtFolioFacturaCompra.setToolTipText("Ingrese el numero de folio de la factura (no es requerido)");

        lblTotalFacturaCompra.setText("Total");

        txtTotalCompra.setEditable(false);
        txtTotalCompra.setBackground(new java.awt.Color(102, 102, 102));
        txtTotalCompra.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalCompra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalCompra.setToolTipText("Ingrese el valor total de la compra realizada");

        lblNitProveedor.setText("NIT");

        txtNitProveedor.setBackground(new java.awt.Color(255, 255, 204));
        txtNitProveedor.setToolTipText("Ingrese el NIT del proveedor de la factura.");
        txtNitProveedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitProveedorFocusLost(evt);
            }
        });

        txtNombreProveedor.setEditable(false);
        txtNombreProveedor.setBackground(new java.awt.Color(102, 102, 102));
        txtNombreProveedor.setForeground(new java.awt.Color(255, 255, 255));
        txtNombreProveedor.setToolTipText("Este campo lo refresca el sistema en base al NIT del proveedor");

        lblNumeroFactura.setText("No. Factura");

        lblNombreProveedor.setText("Nombre");

        txtNumeroFacturaCompra.setBackground(new java.awt.Color(255, 255, 204));
        txtNumeroFacturaCompra.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtNumeroFacturaCompra.setToolTipText("Ingrese el número de factura");

        lblTipoCompra.setText("Tipo");

        jcomboTipoCompra.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Contado", "Crédito", "Cheque", "Tarjeta", "Crédito/Contado", "Nota Crédito", "NotaCrédito/Contado" }));
        jcomboTipoCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboTipoCompraActionPerformed(evt);
            }
        });

        jLabel8.setText("Días");

        txt_dias_credito.setEnabled(false);

        ckbPrecioPonderado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nuevo Precio", "Promedio", "Porcentaje", "Precio Actual" }));

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblIdCompra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFecha)
                            .addComponent(lblNitProveedor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNitProveedor)
                            .addComponent(txtFechaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumeroFactura)
                    .addComponent(lblNombreProveedor)
                    .addComponent(lblTipoCompra))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(txtNumeroFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNumFacturaCompra)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lblSerieFacturaCompra)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSerieFacturaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(jcomboTipoCompra, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txt_dias_credito, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ckbPrecioPonderado, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalFacturaCompra)
                            .addComponent(lblFolioFacturaCompra))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFolioFacturaCompra)
                            .addComponent(txtTotalCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                    .addComponent(txtNombreProveedor))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdCompra)
                    .addComponent(txtIdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumFacturaCompra)
                    .addComponent(lblFolioFacturaCompra)
                    .addComponent(txtFolioFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumeroFactura)
                    .addComponent(lblSerieFacturaCompra)
                    .addComponent(txtSerieFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNitProveedor)
                    .addComponent(txtNitProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreProveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFecha)
                        .addComponent(lblTotalFacturaCompra)
                        .addComponent(txtTotalCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTipoCompra)
                        .addComponent(jcomboTipoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(txt_dias_credito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ckbPrecioPonderado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtFechaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonNuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonImpresoraLaser.png"))); // NOI18N
        btnReporte.setActionCommand("btnReporte");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonEliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSerie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCodigoDeBarraMini.png"))); // NOI18N
        btnSerie.setActionCommand("btnReporte");
        btnSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerieActionPerformed(evt);
            }
        });

        btnReconectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/bntBotonReconectar.png"))); // NOI18N
        btnReconectar.setToolTipText("");
        btnReconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReconectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReporte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSerie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReconectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReconectar)
                    .addComponent(btnSerie)
                    .addComponent(btnBuscar)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar)
                        .addComponent(btnNuevo)
                        .addComponent(btnReporte)
                        .addComponent(btnEliminar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion", "Cantidad", "P. Compra", "P. Minimo", "P. Estandar", "Total", "Comentario", "Arancel", "Guardado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleCompra.getTableHeader().setReorderingAllowed(false);
        tblDetalleCompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleCompraMouseClicked(evt);
            }
        });
        tblDetalleCompra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleCompraKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleCompra);
        if (tblDetalleCompra.getColumnModel().getColumnCount() > 0) {
            tblDetalleCompra.getColumnModel().getColumn(0).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblDetalleCompra.getColumnModel().getColumn(1).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(1).setPreferredWidth(30);
            tblDetalleCompra.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblDetalleCompra.getColumnModel().getColumn(3).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(3).setPreferredWidth(20);
            tblDetalleCompra.getColumnModel().getColumn(4).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(4).setPreferredWidth(30);
            tblDetalleCompra.getColumnModel().getColumn(5).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(5).setPreferredWidth(30);
            tblDetalleCompra.getColumnModel().getColumn(6).setResizable(false);
            tblDetalleCompra.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlTarjeta.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "TARJETA DE CREDITO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jLabel11.setText("Numero");

        jLabel12.setText("Banco");

        txt_banco_emisor_tarjeta.setEnabled(false);

        txt_numero_tarjeta.setEnabled(false);

        javax.swing.GroupLayout pnlTarjetaLayout = new javax.swing.GroupLayout(pnlTarjeta);
        pnlTarjeta.setLayout(pnlTarjetaLayout);
        pnlTarjetaLayout.setHorizontalGroup(
            pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTarjetaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_numero_tarjeta, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(txt_banco_emisor_tarjeta))
                .addContainerGap())
        );
        pnlTarjetaLayout.setVerticalGroup(
            pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTarjetaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_banco_emisor_tarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(10, 10, 10)
                .addGroup(pnlTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txt_numero_tarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlNotaCredito.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "NOTA DE CREDITO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jLabel2.setText("Serie");

        jLabel5.setText("Numero");

        txt_numeroNC.setEnabled(false);

        txt_serie_ncredito.setEnabled(false);

        javax.swing.GroupLayout pnlNotaCreditoLayout = new javax.swing.GroupLayout(pnlNotaCredito);
        pnlNotaCredito.setLayout(pnlNotaCreditoLayout);
        pnlNotaCreditoLayout.setHorizontalGroup(
            pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNotaCreditoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(pnlNotaCreditoLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(23, 23, 23)
                        .addGroup(pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_numeroNC, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_serie_ncredito, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlNotaCreditoLayout.setVerticalGroup(
            pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNotaCreditoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_serie_ncredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlNotaCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_numeroNC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPago.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "FORMA DE PAGO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        txt_cant_contado.setEnabled(false);

        jLabel3.setText("Contado");

        jLabel4.setText("Crédito");

        txt_cant_credito.setEnabled(false);

        javax.swing.GroupLayout pnlPagoLayout = new javax.swing.GroupLayout(pnlPago);
        pnlPago.setLayout(pnlPagoLayout);
        pnlPagoLayout.setHorizontalGroup(
            pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_cant_credito, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_cant_contado, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPagoLayout.setVerticalGroup(
            pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_cant_contado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_cant_credito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCheque.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "CHEQUE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jLabel10.setText("Banco");

        jLabel9.setText("Numero");

        txt_no_cheque.setEnabled(false);

        txt_banco_emisor_cheque.setEnabled(false);

        javax.swing.GroupLayout pnlChequeLayout = new javax.swing.GroupLayout(pnlCheque);
        pnlCheque.setLayout(pnlChequeLayout);
        pnlChequeLayout.setHorizontalGroup(
            pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChequeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_banco_emisor_cheque, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_no_cheque, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlChequeLayout.setVerticalGroup(
            pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChequeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txt_banco_emisor_cheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(txt_no_cheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlCheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlNotaCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlTarjeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlTarjeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlNotaCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCheque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    ObjetosCompra Compra = new ObjetosCompra();
    ObjetosDetalleCompra Detalle = new ObjetosDetalleCompra();
    AccesoProveedor NuevoProveedor = new AccesoProveedor();
    AccesoCompra NuevaCompra = new AccesoCompra();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoDetalleCompra NuevoDetalleCompra = new AccesoDetalleCompra();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoTipoPagoCompra ctrl_pagos = new AccesoTipoPagoCompra(this);
    
    Date fecha = new Date();
    String producto_actual;
    
    float total_compra = 0;
    float cantidad = 0;
    float precio = 0;
    int fila_seleccionada = 0;
    int columna_seleccionada = 0;

    private void limpiarEncabezadoCompra() {
        txtIdCompra.setText("");
        txtFechaCompra.setDate(null);
        txtNumeroFacturaCompra.setText("");
        txtSerieFacturaCompra.setText("");
        txtFolioFacturaCompra.setText("");
        txtTotalCompra.setText("");
        txtNitProveedor.setText("");
        txtNombreProveedor.setText("");
        ckbPrecioPonderado.setSelectedIndex(0);
    }

    private void limpiarDetalleCompra() {
        DefaultTableModel modelo_tabla = new DefaultTableModel();
        modelo_tabla.addColumn("No");
        modelo_tabla.addColumn("Codigo");
        modelo_tabla.addColumn("Descripcion");
        modelo_tabla.addColumn("Cantidad");
        modelo_tabla.addColumn("P. Compra");
        modelo_tabla.addColumn("P. Minimo");
        modelo_tabla.addColumn("P. Estandar");
        modelo_tabla.addColumn("Total");
        modelo_tabla.addColumn("Comentario");
        modelo_tabla.addColumn("Arancel");
        modelo_tabla.addColumn("Guardado");
        tblDetalleCompra.setModel(modelo_tabla);
        tblDetalleCompra.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblDetalleCompra.getColumnModel().getColumn(1).setPreferredWidth(50);
        tblDetalleCompra.getColumnModel().getColumn(2).setPreferredWidth(200);
        tblDetalleCompra.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblDetalleCompra.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblDetalleCompra.getColumnModel().getColumn(5).setPreferredWidth(100);
        cantidad = 0;
        producto_actual = null;
    }

    private boolean agregarProducto(String pId_producto, float pCantidad, int pId_proveedor, float precio_compra, float precio_miinimo, float precio_estandar) {
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        boolean actualizo_existencia = false;
        boolean actualizo_precio = false;

        try {
            
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            if (BuscarProducto.isEmpty()) {
                
                Mensaje.manipulacionExcepciones("critico", "No existe el Producto " + pId_producto + " en la Base de Datos.", "Agregar Producto");
            
            } else {
                
                if (BuscarProducto.size() > 1) {
                    
                    Mensaje.manipulacionExcepciones("critico", "Existe mas de un Producto con este ID " + pId_producto, "Agregar Producto");
                
                } else {

                    //Actualiza la cantiad de producto sin modificar el precio del mismo
                    String resultado_actualizar_producto = NuevoProducto.actualizarExistencia(pId_producto, BuscarProducto.get(0).getExi_producto() + pCantidad, 
                            Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

                    if (resultado_actualizar_producto.equals("Operacion realizada con exito.")) {
                        
                        System.out.println("Actualizo existencia TRUE");
                        System.out.println(resultado_actualizar_producto);
                        actualizo_existencia = true; 

                        //Si la cansilla de poderado esta seleccionada modifica el precio del producto
                        if (ckbPrecioPonderado.getSelectedIndex() == 1) {

                            double v_total_producto_antiguo = 0;
                            double v_total_producto_nuevo = 0;
                            double v_total_cantidad_producto = 0;
                            double v_precio_ponderado = 0;

                            //Calcula el nuevo precio segun cantidad existente
                            v_total_producto_antiguo = BuscarProducto.get(0).getExi_producto() * BuscarProducto.get(0).getPrecio_compra_producto();
                            v_total_producto_nuevo = matematicas.redondear(Detalle.getCant_d_compra() * Detalle.getPrecio_d_compra());
                            v_total_cantidad_producto = BuscarProducto.get(0).getExi_producto() + Detalle.getCant_d_compra();
                            v_precio_ponderado = (v_total_producto_antiguo + v_total_producto_nuevo) / v_total_cantidad_producto;

                            //Actualiza el nuevo precio del producto
                            String resultado_precio = NuevoProducto.actualizarPrecioCompra(pId_producto, v_precio_ponderado, pId_proveedor, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                            
                            if(resultado_precio.equals("Operacion realizada con exito.")) {
                                actualizo_precio = true;
                            } else {
                                actualizo_precio = false;
                                Mensaje.manipulacionExcepciones("critico", "Se actualizao la cantidad pero ocurrio un error al actualizar el precio del Producto " + pId_producto + ". Requiere actualización manual.", "Actulizar Precio");
                            }

                        } else {
                            
                            actualizo_precio = true;

                            if (ckbPrecioPonderado.getSelectedIndex() == 0) {
                                System.out.println("Guardando datos ingresados por usuario");
                                NuevoProducto.actualizarPrecioCompraConPrecioVenta(pId_producto, precio_compra, precio_miinimo, precio_estandar, pId_proveedor, 
                                        Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                            } else {
                                
                                if (ckbPrecioPonderado.getSelectedIndex() == 2) {
                                    NuevoProducto.actualizarPrecioCompra(pId_producto, Detalle.getPrecio_d_compra(), pId_proveedor, Inventory.lblUsuario.getText(),
                                            Inventory.lblTerminal.getText());
                                } else {
                                    agregarLog("Todos los valores del Producto " + pId_producto + " quedan como está.");
                                }
                                
                            }

                        }
                        
                    } else {
                        
                        System.out.println("Actualizo existencia FALSE");
                        actualizo_existencia = false;
                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error de conexion al actualizar existencia del producto " + pId_producto + ". ", "Actualizar Existencia");
                    
                    }

                }
            }
            
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Producto");
        }
        
        return actualizo_existencia;
        
    }

    private ObjetosProducto obtenerDatosProducto(String pId_producto) {

        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();

        try {
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Producto");
        }

        if (BuscarProducto.isEmpty()) {
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos.", "Obtener Datos Producto");
        } else {
            if (BuscarProducto.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo.", "Obtener Datos Producto");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_proveedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_min_producto(BuscarProducto.get(0).getPrecio_min_producto()); 
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
            }
        }

        return Producto;
    }

    private void obtenerDatosProveedor(String pNit_persona) {

        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existen datos de esta Persona en la Base de Datos.", "Obtener Datos Proveedor");
        } else {
            if (BuscarPersona.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Existe mas de una persona con este numero de NIT.", "Obtener Datos Proveedor");
            } else {
                txtNombreProveedor.setText(BuscarPersona.get(0).getNom_persona());
                try {
                    BuscarProveedor = NuevoProveedor.buscarProveedor(BuscarPersona.get(0).getId_persona(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                } catch (Exception error) {
                    Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Proveedor");
                }
            }
        }

        if (BuscarProveedor.isEmpty()) {
            
            Mensaje.manipulacionExcepciones("interrogante", "Desea crear este proveedor en la Base de Datos.", "Obtener Datos Proveedor");
            
            if (Mensaje.valor == 0) {
                wdwCatalogoProductos CatalogoProductos = new wdwCatalogoProductos();
                int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
                int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
                int x = (ancho / 2) - (CatalogoProductos.getWidth() / 2);
                int y = (alto / 4) - (CatalogoProductos.getHeight() / 4);
                wdwCatalogoProveedores catalogoProveedores = new wdwCatalogoProveedores();
                Inventory.pnlPrincipal.add(catalogoProveedores);
                catalogoProveedores.toFront();
                catalogoProveedores.setVisible(true);
            } else {
                txtNitProveedor.setText("C/F");
                txtNitProveedor.requestFocus();
            }

        } else {
            
            if (BuscarProveedor.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Se encontro mas de un Proveedor con este numero de NIT.", "Obtener Datos Proveedor");
            } else {
                txtTotalCompra.setText("0.00");
                ckbPrecioPonderado.requestFocus();
            }
            
        }

        BuscarPersona.removeAll(BuscarProveedor);
        BuscarProveedor.removeAll(BuscarProveedor);
    }

    private int obtenerIdProveedor(String pNit_proveedor) {

        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();
        int vId_proveedor = 0;

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_proveedor, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existe este Proveedor en la Base de Datos.", "Obtener ID Proveedor");
        } else {
            if (BuscarPersona.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Existen mas personas con este Numero de NIT.", "Obtener ID Proveedor");
            }
        }

        try {
            BuscarProveedor = NuevoProveedor.buscarProveedor(BuscarPersona.get(0).getId_persona(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", error.getMessage(), "Buscar Proveedor");
        }

        if (BuscarProveedor.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe crear este proveedor en la base de datos.", "Obtener ID Proveedor");
        } else {
            if (BuscarProveedor.size() > 1) {
                Mensaje.manipulacionExcepciones("critical", "Este numero de Nit esta repetido.", "Obtener ID Proveedor");
            } else {
                vId_proveedor = BuscarProveedor.get(0).getId_proveedor();
            }
        }

        return vId_proveedor;
    }

    private boolean verificarDatosCompra(ObjetosCompra pCompra) {
        boolean vDatos_correctos = false;

        if ("".equals(txtIdCompra.getText())) {
            vDatos_correctos = true;
        }

        if ("".equals(txtNitProveedor.getText())) {
            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de NIT.", "Verificar Datos Compra");
        } else {
            if ("".equals(pCompra.getFecha_factura_compra())) {
                Mensaje.manipulacionExcepciones("critical", "Ingrese la fecha de esta factura.", "Verificar Datos Compra");
            } else {
                vDatos_correctos = true;
            }
        }

        return vDatos_correctos;
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        totalCompra();
        
        boolean error_grabar = false;
        
        if (txtIdCompra.getText().equals("")) {
            
            //Verificar los datos de la compra
            try {
                Compra.setNumero_factura_compra(txtNumeroFacturaCompra.getText());
                Compra.setSerie_factura_compra(txtSerieFacturaCompra.getText());
                Compra.setFolio_factura_compra(txtFolioFacturaCompra.getText());
                Compra.setId_proveedor(obtenerIdProveedor(txtNitProveedor.getText()));
                String fecha = ( txtFechaCompra.getDate().getYear() + 1900 ) + "-" + ( txtFechaCompra.getDate().getMonth() + 1 ) + "-" + txtFechaCompra.getDate().getDate();
                Compra.setFecha_factura_compra(fecha);
                Compra.setTotal_factura_compra(Float.parseFloat(txtTotalCompra.getText()));
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Boton Guardar");
            }

            //Guardar la compra
            if (verificarDatosCompra(Compra)) {
                if (Double.parseDouble(txtTotalCompra.getText()) > 0) {
                    NuevaCompra.insertarCompra(Compra, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                } else {
                    Mensaje.manipulacionExcepciones("critico", "No se puede guardar una factura con monto Cero. Por favor verifique.", "Total Cero");
                }
            } else {
                Mensaje.manipulacionExcepciones("critico", "Por favor verifique los datos de la compra.", "Boton Guardar");
            }

            
            //Buscar si se guardo la compra
            ArrayList<ObjetosCompra> BuscarCompra = new ArrayList();
            try {
                
                BuscarCompra = NuevaCompra.seleccionarIdCompra(Compra, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                
                if (BuscarCompra.isEmpty()) {
                    Mensaje.manipulacionExcepciones("critico", "No existe este numero de compra en la Base de Datos.", "Boton Guardar");
                } else {
                    if (BuscarCompra.size() > 1) {
                        Mensaje.manipulacionExcepciones("critico", "Existen mas Facturas de Compra con los mismos Datos.", "Boton Guardar");
                    } else {
                        txtIdCompra.setText(String.valueOf(BuscarCompra.get(0).getId_compra()));
                    }
                }

            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "No se puede almacenar los datos para la compra.", "Seleccionar ID Compra");
            }

            //Guardar detalle de la Compra
            if (txtIdCompra.getText().isEmpty() || txtIdCompra.getText().equals("")) {
                BuscarCompra = NuevaCompra.seleccionarIdCompra(Compra, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                int valorIdCompra = BuscarCompra.get(0).getId_compra();
                txtIdCompra.setText(String.valueOf(valorIdCompra)); 
            } 
                
            try {

                for (int cFilas = 0; cFilas < tblDetalleCompra.getRowCount(); cFilas++) {

                    if (tblDetalleCompra.getValueAt(cFilas, 0) != null) {

                        try {

                            Detalle.setId_d_compra((Integer) tblDetalleCompra.getValueAt(cFilas, 0));
                            Detalle.setId_compra(Integer.parseInt(txtIdCompra.getText()));
                            Detalle.setId_producto(tblDetalleCompra.getValueAt(cFilas, 1).toString());
                            Detalle.setCant_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 3).toString()));
                            Detalle.setPrecio_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 4).toString()));
                            Detalle.setPrecio_minimo(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 5).toString()));
                            Detalle.setPrecio_estandar(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 6).toString()));
                            Detalle.setSub_total_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 7).toString()));
                            Detalle.setComentario_compra(tblDetalleCompra.getValueAt(cFilas, 8).toString());
                            Detalle.setArancel_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 9).toString()));

                            String resultado_insercion = NuevoDetalleCompra.insertarDetalleCompra(Detalle, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                            
                            boolean termino_proceso = false;
                            
                            if (resultado_insercion.equals("Operacion realizada con exito.")) {
                                boolean agregoProductoNuevo = agregarProducto(Detalle.getId_producto(), Detalle.getCant_d_compra(), 
                                        Compra.getId_proveedor(), Detalle.getPrecio_d_compra(), Detalle.getPrecio_minimo(), Detalle.getPrecio_estandar());
                                agregarLog("Agregar Producto " + Detalle.getId_producto() + ": " + agregoProductoNuevo);
                                if(agregoProductoNuevo) {
                                    termino_proceso = true;
                                } else {
                                    termino_proceso = false;
                                }
                            } else {
                                termino_proceso = false;
                            }
                            
                            if(termino_proceso) {
                                tblDetalleCompra.setValueAt("SI", cFilas, 10);
                            } else {
                                tblDetalleCompra.setValueAt("NO", cFilas, 10);
                            }

                        } catch (Exception error) {

                            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Agregar producto");
                            error_grabar = true;

                        }

                    }

                }

                if (error_grabar == false) {
                    Mensaje.manipulacionExcepciones("informacion", "Registros guardados exitosamente para la Compra No. " + txtIdCompra.getText(), "Boton Guardar");
                }

            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Insertar Detalle Compra");
            }


        } else {
            Mensaje.manipulacionExcepciones("critico", "Esta facutra ya fue guardada con aterioridad.", "Boton Guardar");
        }

        //ID generado guardar forma de pago
        ctrl_pagos.registar_pago(this.txtIdCompra.getText(), String.valueOf(this.jcomboTipoCompra.getSelectedItem()),
                this.txt_dias_credito.getText(), this.txt_serie_ncredito.getText(), this.txt_numeroNC.getText(), this.txt_numero_tarjeta.getText(),
                this.txt_banco_emisor_tarjeta.getText(), this.txt_cant_contado.getText(), this.txt_cant_credito.getText(),
                this.txt_no_cheque.getText(), this.txt_banco_emisor_cheque.getText(), this.txtTotalCompra.getText());
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNitProveedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitProveedorFocusLost

        if (txtNitProveedor.getText().equals("c/f") || txtNitProveedor.getText().equals("C/F") || txtNitProveedor.getText().equals("")) {
            txtNitProveedor.setText("C/F");
            txtNombreProveedor.setText("Consumidor Final");
            txtTotalCompra.setText("0.00");
            ckbPrecioPonderado.requestFocus();
            totalCompra();
        } else {
            obtenerDatosProveedor(txtNitProveedor.getText());
        }
    }//GEN-LAST:event_txtNitProveedorFocusLost

    private void totalCompra() {

        total_compra = 0;

        for (int cFilas = 0; cFilas <= 30; cFilas++) {
            try {
                total_compra = total_compra + (float) tblDetalleCompra.getValueAt(cFilas, 3) * (float) tblDetalleCompra.getValueAt(cFilas, 4);
            } catch (Exception error) {
                total_compra = total_compra + 0;
            }
        }

        txtTotalCompra.setText(String.valueOf(Math.rint(total_compra * 100) / 100));
    }

    private void tblDetalleCompraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleCompraKeyPressed

        ObjetosProducto Producto = new ObjetosProducto();

        if (evt.getKeyCode() == 9) {

            fila_seleccionada = tblDetalleCompra.getSelectedRow();
            columna_seleccionada = tblDetalleCompra.getSelectedColumn();

            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                tblDetalleCompra.setValueAt((String) Producto.getDesc_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleCompra.setValueAt((float) Producto.getPrecio_compra_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleCompra.setValueAt((float) Producto.getPrecio_min_producto(), fila_seleccionada, columna_seleccionada + 3);
                tblDetalleCompra.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 4);
            }

            if (columna_seleccionada == 4) {

                if (tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la cantidad comprada", "Tabla Detalle");
                    tblDetalleCompra.setValueAt(1.00, fila_seleccionada, columna_seleccionada - 1);
                } else {
                    if ((float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                        Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la cantidad comprada.", "Tabla Detalle");
                        tblDetalleCompra.setValueAt(1.00, fila_seleccionada, columna_seleccionada - 1);
                    } else {
                        
                        Producto = obtenerDatosProducto(tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 3).toString());
                        cantidad = (float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1);

                        if (cantidad > Producto.getMaximo_producto()) {
                            Mensaje.manipulacionExcepciones("informacion", "Esta incluyendo una cantidad mayor a la sugerida del Producto " + Producto.getId_producto(), "Tabla Detalle");
                        } else {
                            if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                                Mensaje.manipulacionExcepciones("informacion", "La Existencia del Producto " + Producto.getId_producto() + " esta al Minimo", "Tabla Detalle");
                            }
                        }
                    }
                }
            }

            if (columna_seleccionada == 5) {
                precio = (float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                tblDetalleCompra.setValueAt(Math.rint(cantidad * precio * 100) / 100, fila_seleccionada, columna_seleccionada + 2);
                tblDetalleCompra.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                totalCompra();
            }

            if (columna_seleccionada == 8) {
                tblDetalleCompra.setValueAt("NA", fila_seleccionada, columna_seleccionada);
            }

            if (columna_seleccionada == 9) {
                tblDetalleCompra.setValueAt(0.00, fila_seleccionada, columna_seleccionada);
            }
            
            if (columna_seleccionada == 10) {
                tblDetalleCompra.setValueAt("NO", fila_seleccionada, columna_seleccionada);
                
            }

        }
        
    }//GEN-LAST:event_tblDetalleCompraKeyPressed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.dispose();
        wdwMovimientoCompraDeProductos CompraDeProductos = new wdwMovimientoCompraDeProductos();
        int ancho = Inventory.pnlPrincipal.getWidth();
        int alto = Inventory.pnlPrincipal.getHeight();
        int x  = (ancho / 2) - (CompraDeProductos.getWidth() / 2);
        int y  = (alto / 2) - (CompraDeProductos.getHeight() / 2);
        CompraDeProductos.setVisible(true);
        Inventory.pnlPrincipal.add(CompraDeProductos);
        CompraDeProductos.toFront();
        CompraDeProductos.setLocation(x, y);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        wdwCatalogoProductos BuscarProducto = new wdwCatalogoProductos();
        int ancho = Inventory.pnlPrincipal.getWidth();
        int alto = Inventory.pnlPrincipal.getHeight();
        int x  = (ancho / 2) - (BuscarProducto.getWidth() / 2);
        int y  = ((alto / 2) - (BuscarProducto.getHeight() / 2));
        BuscarProducto.setLocation(x, y);
        BuscarProducto.btnAgregar.setEnabled(true);
        Inventory.pnlPrincipal.add(BuscarProducto);
        BuscarProducto.setVisible(true);
        BuscarProducto.toFront();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblDetalleCompra.getModel();
        modelo.removeRow(tblDetalleCompra.getSelectedRow());
        tblDetalleCompra.setModel(modelo);
        totalCompra();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleCompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleCompraMouseClicked
        fila_seleccionada = tblDetalleCompra.getSelectedRow();
        columna_seleccionada = tblDetalleCompra.getSelectedColumn();
    }//GEN-LAST:event_tblDetalleCompraMouseClicked

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        
      try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptCompra.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //parametros del reporte
            parametro.put("P_ID_COMPRA", Integer.parseInt(txtIdCompra.getText()));
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal());
            parametro.put("P_NOMBRE_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_SUCURSAL", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());

            //parametros facturación FEL implementarlos solo si se desea
            //obtener facturacion electronica de la venta realizada
            parametro.put("P_SERIE_FEL", txtSerieFacturaCompra.getText());
            parametro.put("P_NUMERO_FEL", txtNumeroFacturaCompra.getText());
            parametro.put("P_AUTORIZACION_FEL", txtFolioFacturaCompra.getText());
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte de Compra");
        }  
        
    }//GEN-LAST:event_btnReporteActionPerformed

    private void btnSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerieActionPerformed
        
        if (txtIdCompra.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe guardar la compra para escanear los numeros de serie.", "Serie");
        } else {
            
            //Armar el listado de productos 
            ArrayList<ObjetosListaProducto> listado_productos = new ArrayList<>();
            int fila = 0;
            String id_producto_a_buscar = "";
        
            try {
                while (tblDetalleCompra.getValueAt(fila, 0).toString() != "") {
                    //Crear el producto y agregarlo a la lista
                    ObjetosProducto producto = new ObjetosProducto();
                    ObjetosListaProducto producto_del_listado = new ObjetosListaProducto();
                    id_producto_a_buscar = tblDetalleCompra.getValueAt(fila, 1).toString();
                    //consultar informacion producto
                    producto = NuevoProducto.buscarInformacionProducto(id_producto_a_buscar, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                    //crear el objeto para el listado de productos siempre y cuando dita SI en serie
                    if (producto.getSerie_producto().equals("SI")) {
                        producto_del_listado.setIdproducto(id_producto_a_buscar);
                        producto_del_listado.setDescripcionproducto(producto.getDesc_producto());
                        int cantidad_producto = (int) Double.parseDouble(tblDetalleCompra.getValueAt(fila, 3).toString());
                        producto_del_listado.setCantidad(cantidad_producto);
                        producto_del_listado.setSerie(producto.getSerie_producto());
                        producto_del_listado.setComponentes(producto.getComponente_producto());
                        producto_del_listado.setGarantia(producto.getGarantia_producto());
                        listado_productos.add(producto_del_listado);
                    }
                    fila++;
                }
            } catch (Exception Error) {
            }
            
            //Llamar pantalla para el ingreso de series      
            wdwCatalogoSerie Serie = new wdwCatalogoSerie(listado_productos, txtIdCompra.getText(), "0", "0", "Compra");
            int ancho = Inventory.pnlPrincipal.getWidth();
            int alto = Inventory.pnlPrincipal.getHeight();
            int x = (ancho / 2) - (Serie.getWidth() / 2);
            int y = (alto / 2) - (Serie.getHeight() / 2);
            Serie.setVisible(true);
            Inventory.pnlPrincipal.add(Serie);
            Serie.toFront();
            Serie.setLocation(x, y);
        }
    }//GEN-LAST:event_btnSerieActionPerformed

    private void jcomboTipoCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboTipoCompraActionPerformed

        switch (String.valueOf(jcomboTipoCompra.getSelectedItem())) {
            case "Crédito":
                Mensaje.manipulacionExcepciones("informacion", "Coloca la cantidad de días credito.", "Dias de Credito");
                txt_dias_credito.setText("0");
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casillaNotaCredito();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();
                ctrl_pagos.habilitar_soloCredito();
                break;
            case "Cheque":
                ctrl_pagos.habilitar_casillaCheque();
                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casillaNotaCredito();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();
                break;
            case "Tarjeta":
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.habilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casillaNotaCredito();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();
                break;
            case "Crédito/Contado":
                Mensaje.manipulacionExcepciones("informacion", "Coloca la cantidad de días credito.", "Dias de Credito");
                txt_dias_credito.setText("0");
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casillaNotaCredito();
                ctrl_pagos.habilitar_soloCredito();
                ctrl_pagos.habilitar_casilla_creditoContado();
                break;
            case "Nota Crédito":
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();
                ctrl_pagos.habilitar_casillaNotaCredito();
                break;
            case "NotaCrédito/Contado":
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();

                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.habilitar_casillaNotaCredito();
                ctrl_pagos.habilitar_contado();

                break;
            case "Contado":
                ctrl_pagos.deshabilitar_casillaCheque();
                ctrl_pagos.deshabilitar_soloCredito();
                ctrl_pagos.deshabilitar_contado();
                ctrl_pagos.deshabilitar_casillaTarjeta();
                ctrl_pagos.deshabilitar_casilla_pagoMixto();
                ctrl_pagos.deshabilitar_casillaNotaCredito();

                break;
            default:
                break;
        }

    }//GEN-LAST:event_jcomboTipoCompraActionPerformed

    private void btnReconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReconectarActionPerformed
        
        //Guardar detalle de la Compra
        try {
            for (int cFilas = 0; cFilas < tblDetalleCompra.getRowCount(); cFilas++) {
                if (tblDetalleCompra.getValueAt(cFilas, 0) != null) {
                    try {
                        ObjetosDetalleCompra objeto_antiguo = new ObjetosDetalleCompra();
                        try { objeto_antiguo.setId_d_compra((Integer) tblDetalleCompra.getValueAt(cFilas, 0)); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "ID Detalle"); }
                        //try { objeto_antiguo.setId_compra(Integer.parseInt(txtIdCompra.getText())); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "ID Compra"); }
                        try { objeto_antiguo.setId_producto(tblDetalleCompra.getValueAt(cFilas, 1).toString()); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "ID Producto"); }
                        try { objeto_antiguo.setDescipcion(tblDetalleCompra.getValueAt(cFilas, 2).toString()); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Descripcion"); }
                        try { objeto_antiguo.setCant_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 3).toString())); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Cantidad"); }
                        try { objeto_antiguo.setPrecio_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 4).toString())); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Precio Compra"); }
                        try { objeto_antiguo.setPrecio_minimo(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 5).toString()));  } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Precio Minimo"); }
                        try { objeto_antiguo.setPrecio_estandar(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 6).toString()));  } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Precio Estandar"); }
                        try { objeto_antiguo.setSub_total_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 7).toString())); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Subtotal"); }
                        try { objeto_antiguo.setComentario_compra(tblDetalleCompra.getValueAt(cFilas, 8).toString()); } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Comentario"); }
                        try { objeto_antiguo.setArancel_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 9).toString()));  } catch (Exception e) { Mensaje.manipulacionExcepciones("critico", e.toString(), "Arancel"); }
                        detalle_productos.add(objeto_antiguo);
                    } catch (Exception error) {
                        Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Agregar producto");
                    }
                }
            }
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Recorrer Lista");
        }  

        wdwMovimientoCompraDeProductos VentanaDeCompras = new wdwMovimientoCompraDeProductos();
        int ancho = Inventory.pnlPrincipal.getWidth();
        int alto = Inventory.pnlPrincipal.getHeight();
        int x = (ancho / 2) - (VentanaDeCompras.getWidth() / 2);
        int y = (alto / 2) - (VentanaDeCompras.getHeight() / 2);
        Inventory.pnlPrincipal.add(VentanaDeCompras);
        VentanaDeCompras.setVisible(true);
        VentanaDeCompras.toFront();
        VentanaDeCompras.setLocation(x, y);
        
        //Mensaje.manipulacionExcepciones("informacion", "Cantidad de productos: " + this.detalle_productos.size(), "Total Productos");
        for (int m = 0; m < this.detalle_productos.size(); m++) {
            VentanaDeCompras.tblDetalleCompra.setValueAt(String.valueOf(this.detalle_productos.get(m).getId_d_compra()), m, 0);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getId_producto(), m, 1);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getDescipcion(), m, 2);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getCant_d_compra(), m, 3);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getPrecio_d_compra(), m, 4);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getPrecio_minimo(), m, 5);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getPrecio_estandar(), m, 6);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getSub_total_d_compra(), m, 7);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getComentario_compra(), m, 8);
            VentanaDeCompras.tblDetalleCompra.setValueAt(this.detalle_productos.get(m).getArancel_compra(), m, 9);
            VentanaDeCompras.tblDetalleCompra.setValueAt("NO", m, 10);
        }
        
        //Trasladar toda la informacion del ecabezado a la pantalla nueva
        VentanaDeCompras.txtNumeroFacturaCompra.setText(this.txtNumeroFacturaCompra.getText());
        VentanaDeCompras.txtSerieFacturaCompra.setText(this.txtSerieFacturaCompra.getText());
        VentanaDeCompras.txtFolioFacturaCompra.setText(this.txtFolioFacturaCompra.getText());
        VentanaDeCompras.txtNitProveedor.setText(this.txtNitProveedor.getText());
        VentanaDeCompras.jcomboTipoCompra.setSelectedIndex(this.jcomboTipoCompra.getSelectedIndex());
        VentanaDeCompras.txtNombreProveedor.setText(this.txtNombreProveedor.getText());
        VentanaDeCompras.txtFechaCompra.setDate(this.txtFechaCompra.getDate());
        VentanaDeCompras.txt_dias_credito.setText(this.txt_dias_credito.getText());
        VentanaDeCompras.ckbPrecioPonderado.setSelectedIndex(this.ckbPrecioPonderado.getSelectedIndex());
        VentanaDeCompras.txtTotalCompra.setText(this.txtTotalCompra.getText());

        VentanaDeCompras.txt_cant_contado.setText(this.txt_cant_contado.getText());
        VentanaDeCompras.txt_cant_credito.setText(this.txt_cant_credito.getText());
        VentanaDeCompras.txt_banco_emisor_cheque.setText(this.txt_banco_emisor_cheque.getText());
        VentanaDeCompras.txt_no_cheque.setText(this.txt_no_cheque.getText());
        VentanaDeCompras.txt_serie_ncredito.setText(this.txt_serie_ncredito.getText());
        VentanaDeCompras.txt_numeroNC.setText(this.txt_numeroNC.getText());
        VentanaDeCompras.txt_banco_emisor_tarjeta.setText(this.txt_banco_emisor_tarjeta.getText());
        VentanaDeCompras.txt_numero_tarjeta.setText(this.txt_numero_tarjeta.getText());
        
        this.dispose();

    }//GEN-LAST:event_btnReconectarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReconectar;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSerie;
    private javax.swing.JComboBox ckbPrecioPonderado;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcomboTipoCompra;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFolioFacturaCompra;
    private javax.swing.JLabel lblIdCompra;
    private javax.swing.JLabel lblNitProveedor;
    private javax.swing.JLabel lblNombreProveedor;
    private javax.swing.JLabel lblNumFacturaCompra;
    private javax.swing.JLabel lblNumeroFactura;
    private javax.swing.JLabel lblSerieFacturaCompra;
    private javax.swing.JLabel lblTipoCompra;
    private javax.swing.JLabel lblTotalFacturaCompra;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlCheque;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JPanel pnlNotaCredito;
    private javax.swing.JPanel pnlPago;
    private javax.swing.JPanel pnlTarjeta;
    public static javax.swing.JTable tblDetalleCompra;
    private com.toedter.calendar.JDateChooser txtFechaCompra;
    private javax.swing.JTextField txtFolioFacturaCompra;
    public javax.swing.JTextField txtIdCompra;
    private javax.swing.JTextField txtNitProveedor;
    private javax.swing.JTextField txtNombreProveedor;
    private javax.swing.JFormattedTextField txtNumeroFacturaCompra;
    private javax.swing.JTextField txtSerieFacturaCompra;
    private javax.swing.JTextField txtTotalCompra;
    public javax.swing.JTextField txt_banco_emisor_cheque;
    public javax.swing.JTextField txt_banco_emisor_tarjeta;
    public javax.swing.JTextField txt_cant_contado;
    public javax.swing.JTextField txt_cant_credito;
    public javax.swing.JTextField txt_dias_credito;
    public javax.swing.JTextField txt_no_cheque;
    public javax.swing.JTextField txt_numeroNC;
    public javax.swing.JTextField txt_numero_tarjeta;
    public javax.swing.JTextField txt_serie_ncredito;
    // End of variables declaration//GEN-END:variables
}