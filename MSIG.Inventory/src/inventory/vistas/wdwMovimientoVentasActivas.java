package inventory.vistas;

import inventory.acceso.*;
import inventory.guatefacturas.GenerarDocumentoFEL;
import inventory.guatefacturas.GenerarDocumentoSinDecimalesFEL;
import inventory.guatefacturas.Resultado;
import inventory.objetos.ObjetosFactura;
import inventory.objetos.ObjetosFacturaFel;
import inventory.objetos.ObjetosSucursal;
import java.awt.Color;
import java.awt.Dimension;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;

public class wdwMovimientoVentasActivas extends javax.swing.JInternalFrame {

    private String Log = "";
    private String tamanio_preferido = null;
    private String cantidad_decimales = null;
    
    /**
     * Creates new form wdwBaseDeDAtosHistorialDeVentas
     */
    public wdwMovimientoVentasActivas() {
        initComponents();
        
        hilo p = new hilo("ordenes");
        p.start();
        
        // Bloquear el cambio de datos de FEL
        if (Inventory.lblRol.getText().equals("Administrador") || Inventory.lblRol.getText().equals("Administrador")) {
            this.btnHabilitarEdicionFEL.setEnabled(true);
            this.btnGuardarDatosFEL.setEnabled(true);
        } else {
            this.btnHabilitarEdicionFEL.setEnabled(false);
            this.btnGuardarDatosFEL.setEnabled(false);
        }
        
        agregarLog("Verificando la cantidad de decimales.");
        //obtengo el metodo de ingreso utilizado manual o codigo de barras
        try {
            cantidad_decimales = archivo.leer("[Decimales]");
        } catch (IOException error) {
            cantidad_decimales = "0";
            agregarLog("Error al obtener el metodo de entrada: " + error.toString());
        }
        
        //Bloquear el boton para generar FEL
        boolean habilita_fel = false;

        try {
            if (archivo.leer("[FEL]").equals("TRUE")) {
                habilita_fel = true;
            } else {
                habilita_fel = false;
            }
        } catch (IOException Error) {
            agregarLog("No encontro etiqueta FEL en archivo de configuraciones.");
        }
        
        
        agregarLog("Verificando el tamaño preferido de impresion.");
        try {
            tamanio_preferido = archivo.leer("[TamanioPreferido]");
            agregarLog(tamanio_preferido);
            cbxTamanoImpresion.setSelectedItem(tamanio_preferido);
        } catch (IOException error) {
            tamanio_preferido = "Carta";
            agregarLog("Error al obtener el tamaño preferido de impresión: " + error.toString());
        } finally {
            cbxTamanoImpresion.setSelectedItem(tamanio_preferido);
        }
        
        btnGeneraFactura.setEnabled(habilita_fel);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    AccesoFactura factura = new AccesoFactura();
    AccesoExcepciones mensaje = new AccesoExcepciones();
    AccesoArchivo archivo = new AccesoArchivo();

    private void mostrarVentasActivas() {

        DefaultTableModel tabla = new DefaultTableModel();
        ArrayList<ObjetosFactura> lista = new ArrayList();

        lista = factura.seleccionarFactura(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

        //if (!lista.isEmpty()) {
            
            tabla.addColumn("ID Factura");
            tabla.addColumn("Tipo");
            tabla.addColumn("Numero");
            tabla.addColumn("Serie");
            tabla.addColumn("Folio");
            tabla.addColumn("Cliente");
            tabla.addColumn("Fecha");
            tabla.addColumn("Credito");
            tabla.addColumn("Contado");
            tabla.addColumn("Total");
            tabla.addColumn("Empleado");
            
            tabla.setRowCount(lista.size());
            
            int cFactura = 0;

            for (ObjetosFactura xFactura : lista) {
                tabla.setValueAt(xFactura.getId_factura(), cFactura, 0);
                tabla.setValueAt(xFactura.getTipo_venta(), cFactura, 1);
                tabla.setValueAt(xFactura.getNumero_factura(), cFactura, 2);
                tabla.setValueAt(xFactura.getSerie_factura(), cFactura, 3);
                tabla.setValueAt(xFactura.getFolio_factura(), cFactura, 4);
                tabla.setValueAt(xFactura.getNombre_factura(), cFactura, 5);
                tabla.setValueAt(xFactura.getFecha_emision_factura(), cFactura, 6);
                tabla.setValueAt(xFactura.getMonto_credito(), cFactura, 7);
                tabla.setValueAt(xFactura.getMonto_contado(), cFactura, 8);
                tabla.setValueAt(xFactura.getTotal_factura(), cFactura, 9);
                tabla.setValueAt(xFactura.getNombre_empleado(), cFactura, 10);
                cFactura++;
            }

            tblDetalleVenta.setModel(tabla);
        //}
            
            contarTodo();
        
    }
    
    private void contarTodo() {
        
        double efectivo = 0.0;
        double credito = 0.0;
        
        //Recorrer tabla
        try {
            for(int c = 0; c < tblDetalleVenta.getRowCount(); c++) {
                efectivo = efectivo + Double.parseDouble(tblDetalleVenta.getValueAt(c, 8).toString());
                credito = credito + Double.parseDouble(tblDetalleVenta.getValueAt(c, 7).toString());
            }
        } catch(Exception Error) {
            
        }
        
        txtTotalEfectivo.setText(String.valueOf(efectivo));
        txtTotalCredito.setText(String.valueOf(credito));
    }
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "VENTAS ACTIVAS" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }

    private class hilo implements Runnable {

        private Thread hilo;
        private String nombre;

        public hilo(String nombre) {
            this.nombre = nombre;
            hilo = new Thread(this, "Hilo");
        }

        public void start() {
            hilo.start();
        }

        @Override
        public void run() {
            try {
                while (true) {
                    if (nombre.equals("ordenes")) {
                        mostrarVentasActivas();
                        Thread.sleep(5000);
                    }
                }
            } catch (InterruptedException e) {
                System.out.println("Error en ejecucion hilo principal.");
            }
        }
    }

    public void restablecerTabla() {
        try {
            tblDetalleVenta.removeAll();
        } catch(Exception error) {
            mensaje.manipulacionExcepciones("advertencia", "Ocurrio un error al limpiar la tabla.", "Restablecer Tabla");
        }
    }
    
    private void generaFacturaElectronicaFEL() {
        
        Resultado resultado = new Resultado();
        
        if (Integer.parseInt(txtIdFactura.getText()) > 0 && txtAutorizacionFEL.getText().equals("0")
                && txtSerieFacturaFEL.getText().equals("0") && txtNumFacturaFEL.getText().endsWith("0")) {
            
            agregarLog("Intentando generar Factura Electronica");
            
            int id = Integer.parseInt(txtIdFactura.getText());
            
            agregarLog("ID Venta: " + id);
            
            GenerarDocumentoFEL felConDecimales = new GenerarDocumentoFEL();
            GenerarDocumentoSinDecimalesFEL felSinDecimales = new GenerarDocumentoSinDecimalesFEL();
            
            int decimales = Integer.parseInt(cantidad_decimales);
            if(decimales > 0) {
                agregarLog("Se utilizará el metodo con decimales");
                resultado = felConDecimales.generarFacturaElectronica(txtTipoConexionFEL.getSelectedItem().toString(), id, txtNombreVenta.getText(), 
                    "", "Venta de Productos", "FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), txtTipoDocumentoFEL.getText());
            } else {
                agregarLog("Se utilizará el metodo sin decimales");
                resultado = felSinDecimales.generarFacturaElectronica(txtTipoConexionFEL.getSelectedItem().toString(), id, txtNombreVenta.getText(), 
                    "", "Venta de Productos", "FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), txtTipoDocumentoFEL.getText());
            }
            
            String autorizacion_guatefactruas_fel = "";
            
            agregarLog("AUTORIZACION: |" + resultado.getAutorizacion() +"|");
            
            if (resultado.getAutorizacion().equals("0")) {
                
                agregarLog("GeneraDOcumento: " + resultado.getResultado());
                String respuesta_fel = resultado.getResultado().replaceAll("<Resultado>", "").replaceAll("</Resultado>", "").replaceAll("-", " ").replaceAll("&", "");
                mensaje.manipulacionExcepciones("critico", respuesta_fel, "Error Generacion FEL");
                
            } else {
                
                agregarLog("ALmacenando informacion en Base de Datos FEL");
                
                autorizacion_guatefactruas_fel = resultado.getAutorizacion();

                //almacenar datos de FEL en la base de datos
                AccesoFacturaFEL FEL = new AccesoFacturaFEL();
                ObjetosFacturaFel FAC = new ObjetosFacturaFel();
                FAC.setId_factura(Integer.parseInt(txtIdFactura.getText()));
                FAC.setSerie_factura_fel(resultado.getSerie());
                FAC.setNumero_factura_fel(resultado.getPreimpreso());
                FAC.setAutorizacion_factura_fel(resultado.getAutorizacion());
                
                String resultado_actualizacion_fel = FEL.actualizarDatosFEL(FAC, "Venta de Productos", "Generar FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

                agregarLog("Resultado: " + resultado_actualizacion_fel);
                
                if (resultado_actualizacion_fel.equals("Operacion realizada con exito.")) {
                    txtAutorizacionFEL.setText(resultado.getAutorizacion());
                    txtSerieFacturaFEL.setText(resultado.getSerie());
                    txtNumFacturaFEL.setText(resultado.getPreimpreso());
                    mensaje.manipulacionExcepciones("informacion", "Numero de autorización:\n" + autorizacion_guatefactruas_fel, "FEL");
                } else {
                    mensaje.manipulacionExcepciones("informacion", "No se pudeo actualizar los valores de FEL en la Base de Datos", "FEL");
                }
                
            }
        
        } else {
            
            mensaje.manipulacionExcepciones("informacion", "No se puede generar Facutara a esta Venta", "FEL");
        
        }
        
    }
    
    public void buscarDatosDeFel() {
        
        //Buscar los datos de FEL
        String id = txtIdFactura.getText();

        if (!id.isEmpty()) {

            AccesoFacturaFEL FEL = new AccesoFacturaFEL();
            ObjetosFacturaFel FAC = new ObjetosFacturaFel();
            FAC = FEL.buscarFacturaFEL(id, "Ventas Activas", Inventory.lblUsuario.getText(), "");
            this.txtSerieFacturaFEL.setText(FAC.getSerie_factura_fel());
            this.txtNumFacturaFEL.setText(FAC.getNumero_factura_fel());
            this.txtAutorizacionFEL.setText(FAC.getAutorizacion_factura_fel());
            this.txtTipoDocumentoFEL.setText(FAC.getTipo_documento_factura_fel());

            if (FAC.getNumero_factura_fel().equals("0") || FAC.getNumero_factura_fel().isEmpty()) {
                this.btnGeneraFactura.setEnabled(true);
                this.cbxTipoImpresion.setSelectedItem("Comprobante");
            } else {
                this.btnGeneraFactura.setEnabled(false);
                this.cbxTipoImpresion.setSelectedItem("Factura Electronica");
            }

        } else {
            this.txtSerieFacturaFEL.setText("");
            this.txtNumFacturaFEL.setText("");
            this.txtAutorizacionFEL.setText("");
            this.cbxTipoImpresion.setSelectedItem("Comprobante");
        }
        
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleVenta = new javax.swing.JTable();
        pnlBotones = new javax.swing.JPanel();
        lblIdVenta = new javax.swing.JLabel();
        txtIdFactura = new javax.swing.JTextField();
        btnReporteLacer = new javax.swing.JButton();
        btnCobrarFactura = new javax.swing.JButton();
        txtTipoFactura = new javax.swing.JTextField();
        cbxTipoImpresion = new javax.swing.JComboBox();
        cbxTamanoImpresion = new javax.swing.JComboBox();
        txtSerie = new javax.swing.JTextField();
        txtNumero = new javax.swing.JTextField();
        txtRecibidoPor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTotalEfectivo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTotalCredito = new javax.swing.JTextField();
        btnCobrarTodo = new javax.swing.JButton();
        pnlFacturacionFEL = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSerieFacturaFEL = new javax.swing.JTextField();
        txtNumFacturaFEL = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtAutorizacionFEL = new javax.swing.JTextField();
        btnGeneraFactura = new javax.swing.JButton();
        btnHabilitarEdicionFEL = new javax.swing.JButton();
        btnGuardarDatosFEL = new javax.swing.JButton();
        txtTipoConexionFEL = new javax.swing.JComboBox<>();
        txtNombreVenta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTipoDocumentoFEL = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ventas Activas");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgPantallaVentasActivas.png"))); // NOI18N

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Factura", "Tipo", "Numero", "Serie", "Folio", "Cliente", "Fecha", "Credito", "Contado", "Total", "Empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleVentaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleVenta);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdVenta.setText("ID Factura");

        txtIdFactura.setEditable(false);
        txtIdFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtIdFactura.setForeground(new java.awt.Color(255, 255, 255));

        btnReporteLacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonImpresoraLaser.png"))); // NOI18N
        btnReporteLacer.setToolTipText("");
        btnReporteLacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteLacerActionPerformed(evt);
            }
        });

        btnCobrarFactura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCobrar.png"))); // NOI18N
        btnCobrarFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrarFacturaActionPerformed(evt);
            }
        });

        txtTipoFactura.setEditable(false);
        txtTipoFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtTipoFactura.setForeground(new java.awt.Color(255, 255, 255));

        cbxTipoImpresion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Comprobante", "Factura Electronica", "Vale de Mercaderia" }));

        cbxTamanoImpresion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Carta", "1/2 Carta", "TMU 2.5" }));

        txtSerie.setBackground(new java.awt.Color(255, 255, 204));

        txtNumero.setBackground(new java.awt.Color(255, 255, 204));

        jLabel4.setText("Recibido");

        jLabel5.setText("Efectivo");

        txtTotalEfectivo.setEditable(false);
        txtTotalEfectivo.setBackground(new java.awt.Color(51, 153, 0));
        txtTotalEfectivo.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalEfectivo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalEfectivo.setText("0.0");

        jLabel6.setText("Credito");

        txtTotalCredito.setEditable(false);
        txtTotalCredito.setBackground(new java.awt.Color(255, 0, 0));
        txtTotalCredito.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalCredito.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalCredito.setText("0.0");

        btnCobrarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgCobrarTodo.png"))); // NOI18N
        btnCobrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdVenta)
                    .addComponent(jLabel4))
                .addGap(13, 13, 13)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(txtIdFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumero, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTipoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtRecibidoPor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalEfectivo))
                    .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReporteLacer))
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalCredito)))
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnCobrarFactura))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCobrarTodo)))
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCobrarFactura)
                    .addComponent(btnReporteLacer)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtIdFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIdVenta)
                        .addComponent(txtTipoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRecibidoPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(txtTotalEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtTotalCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCobrarTodo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlFacturacionFEL.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Serie FEL");

        txtSerieFacturaFEL.setEditable(false);
        txtSerieFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtSerieFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));

        txtNumFacturaFEL.setEditable(false);
        txtNumFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtNumFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Numero FEL");

        jLabel3.setText("Autorización");

        txtAutorizacionFEL.setEditable(false);
        txtAutorizacionFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtAutorizacionFEL.setForeground(new java.awt.Color(255, 255, 255));

        btnGeneraFactura.setText("FEL");
        btnGeneraFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneraFacturaActionPerformed(evt);
            }
        });

        btnHabilitarEdicionFEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/btnEditarCampo.png"))); // NOI18N
        btnHabilitarEdicionFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHabilitarEdicionFELActionPerformed(evt);
            }
        });

        btnGuardarDatosFEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardarDatosFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDatosFELActionPerformed(evt);
            }
        });

        txtTipoConexionFEL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GFN", "GFC" }));

        txtNombreVenta.setEditable(false);
        txtNombreVenta.setBackground(new java.awt.Color(102, 102, 102));
        txtNombreVenta.setForeground(new java.awt.Color(255, 255, 255));

        jLabel7.setText("Cliente");

        txtTipoDocumentoFEL.setEditable(false);
        txtTipoDocumentoFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtTipoDocumentoFEL.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlFacturacionFELLayout = new javax.swing.GroupLayout(pnlFacturacionFEL);
        pnlFacturacionFEL.setLayout(pnlFacturacionFELLayout);
        pnlFacturacionFELLayout.setHorizontalGroup(
            pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFacturacionFELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFacturacionFELLayout.createSequentialGroup()
                        .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAutorizacionFEL, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                    .addComponent(txtNombreVenta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnHabilitarEdicionFEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTipoDocumentoFEL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardarDatosFEL)
                .addGap(29, 29, 29)
                .addComponent(txtTipoConexionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGeneraFactura)
                .addContainerGap())
        );
        pnlFacturacionFELLayout.setVerticalGroup(
            pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFacturacionFELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHabilitarEdicionFEL)
                    .addComponent(btnGuardarDatosFEL)
                    .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(txtAutorizacionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGeneraFactura)
                        .addComponent(txtTipoConexionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFacturacionFELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtTipoDocumentoFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFacturacionFEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFacturacionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDetalleVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleVentaMouseClicked
        
        if (String.valueOf(tblDetalleVenta.getSelectedColumn()).equals("0")) {
            
            int fila_seleccionada = tblDetalleVenta.getSelectedRow();
            txtIdFactura.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 0).toString());
            txtTipoFactura.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 1).toString());
            txtSerie.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 3).toString());
            txtNumero.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 2).toString());
            txtNombreVenta.setText(tblDetalleVenta.getValueAt(fila_seleccionada, 5).toString());
            
            //Buscar los datos de FEL
            String id = txtIdFactura.getText();
            
            if (!id.isEmpty()) {
                
                AccesoFacturaFEL FEL = new AccesoFacturaFEL();
                ObjetosFacturaFel FAC = new ObjetosFacturaFel();
                FAC = FEL.buscarFacturaFEL(id, "Ventas Activas", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                this.txtSerieFacturaFEL.setText(FAC.getSerie_factura_fel());
                this.txtNumFacturaFEL.setText(FAC.getNumero_factura_fel());
                this.txtAutorizacionFEL.setText(FAC.getAutorizacion_factura_fel());
                this.txtTipoDocumentoFEL.setText(FAC.getTipo_documento_factura_fel());
                
                if(FAC.getNumero_factura_fel().equals("0") || FAC.getNumero_factura_fel().isEmpty()) {
                    this.cbxTipoImpresion.setSelectedItem("Comprobante");
                } else {
                    this.cbxTipoImpresion.setSelectedItem("Factura Electronica");
                }
                
            } else {
                this.txtSerieFacturaFEL.setText("");
                this.txtNumFacturaFEL.setText("");
                this.txtAutorizacionFEL.setText("");
                this.cbxTipoImpresion.setSelectedItem("Comprobante");
            }
            
        }
    }//GEN-LAST:event_tblDetalleVentaMouseClicked

    private void btnReporteLacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteLacerActionPerformed

        //Verificar si pueden imprimir factura
        //de lo contrario seleccionar comprobante
        buscarDatosDeFel();
        if(txtAutorizacionFEL.getText().equals("0") && cbxTipoImpresion.getSelectedItem().equals("Factura Electronica")) {
            mensaje.manipulacionExcepciones("critico", "Esta venta no tiene factura electronica", "Imprimir Factura FEL");
            cbxTipoImpresion.setSelectedItem("Comprobante");
        }
        
        String archivo_jasper = "";
        String regimen_empresa = "";
      
        //El mensaje del regimen de la factura se toma del archivo de texto
        try {
            regimen_empresa = archivo.leer("[Regimen]");
        } catch (IOException ex) {
            regimen_empresa = "";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Comprobante")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptComprobanteCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptComprobanteMediaCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptComprobanteTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Factura Electronica")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptFacturaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptFacturaMediaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptFacturaTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Vale de Mercaderia")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptValeCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptValeMediaCartaNormal";
            if (cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptValeTMU";
        }
        
        //ejecución del repote seleccionado
        try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/" + archivo_jasper + ".jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //parametros del reporte
            parametro.put("P_SERIE_FACTURA", txtSerie.getText());
            parametro.put("P_NUMERO_FACTURA", txtNumero.getText());
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdFactura.getText()));
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal());
            parametro.put("P_NOMBRE_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_SUCURSAL", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());
            
            //parametros configuracion sistema
            parametro.put("P_REGIMEN_EMPRESA", regimen_empresa);
            
            //parametro para la impresión de vales
            parametro.put("P_RECIBIDO", txtRecibidoPor.getText());
            
            //parametros facturación FEL implementarlos solo si se desea
            //obtener facturacion electronica de la venta realizada
            parametro.put("P_SERIE_FEL", txtSerieFacturaFEL.getText());
            parametro.put("P_NUMERO_FEL", txtNumFacturaFEL.getText());
            parametro.put("P_AUTORIZACION_FEL", txtAutorizacionFEL.getText());
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
        } catch (JRException error) {
            mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte " + archivo_jasper.replaceAll("rpt", "").toUpperCase());
        }
    }//GEN-LAST:event_btnReporteLacerActionPerformed

    private void btnCobrarFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrarFacturaActionPerformed
        String usuario = Inventory.lblUsuario.getText();
        String tipo = txtTipoFactura.getText();
        factura.cobrarFactura(txtIdFactura.getText(), usuario, tipo, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        restablecerTabla();
        mostrarVentasActivas();
    }//GEN-LAST:event_btnCobrarFacturaActionPerformed

    private void btnGeneraFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneraFacturaActionPerformed

        if (!txtNumFacturaFEL.getText().equals("0")) {
            mensaje.manipulacionExcepciones("critico", "Este documento ya tiene Factura Electronica", "Genera FEL");
        } else {
            ObjetosFacturaFel det = new ObjetosFacturaFel();
            AccesoFacturaFEL fel = new AccesoFacturaFEL();
            try {
                det = fel.buscarFacturaFEL(txtIdFactura.getText().trim(), "Ventas Activas", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                if (det.getNumero_factura_fel().equals("0")) {
                    generaFacturaElectronicaFEL();
                } else {
                    this.txtSerieFacturaFEL.setText(det.getSerie_factura_fel());
                    this.txtNumFacturaFEL.setText(det.getNumero_factura_fel());
                    this.txtAutorizacionFEL.setText(det.getAutorizacion_factura_fel());
                }
            } catch (Exception error) {
                mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar datos de FEL.", "Buscar Datos FEL");
                agregarLog(error.toString());
            }
        }
        
    }//GEN-LAST:event_btnGeneraFacturaActionPerformed

    private void btnCobrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrarTodoActionPerformed
        if (JOptionPane.showConfirmDialog(rootPane, "¿Esta seguro de cobrar todo?", "Cobrar Todo", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            for (int c = 0; c < tblDetalleVenta.getRowCount(); c++) {
                String id_factura = tblDetalleVenta.getValueAt(c, 0).toString();
                String tipo = tblDetalleVenta.getValueAt(c, 1).toString();
                String serie = tblDetalleVenta.getValueAt(c, 3).toString();
                String numero = tblDetalleVenta.getValueAt(c, 2).toString();
                String usuario = Inventory.lblUsuario.getText();
                factura.cobrarFactura(id_factura, usuario, tipo, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            }
            restablecerTabla();
            mostrarVentasActivas();
            mensaje.manipulacionExcepciones("informacion", "Has cobrado todo. Ya no hay marcha atras.", "Todo Cobrado");
        }
    }//GEN-LAST:event_btnCobrarTodoActionPerformed

    private void btnHabilitarEdicionFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHabilitarEdicionFELActionPerformed
        if (this.txtNumFacturaFEL.getText().equals("0") || this.txtNumFacturaFEL.getText().isEmpty()) {
            this.txtSerieFacturaFEL.setEditable(true);
            this.txtNumFacturaFEL.setEditable(true);
            this.txtAutorizacionFEL.setEditable(true);
            this.txtSerieFacturaFEL.setForeground(Color.BLACK);
            this.txtNumFacturaFEL.setForeground(Color.BLACK);
            this.txtAutorizacionFEL.setForeground(Color.BLACK);
            this.txtSerieFacturaFEL.setBackground(Color.WHITE);
            this.txtNumFacturaFEL.setBackground(Color.WHITE);
            this.txtAutorizacionFEL.setBackground(Color.WHITE);
        } else {
            mensaje.manipulacionExcepciones("critico", "Esta factura ya tiene datos de FEL", "Buscar Datos FEL");
        }
    }//GEN-LAST:event_btnHabilitarEdicionFELActionPerformed

    private void btnGuardarDatosFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDatosFELActionPerformed
        
        ObjetosFacturaFel det = new ObjetosFacturaFel();
        AccesoFacturaFEL fel = new AccesoFacturaFEL();
        
        det.setId_factura(Integer.parseInt(txtIdFactura.getText().trim()));
        det.setSerie_factura_fel(txtSerieFacturaFEL.getText().trim().toUpperCase());
        det.setNumero_factura_fel(txtNumFacturaFEL.getText().trim().toUpperCase());
        det.setAutorizacion_factura_fel(txtAutorizacionFEL.getText().trim().toUpperCase());
        
        if(fel.actualizarDatosFEL(det, "Ventas Activas", "Guardar Datos FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()).equals("Operacion realizada con exito.")) {
            mensaje.manipulacionExcepciones("informacion", "Datos de FEL guardados con exito.", "Guardar Datos Manuales FEL");
        } else {
            mensaje.manipulacionExcepciones("critico", "No fué posible almacenar la información.", "Error Datos FEL");
            this.txtSerieFacturaFEL.setText("0");
            this.txtNumFacturaFEL.setText("0");
            this.txtAutorizacionFEL.setText("0");
        }
        
        this.txtSerieFacturaFEL.setEditable(false);
        this.txtNumFacturaFEL.setEditable(false);
        this.txtAutorizacionFEL.setEditable(false);
        this.txtSerieFacturaFEL.setForeground(new Color(255, 255, 255));
        this.txtNumFacturaFEL.setForeground(new Color(255, 255, 255));
        this.txtAutorizacionFEL.setForeground(new Color(255, 255, 255));
        this.txtSerieFacturaFEL.setBackground(new Color(102, 102, 102));
        this.txtNumFacturaFEL.setBackground(new Color(102, 102, 102));
        this.txtAutorizacionFEL.setBackground(new Color(102, 102, 102));
        
    }//GEN-LAST:event_btnGuardarDatosFELActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCobrarFactura;
    private javax.swing.JButton btnCobrarTodo;
    private javax.swing.JButton btnGeneraFactura;
    private javax.swing.JButton btnGuardarDatosFEL;
    private javax.swing.JButton btnHabilitarEdicionFEL;
    private javax.swing.JButton btnReporteLacer;
    private javax.swing.JComboBox cbxTamanoImpresion;
    private javax.swing.JComboBox cbxTipoImpresion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIdVenta;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlFacturacionFEL;
    private javax.swing.JTable tblDetalleVenta;
    private javax.swing.JTextField txtAutorizacionFEL;
    private javax.swing.JTextField txtIdFactura;
    private javax.swing.JTextField txtNombreVenta;
    private javax.swing.JTextField txtNumFacturaFEL;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtRecibidoPor;
    private javax.swing.JTextField txtSerie;
    private javax.swing.JTextField txtSerieFacturaFEL;
    private javax.swing.JComboBox<String> txtTipoConexionFEL;
    private javax.swing.JTextField txtTipoDocumentoFEL;
    private javax.swing.JTextField txtTipoFactura;
    private javax.swing.JTextField txtTotalCredito;
    private javax.swing.JTextField txtTotalEfectivo;
    // End of variables declaration//GEN-END:variables
}
