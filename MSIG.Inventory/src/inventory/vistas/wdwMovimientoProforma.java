package inventory.vistas;

import inventory.acceso.*;
import inventory.librerias.NormalCell;
import inventory.librerias.WindowController;
import inventory.objetos.*;
import inventory.servicios.Matematicas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;

public class wdwMovimientoProforma extends javax.swing.JInternalFrame {

    private String Log = "";
    Matematicas matematica = new Matematicas();
    private WindowController ventana = new WindowController();
    
    /**
     * Creates new form wdwMovimientoVentaDeProductos
     */
    public wdwMovimientoProforma() {
        
        initComponents();
        cargaEmpleados();
        mostrarRegistrosGuardados();
        
        fila_seleccionada = 0;
        tblProducto.setDefaultRenderer(Object.class, new NormalCell());

        //tratar de asignar automaticamente el empleado a la venta
        try {
            cbxEmpleado.setSelectedItem(Inventory.lblNombre.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", error.getMessage(), "Seleccionar Empleado");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        txtProforma = new javax.swing.JTextField();
        lblProformaNo = new javax.swing.JLabel();
        lblNitPersona = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        txtNombrePersona = new javax.swing.JTextField();
        lblTelCliente = new javax.swing.JLabel();
        txtTelCliente = new javax.swing.JTextField();
        lblDirCliente = new javax.swing.JLabel();
        txtDirCliente = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        txtFechaEmisionProforma = new javax.swing.JTextField();
        lblTotalFactura = new javax.swing.JLabel();
        txtTotalProforma = new javax.swing.JTextField();
        lblEmpleado = new javax.swing.JLabel();
        cbxEmpleado = new javax.swing.JComboBox();
        txtIdEmpleado = new javax.swing.JTextField();
        cbxTipoDeCliente = new javax.swing.JComboBox();
        lblTotalFactura1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtIDCliente = new javax.swing.JTextField();
        txtCategoriaCliente = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        cbxTamanio = new javax.swing.JComboBox();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleProforma = new javax.swing.JTable();
        pnlBotonesOpcionales = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();
        txtBuscar = new javax.swing.JTextField();
        txtDescripcionProducto = new javax.swing.JTextField();
        btnBuscar1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtPrecioNormal = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCantidadVenta = new javax.swing.JFormattedTextField();
        txtPrecioMinimo = new javax.swing.JFormattedTextField();
        txtPrecioDescuento = new javax.swing.JFormattedTextField();
        txtCantidadMinima = new javax.swing.JTextField();
        txtFilaActual = new javax.swing.JFormattedTextField();
        cbxDescuento = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        btnMostrarImagen = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtPrecioVenta = new javax.swing.JTextField();
        txtPrecioEspecial = new javax.swing.JTextField();
        pnlDetalleProducto = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducto = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Crear Proforma");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgMovimientoProforma.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(900, 620));
        setMinimumSize(new java.awt.Dimension(900, 620));
        setPreferredSize(new java.awt.Dimension(900, 620));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtProforma.setBackground(new java.awt.Color(102, 102, 102));
        txtProforma.setEditable(false);
        txtProforma.setForeground(new java.awt.Color(255, 255, 255));
        txtProforma.setToolTipText("El numero de proforma se generara automaticamente");

        lblProformaNo.setText("ID Proforma");

        lblNitPersona.setText("NIT");

        txtNitPersona.setBackground(new java.awt.Color(255, 255, 204));
        txtNitPersona.setToolTipText("Ingrese el numero de NIT de la Persona");
        txtNitPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitPersonaFocusLost(evt);
            }
        });

        txtNombrePersona.setBackground(new java.awt.Color(255, 255, 204));
        txtNombrePersona.setToolTipText("El sistema obtiene el nombre de la persona");

        lblTelCliente.setText("Telefono");

        txtTelCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtTelCliente.setEditable(false);
        txtTelCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtTelCliente.setToolTipText("Ingrese el telefono del cliente");

        lblDirCliente.setText("Direccion");

        txtDirCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtDirCliente.setEditable(false);
        txtDirCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtDirCliente.setToolTipText("Ingrese la direccion del cliente, esta es independiente de la direccion de envio.");

        lblFecha.setText("Fecha");

        txtFechaEmisionProforma.setBackground(new java.awt.Color(255, 255, 204));
        txtFechaEmisionProforma.setToolTipText("Ingrese la fecha del envio");

        lblTotalFactura.setText("Total");

        txtTotalProforma.setEditable(false);
        txtTotalProforma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalProforma.setToolTipText("");

        lblEmpleado.setText("ID Empleado");

        cbxEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEmpleadoActionPerformed(evt);
            }
        });

        txtIdEmpleado.setBackground(new java.awt.Color(102, 102, 102));
        txtIdEmpleado.setEditable(false);
        txtIdEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        txtIdEmpleado.setToolTipText("Codigo del empleado se muestra automaticamente.");

        cbxTipoDeCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cliente Normal", "Cliente Mayorista" }));
        cbxTipoDeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoDeClienteActionPerformed(evt);
            }
        });

        lblTotalFactura1.setText("Tipo");

        jLabel1.setText("ID Cliente");

        txtIDCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtIDCliente.setEditable(false);
        txtIDCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtIDCliente.setToolTipText("Codigo del cliente.");

        txtCategoriaCliente.setBackground(new java.awt.Color(255, 51, 0));
        txtCategoriaCliente.setEditable(false);
        txtCategoriaCliente.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNitPersona)
                    .addComponent(lblTelCliente)
                    .addComponent(lblProformaNo)
                    .addComponent(lblFecha))
                .addGap(12, 12, 12)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelCliente)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(txtNitPersona)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCategoriaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtProforma, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtFechaEmisionProforma, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalFactura1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDirCliente)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(cbxTipoDeCliente, 0, 145, Short.MAX_VALUE)
                        .addGap(196, 196, 196)
                        .addComponent(lblTotalFactura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalProforma, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombrePersona)))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProformaNo)
                    .addComponent(lblEmpleado)
                    .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNitPersona)
                    .addComponent(txtNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategoriaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelCliente)
                    .addComponent(lblDirCliente)
                    .addComponent(txtDirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFechaEmisionProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalFactura)
                    .addComponent(txtTotalProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxTipoDeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalFactura1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonNuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonImpresoraLaser.png"))); // NOI18N
        btnImprimir.setActionCommand("imprimirEnvio");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonEliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        cbxTamanio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media Carta", "Carta", "Sin Membrete" }));

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbxTamanio, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxTamanio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevo)
                        .addComponent(btnGuardar)
                        .addComponent(btnEliminar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleProforma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion del Producto", "Cantidad", "P. Venta", "P. Minimo", "P. Normal", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleProforma.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblDetalleProforma.getTableHeader().setReorderingAllowed(false);
        tblDetalleProforma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleProformaMouseClicked(evt);
            }
        });
        tblDetalleProforma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleProformaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleProforma);
        if (tblDetalleProforma.getColumnModel().getColumnCount() > 0) {
            tblDetalleProforma.getColumnModel().getColumn(0).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblDetalleProforma.getColumnModel().getColumn(1).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(1).setPreferredWidth(20);
            tblDetalleProforma.getColumnModel().getColumn(2).setPreferredWidth(250);
            tblDetalleProforma.getColumnModel().getColumn(3).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(3).setPreferredWidth(20);
            tblDetalleProforma.getColumnModel().getColumn(4).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(4).setPreferredWidth(20);
            tblDetalleProforma.getColumnModel().getColumn(5).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(5).setPreferredWidth(30);
            tblDetalleProforma.getColumnModel().getColumn(6).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(6).setPreferredWidth(20);
            tblDetalleProforma.getColumnModel().getColumn(7).setResizable(false);
            tblDetalleProforma.getColumnModel().getColumn(7).setPreferredWidth(20);
        }

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlBotonesOpcionales.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblBuscar.setText("Buscar");

        jLabel6.setText("Producto");

        txtIdProducto.setBackground(new java.awt.Color(102, 102, 102));
        txtIdProducto.setEditable(false);
        txtIdProducto.setForeground(new java.awt.Color(255, 255, 255));

        txtBuscar.setToolTipText("Ingrese el nombre del producto que desea buscar");
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarkeyPressedEnter(evt);
            }
        });

        txtDescripcionProducto.setBackground(new java.awt.Color(102, 102, 102));
        txtDescripcionProducto.setEditable(false);
        txtDescripcionProducto.setForeground(new java.awt.Color(255, 255, 255));

        btnBuscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscar1.setActionCommand("buscar");
        btnBuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscar1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Venta");

        txtPrecioNormal.setBackground(new java.awt.Color(102, 102, 102));
        txtPrecioNormal.setEditable(false);
        txtPrecioNormal.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioNormal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        jLabel5.setText("Minimo");

        jLabel8.setText("Cantidad");

        txtCantidadVenta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        txtPrecioMinimo.setBackground(new java.awt.Color(102, 102, 102));
        txtPrecioMinimo.setEditable(false);
        txtPrecioMinimo.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioMinimo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        txtPrecioDescuento.setBackground(new java.awt.Color(102, 102, 102));
        txtPrecioDescuento.setEditable(false);
        txtPrecioDescuento.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioDescuento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtPrecioDescuento.setMaximumSize(new java.awt.Dimension(10, 20));

        txtCantidadMinima.setBackground(new java.awt.Color(102, 102, 102));
        txtCantidadMinima.setEditable(false);
        txtCantidadMinima.setForeground(new java.awt.Color(255, 255, 255));

        txtFilaActual.setBackground(new java.awt.Color(102, 102, 102));
        txtFilaActual.setEditable(false);
        txtFilaActual.setForeground(new java.awt.Color(255, 255, 255));
        txtFilaActual.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        cbxDescuento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "5", "10", "20", "40" }));
        cbxDescuento.setMaximumSize(new java.awt.Dimension(50, 20));
        cbxDescuento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxDescuentoChange(evt);
            }
        });

        jLabel10.setText("Descuento");

        btnMostrarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgMostrarImagenes.png"))); // NOI18N
        btnMostrarImagen.setActionCommand("btnAgregar");
        btnMostrarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarImagenActionPerformed(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonAgregar.png"))); // NOI18N
        btnAgregar.setActionCommand("btnAgregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jLabel4.setText("Normal");

        txtPrecioEspecial.setBackground(new java.awt.Color(51, 153, 0));
        txtPrecioEspecial.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlBotonesOpcionalesLayout = new javax.swing.GroupLayout(pnlBotonesOpcionales);
        pnlBotonesOpcionales.setLayout(pnlBotonesOpcionalesLayout);
        pnlBotonesOpcionalesLayout.setHorizontalGroup(
            pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                        .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescripcionProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                    .addComponent(txtBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                        .addComponent(txtPrecioVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                        .addComponent(txtPrecioNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCantidadVenta, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(txtPrecioMinimo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPrecioDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCantidadMinima, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioEspecial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFilaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(cbxDescuento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAgregar)
                .addContainerGap())
        );
        pnlBotonesOpcionalesLayout.setVerticalGroup(
            pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                        .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(txtPrecioMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPrecioNormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel4)
                                        .addComponent(cbxDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPrecioEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblBuscar)
                                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtCantidadMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFilaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(pnlBotonesOpcionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtPrecioDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCantidadVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
                            .addComponent(btnMostrarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addGroup(pnlBotonesOpcionalesLayout.createSequentialGroup()
                        .addComponent(btnBuscar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pnlDetalleProducto.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProducto.getTableHeader().setReorderingAllowed(false);
        tblProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblProducto);

        javax.swing.GroupLayout pnlDetalleProductoLayout = new javax.swing.GroupLayout(pnlDetalleProducto);
        pnlDetalleProducto.setLayout(pnlDetalleProductoLayout);
        pnlDetalleProductoLayout.setHorizontalGroup(
            pnlDetalleProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleProductoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        pnlDetalleProductoLayout.setVerticalGroup(
            pnlDetalleProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleProductoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlBotonesOpcionales, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlDetalleProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotonesOpcionales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalleProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //VARIABLES GLOBALES
    ObjetosProforma Proforma = new ObjetosProforma();
    ObjetosProducto Producto = new ObjetosProducto();
    ObjetosDetalleProforma Detalle = new ObjetosDetalleProforma();
    AccesoCliente NuevoCliente = new AccesoCliente();
    AccesoProforma NuevaProforma = new AccesoProforma();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoDetalleProforma NuevoDetalleProforma = new AccesoDetalleProforma();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    
    Date fecha = new Date();
    float total_factura = 0;
    float cantidad = 0;
    float precio = 0;
    
    //SE COLOCARON PUBLICAS PARA PODER UTILIZARLAS EN EL CATALOGO DE PRODUCTOS
    //YA QUE DESDE ALLI SE PUEDE IMPORTAR UN CODIGO SELECCIONADO PRESIONANDO
    //SOBRE EL CODIGO QUE QUIERE ENVIAR Y LUEGO EL BOTON EVIAR AL DETALLE DE VENTA
    public int fila_seleccionada = 0;
    public int columna_seleccionada = 0;
    
    private void agregarLog(String texto) {
        this.Log = this.Log + "PROFORMA" + ": " + texto + " \n";
        Inventory.txtLog.setText(Log);
    }
    
    private void limpiarEncabezadoFactura(){
        txtProforma.setText("");
        txtIdEmpleado.setText("");
        txtNitPersona.setText("");
        txtIDCliente.setText("");
        txtNombrePersona.setText("");
        txtTelCliente.setText("");
        txtDirCliente.setText("");
        txtFechaEmisionProforma.setText("");
        txtTotalProforma.setText("");
        cbxEmpleado.setSelectedItem("Seleccione");
    }
    
    private void limpiarPanelBusqueda () {
        txtIdProducto.setText("");
        txtDescripcionProducto.setText("");
        txtPrecioNormal.setText("");
        txtPrecioVenta.setText("");
        txtPrecioMinimo.setText("");
        txtCantidadVenta.setText("");
        txtPrecioDescuento.setText("");
        txtCantidadMinima.setText("");
        
    }
    
    private void limpiarDetalleFactura(){
        String[] columnas = {"No","Codigo","Descripcion del Producto","Cantidad","P. Venta","P. Minimo","P. Normal", "Total"};
        DefaultTableModel modelo_tabla = new DefaultTableModel(columnas, 199);
        tblDetalleProforma.setModel(modelo_tabla);
        cantidad = 0;
    }
    
    private void calcular_descuento() {
        
        double precio_venta = 0.0;
        double descuento = 0.0;
        double precio_descuento = 0.0;
        
        try {

            precio_venta = Double.parseDouble(txtPrecioVenta.getText());

            if (tblProducto.getValueAt(tblProducto.getSelectedRow(), 10).toString().equals("SI")) {
                
                if(Double.parseDouble(cbxDescuento.getSelectedItem().toString()) > 0.0) {
                    descuento = 1 - (Double.parseDouble(cbxDescuento.getSelectedItem().toString()) / 100); System.out.println(4);
                } else {
                    descuento = 1; System.out.println(5);
                }
                
                precio_descuento = precio_venta * descuento;
                this.txtPrecioDescuento.setText(String.valueOf(matematica.aproxima(precio_descuento, 2)));
                
            } else {
                this.txtPrecioDescuento.setText(String.valueOf(matematica.aproxima(precio_venta, 2)));
            }
            
        } catch(Exception e) {
            if(!txtPrecioVenta.getText().isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "Ingreso un caracter no valido.\n" + e.getMessage(), "Calcular Descuento");
                Mensaje.manipulacionExcepciones("critico", "Precio: " + String.valueOf(precio_venta) + " Descuento: " +  descuento + " Total: " +  precio_descuento, "Calculo");
            }
        }
        
    }
    
    private ObjetosProducto obtenerDatosProducto(String pId_producto){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();
        
        //CONSULTAR EL ID DE PRODUCTO PARA OBTENER LOS DATOS
        try{
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Producto");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProducto.isEmpty()){
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos", "Obtener Datos Producto");
        } else {
            if(BuscarProducto.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo", "Obtener Datos Producto");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_proveedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
                Producto.setPrj_est_producto(BuscarProducto.get(0).getPrj_est_producto());
                Producto.setPrj_min_producto(BuscarProducto.get(0).getPrj_min_producto());
                Producto.setPrecio_min_producto(BuscarProducto.get(0).getPrecio_min_producto());
            }
        }
        
        return Producto;
    }
    
    private void obtenerDatosCliente(String pNit_persona){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existen datos de esta Persona en la Base de Datos.", "Obtener Datos Cliente");
        } else {
            if (BuscarPersona.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Existe mas de una persona con este numero de NIT.", "Obtener Datos Cliente");
            } else {
                txtNombrePersona.setText(BuscarPersona.get(0).getNom_persona());
                //CONSULTAR EL NIT DEL CLIENTE
                try {
                    BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                } catch (Exception error) {
                    Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Cliente");
                }
            }
        }
        
        
        
        if (BuscarCliente.isEmpty()) {
            
            Mensaje.manipulacionExcepciones("interrogante", "Desea crear este cliente en la Base de Datos.", "Obtener Datos Cliente");
          
            if (Mensaje.valor == 0) {
                wdwCatalogoClientes CatalogoClientes = new wdwCatalogoClientes();
                int ancho = Inventory.pnlPrincipal.getWidth();
                int alto = Inventory.pnlPrincipal.getHeight();
                int x = (ancho / 2) - (CatalogoClientes.getWidth() / 2);
                int y = ((alto / 2) - (CatalogoClientes.getHeight() / 2));
                CatalogoClientes.setVisible(true);
                Inventory.pnlPrincipal.add(CatalogoClientes);
                CatalogoClientes.toFront();
                CatalogoClientes.setLocation(x, y);
                Mensaje.valor = 2;
            } else {
                txtNitPersona.setText("C/F");
                txtNitPersona.requestFocus();
            }

        } else {
            
            if (BuscarCliente.size() > 1) {
                Mensaje.manipulacionExcepciones("critico", "Se encontro mas de un Cliente con este numero de NIT.", "Buscar Datos Cliente");
            } else {
                txtTelCliente.setText(String.valueOf(BuscarCliente.get(0).getTel_cliente()));
                txtDirCliente.setText(BuscarCliente.get(0).getDir_cliente());
                txtFechaEmisionProforma.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth() + 1) + "-" + fecha.getDate());
                txtTotalProforma.setText("0.00");
                txtIDCliente.setText(String.valueOf(BuscarCliente.get(0).getId_cliente()));
                txtCategoriaCliente.setText(BuscarCliente.get(0).getTipo_cliente());
            }
        }
        
        BuscarPersona.removeAll(BuscarCliente);
        BuscarCliente.removeAll(BuscarCliente);
    }
    
    private void buscarEnRegistrosGuardados(){
        
        // CAPTURO EL DATO A BUSCAR
        String busqueda = txtBuscar.getText().toUpperCase().replaceAll("'", "´");
        System.out.println("Se esta buscando la cadena " + busqueda);
        
        if(busqueda != null){
            
            DefaultTableModel tabla = new DefaultTableModel();
            
            AccesoProducto Producto = new AccesoProducto();
            AccesoProveedor Proveedor = new AccesoProveedor();
            AccesoPersona Persona = new AccesoPersona();

            ArrayList<ObjetosProducto> listaProductos = new ArrayList();
            ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS PRODUCTOS
            try{
                
                listaProductos = Producto.seleccionarProducto(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), Inventory.lblRol.getText());
                listaProveedores = Proveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                listaPersonas = Persona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());                
            }catch(Error error){
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Persona");
            }

            //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
            if(listaProductos.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos.", "Buscar en Registros Guardados");
            } else {
                
                tabla.addColumn("ID Producto");
                tabla.addColumn("Marca");
                tabla.addColumn("Descripcion");
                tabla.addColumn("Familia");
                tabla.addColumn("Proveedor");
                tabla.addColumn("Existencias");
                tabla.addColumn("Medida");
                tabla.addColumn("P. Estandar");
                tabla.addColumn("P. Minimo");
                tabla.addColumn("Fabricante");
                tabla.addColumn("Descuento");
                tabla.addColumn("P.Especial");

                int cProducto = 0;
                int contadorFilas = 1;

                // RECORRO LA LISTA DE PRODUCTOS
                for (ObjetosProducto xProducto : listaProductos) {

                    // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                    for (ObjetosProveedor xProveedor : listaProveedores) {

                        // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                        if (xProducto.getId_proveedor() == xProveedor.getId_proveedor()) {

                            // SOLO SI COINCIDE LE ID PROVEEDOR ARRIBA RECORRO LA LISTA DE PERSONAS
                            for (ObjetosPersona xPersona : listaPersonas) {

                                // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR COMPARO CON EL STRING BUSCADO
                                if (xProveedor.getId_persona() == xPersona.getId_persona()) {
                                   
                                    // SI EXISTE ALGUNA COINCIDENCIA CON EL STRING BUSCADO PINTO LA TUPLA EN EL DETALLE
                                    // SEPARO LA CADENA PARA BUSCAR CADA PALABRA INGRESADA Y BUSCO POR CADA TOKEN
                                    String[] tokens = busqueda.split("%");
                                    int cuenta_coincidencias = tokens.length;
                                    cuenta_coincidencias = 0;
                                    
                                    for(int x = 0; x < tokens.length; x++) {
                                        
                                        if (xProducto.getId_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                            || xProducto.getMarca_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                            || xProducto.getDesc_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                            || xPersona.getNom_persona().toUpperCase().indexOf(tokens[x]) >= 0
                                            || xProducto.getLinea_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                            || xProducto.getCodigo_fabricante().toUpperCase().indexOf(tokens[x]) >= 0) {
                                            cuenta_coincidencias++;
                                        } //fin de la validacion de la palabra

                                    } //fin del while que recorre los tokens
                                    
                                    if (cuenta_coincidencias == tokens.length) {
                                        // ESTABLECE EL TAMAÑO DE LA TABLA
                                        tabla.setRowCount(contadorFilas);
                                        tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                        tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                        tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                        tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                        tabla.setValueAt(xPersona.getNom_persona(), cProducto, 4);
                                        tabla.setValueAt(xProducto.getExi_producto(), cProducto, 5);
                                        tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 6);
                                        tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 7);
                                        tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                        tabla.setValueAt(xProducto.getCodigo_fabricante(), cProducto, 9);
                                        tabla.setValueAt(xProducto.getDescuento_producto(), cProducto, 10);
                                        tabla.setValueAt(xProducto.getPrecio_especial_producto(), cProducto, 11);
                                        cProducto++;
                                        contadorFilas++;
                                    } else {
                                        System.out.println("No se tomo en cuenta " + cuenta_coincidencias + " de " + tokens.length);
                                    }
                                }
                            }
                        }
                    }
                }

                tblProducto.setModel(tabla);
                //CAMBIAR DE TAMAÑO LA TERCERA COLUMNA 'DESCRIPCION'
                tblProducto.getColumnModel().getColumn(2).setPreferredWidth(200);
            }
        }else{
            mostrarRegistrosGuardados();
        } 
    }
    
    private void mostrarRegistrosGuardados(){
        

        DefaultTableModel tabla = new DefaultTableModel();
        AccesoProducto Producto = new AccesoProducto();
        AccesoProveedor Proveedor = new AccesoProveedor();
        AccesoPersona Persona = new AccesoPersona();
        
        ArrayList<ObjetosProducto> listaProductos = new ArrayList();
        ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();
        
        try{
            listaProductos = Producto.seleccionarProducto(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), Inventory.lblRol.getText());
            listaProveedores = Proveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            listaPersonas = Persona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona");
        }
        
        //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
        if(listaProductos.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos.", "Mostrar Registros Guardados");
        } else {
            
            tabla.addColumn("ID Producto");
            tabla.addColumn("Marca");
            tabla.addColumn("Descripcion");
            tabla.addColumn("Familia");
            tabla.addColumn("Proveedor");
            tabla.addColumn("Existencias");
            tabla.addColumn("Medida");
            tabla.addColumn("P. Estandar");
            tabla.addColumn("P. Minimo");
            tabla.addColumn("Fabricante");
            tabla.addColumn("Descuento");
            tabla.addColumn("P. Especial");
            
            tabla.setRowCount(listaProductos.size());
            int cProducto = 0;
            
            // RECORRO LA LISTA DE PRODUCTOS
            for(ObjetosProducto xProducto:listaProductos ){
                
                // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                for(ObjetosProveedor xProveedor:listaProveedores){
                    
                    // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                    if(xProducto.getId_proveedor() == xProveedor.getId_proveedor()){
                        
                        // SOLO SI COINCIDE EL ID PROVEEDOR ARRIBA RECORRO  LA LISTA DE PERSONAS
                        for(ObjetosPersona xPersona:listaPersonas){
                            
                            // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR PINTO LOS DATOS
                            if(xProveedor.getId_persona() == xPersona.getId_persona()){
                                tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                tabla.setValueAt(xPersona.getNom_persona(), cProducto, 4);
                                tabla.setValueAt(xProducto.getExi_producto(), cProducto, 5);   
                                tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 6);
                                tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 7);
                                tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                tabla.setValueAt(xProducto.getCodigo_fabricante(), cProducto, 9);
                                tabla.setValueAt(xProducto.getDescuento_producto(), cProducto, 10);
                                tabla.setValueAt(xProducto.getPrecio_especial_producto(), cProducto, 11);
                                cProducto++;
                            }
                        }
                    }
                }
            }
            
            tblProducto.setModel(tabla);
            tblProducto.getColumnModel().getColumn(2).setPreferredWidth(200);
        }
    }
    
    private void cargaEmpleados(){
        ArrayList<ObjetosProforma> lUsuarios = new ArrayList();
            
        try{
            lUsuarios = NuevaProforma.retornaNombreEmpleados(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Retorna Nombre Empleados");
        }
        
        // Lleno el combobox con los registros de empleados que existen
        for(ObjetosProforma xUsuario : lUsuarios){
            cbxEmpleado.addItem(xUsuario.getNombre_empleado());
        }
        
    }
    
    private int obtenerIdCliente(String pNit_cliente){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        int vId_cliente = 0;
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_cliente, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Buscar Persona por NIT");
        }
        
        //EVALUANDO LOS DATOS OPTENDIOS DE PERSONA
        if(BuscarPersona.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existe este Cliente en la Base de Datos.", "Obtener ID Cliente");
        } else {
            if(BuscarPersona.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existen mas personas con este Numero de NIT.", "Obtener ID Cliente");
            }
        }
                
        //CONSULTAR EL ID DE LA PERSONA EN CLIENTE
        try{
            BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("informacion", error.getMessage(), "Buscar Cliente");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarCliente.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "Debe crear este cliente en la base de datos.", "Obtener ID Cliente");
        }else{
            if(BuscarCliente.size()>1){
                Mensaje.manipulacionExcepciones("critical", "Este numero de Nit esta repetido.", "Obtener ID Cliente");
            } else {
                vId_cliente = BuscarCliente.get(0).getId_cliente();
            }
        }
        
        return vId_cliente;
    }
    
    private boolean verificarDatosProforma(ObjetosProforma pProforma){
        boolean vDatos_correctos = true;
        
        if("".equals(txtNitPersona.getText())){
            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de NIT.", "Verificar Datos Proforma");
            vDatos_correctos = false;
        }
        if("".equals(pProforma.getFecha_emision_proforma())){
            Mensaje.manipulacionExcepciones("critical", "Ingrese la fecha de la proforma.", "Verificar Datos Proforma");   
            vDatos_correctos = false;
        }
        
        return vDatos_correctos;
    }
    
    private void AgregarProductoAlDetalle() {
        
         if (txtNitPersona.getText().equals("")) {
            Mensaje.manipulacionExcepciones("critico", "Por favor llene el encabezado de la proforma.", "Boton Agregar");
        } else {
            if (txtIdProducto.getText().equals("")) {
                Mensaje.manipulacionExcepciones("critico", "Seleccione un producto por favor.", "Boton Agregar");
            } else {

                //Validar si el producto ya esta al minimo para mostrar el mensaje
                if (txtCantidadMinima.getText().equals("SI")) {
                    Mensaje.manipulacionExcepciones("informacion", "El producto ya ha llegado al minimo.", "Boton Agregar");
                }


                boolean mover_linea = false;

                //validaciones del precio ingresado que este en el rango excepto si el usuario es administrador
                if ((Float.parseFloat(txtPrecioDescuento.getText()) >= Float.parseFloat(txtPrecioMinimo.getText()) && Float.parseFloat(txtPrecioDescuento.getText()) <= Float.parseFloat(txtPrecioNormal.getText())) || Inventory.lblRol.getText().equals("Administrador")) {

                    Double precio_normal  = 0.0;
                    Double precio_especial = 0.0;
                    float precio_venta = 0;
                    
                    //calcular el valor del producto con el descuento seleccionado
                    float descuento = 1 - (Float.parseFloat(cbxDescuento.getSelectedItem().toString()) / 100);
                    
                    try {
                        precio_normal = matematica.aproxima(Double.parseDouble(txtPrecioVenta.getText()), 2);
                        agregarLog("Precio normal: " + precio_normal);
                    } catch(Exception Error) {
                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al verificar el Precio de Venta.", "Calcular Precio Normal");
                    }
                    
                    try {
                        precio_especial = matematica.aproxima(Double.parseDouble(txtPrecioEspecial.getText()), 2);
                        agregarLog("Precio especial: " + precio_normal);
                    } catch(Exception Error) {
                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al verificar el Precio de Especial.", "Calcular Precio Especial");
                    }

                    try {
                        if(this.txtCategoriaCliente.getText().equals("A")) {
                            agregarLog("Al ser Cliente tipo A se le dará el precio especial.");
                            if(this.txtPrecioEspecial.getText().equals("0.0")) {
                               precio_venta = Float.parseFloat(String.valueOf(precio_normal)); 
                            } else {
                               precio_venta = Float.parseFloat(String.valueOf(precio_especial)); 
                            }
                        } else {
                            precio_venta = Float.parseFloat(String.valueOf(precio_normal));
                        }
                    } catch(Exception Error) {
                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al colocar el precio de venta.", "Calcular Precio Venta");
                    }
                    
                    double precio_descuento = matematica.aproxima(precio_venta * descuento, 2);


                    try {

                        //sacar el total vendido para colocarlo en el detalle de la venta
                        double total = matematica.aproxima(Float.parseFloat(txtCantidadVenta.getText()) * precio_descuento, 2);

                        try {
                            
                            //enviar datos al detalle de la pantalla de ventas con los datos del producto
                            tblDetalleProforma.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                            tblDetalleProforma.setValueAt(txtIdProducto.getText(), fila_seleccionada, 1);
                            tblDetalleProforma.setValueAt(txtDescripcionProducto.getText(), fila_seleccionada, 2);
                            tblDetalleProforma.setValueAt(Float.parseFloat(txtCantidadVenta.getText()), fila_seleccionada, 3);
                            tblDetalleProforma.setValueAt(matematica.aproxima(precio_descuento, 2), fila_seleccionada, 4);
                            tblDetalleProforma.setValueAt(Float.parseFloat(txtPrecioMinimo.getText()), fila_seleccionada, 5);
                            tblDetalleProforma.setValueAt(Float.parseFloat(txtPrecioNormal.getText()), fila_seleccionada, 6);
                            tblDetalleProforma.setValueAt(total, fila_seleccionada, 7);

                            mover_linea = true;

                        } catch (Exception e) {
                            System.out.println("Enviar datos al detalle: " + e.getMessage());
                        }

                    } catch (Exception e) {
                        System.out.println("Calcular Total: " + e.getMessage());
                    }

                } else {
                    Mensaje.manipulacionExcepciones("critico", "El precio no corresponde al rango aceptado", "Boton Agregar");
                }

                //Moverse a la siguiente fila para continuar insertando productos
                if (fila_seleccionada >= 200) {
                    Mensaje.manipulacionExcepciones("critico", "Llego al final de la factura", "Boton Agregar");
                } else {
                    if (mover_linea) {
                        this.fila_seleccionada++;
                        this.tblDetalleProforma.requestFocus();
                        this.tblDetalleProforma.changeSelection(fila_seleccionada, 0, false, false);
                        this.txtFilaActual.setText(String.valueOf(fila_seleccionada));
                    }
                }

                totalProforma();
                limpiarPanelBusqueda();

            }
        }
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        boolean error_grabar = false;

        if (txtProforma.getText().equals("")) {
            
            try {
                Proforma.setId_empleado(Integer.parseInt(txtIdEmpleado.getText()));
                Proforma.setId_cliente(obtenerIdCliente(txtNitPersona.getText()));
                Proforma.setDir_envio_proforma(txtDirCliente.getText());
                Proforma.setFecha_proforma(txtFechaEmisionProforma.getText());
                Proforma.setTotal_proforma(Float.parseFloat(txtTotalProforma.getText()));
                Proforma.setNombre_proforma(txtNombrePersona.getText());
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al leer los datos de la Proforma.", "Boton Guardar");
            }

            if (verificarDatosProforma(Proforma)) {
                NuevaProforma.insertarProforma(Proforma, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            } else {
                Mensaje.manipulacionExcepciones("critico", "Por favor verifique los datos de la Proforma.", "Boton Guardar");
            }

            //Obtener el ID de la Proforma ingresada
            try {
                ArrayList<ObjetosProforma> BuscarProforma = new ArrayList();
                BuscarProforma = NuevaProforma.seleccionarIdProforma(Proforma, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                if (BuscarProforma.isEmpty()) {
                    Mensaje.manipulacionExcepciones("critico", "No existe esta Proforma en la Base de datos.", "Boton Guardar");
                } else {
                    if (BuscarProforma.size() > 1) {
                        Mensaje.manipulacionExcepciones("critico", "Existen mas Proformas con los mismos datos.", "Boton Guardar");
                    } else {
                        txtProforma.setText(String.valueOf(BuscarProforma.get(0).getId_proforma()));
                    }
                }
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "No se puede almacenar la Proforma.", "Seleccionar ID Proforma");
            }

            //Almacenar el detalle
            try {
                for (int cFilas = 0; cFilas < tblDetalleProforma.getRowCount(); cFilas++) {

                    if (tblDetalleProforma.getValueAt(cFilas, 0) != null) {

                        try {

                            Detalle.setId_d_proforma((Integer) tblDetalleProforma.getValueAt(cFilas, 0));
                            Detalle.setId_proforma(Integer.parseInt(txtProforma.getText()));
                            Detalle.setId_producto(tblDetalleProforma.getValueAt(cFilas, 1).toString());
                            Detalle.setCant_d_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 3).toString()));
                            Detalle.setPrecio_venta_d_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 4).toString()));
                            Detalle.setSub_total_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 7).toString()));

                            if (Float.parseFloat(txtTotalProforma.getText()) > 0.00) {
                                NuevoDetalleProforma.insertarDetalleProforma(Detalle, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                            } else {
                                txtProforma.setText("");
                                Mensaje.manipulacionExcepciones("Critico", "El total de la Proforma no puede ser cero.", "Boton Guardar");
                            }

                        } catch (Exception error) {
                            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Inserta Detalle Proforma");
                            error_grabar = true;
                        }
                    }
                }

                if (error_grabar == false) {
                    Mensaje.manipulacionExcepciones("informacion", "Registro guardado con exito Proforma No. " + txtProforma.getText(), "Boton Guardar");
                }

            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Inserta Detalle Proforma");
            }
            
        } else {
            Mensaje.manipulacionExcepciones("critico", "Esta proforma ya fue guardada con anterioridad.", "Boton Guardar");
        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNitPersonaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitPersonaFocusLost
        
        if (txtNitPersona.getText().equals("c/f") || txtNitPersona.getText().equals("C/F") || txtNitPersona.getText().equals("")) {
            txtNitPersona.setText("C/F");
            txtIDCliente.setText("1");
            txtNombrePersona.setText("Consumidor Final");
            txtTelCliente.setText("0");
            txtDirCliente.setText("Ciudad");
            txtFechaEmisionProforma.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth()+1) + "-" + fecha.getDate());
            txtTotalProforma.setText("0.00");
        } else {
            obtenerDatosCliente(txtNitPersona.getText());
        }
        
    }//GEN-LAST:event_txtNitPersonaFocusLost

    private void totalProforma() {
        total_factura = 0;
        for(int cFilas = 0; cFilas <= 200; cFilas++) {
            try{
                total_factura = total_factura + Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 7).toString());
            } catch(Exception error) {
                total_factura = total_factura + 0;
            }
        }
        txtTotalProforma.setText(String.valueOf(matematica.redondear(total_factura)));
    }
    
    private void tblDetalleProformaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleProformaKeyPressed

        if (evt.getKeyCode() == 9) {

            columna_seleccionada = tblDetalleProforma.getSelectedColumn();

            //Busca la información del producto seleccionado
            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                tblDetalleProforma.setValueAt((String) Producto.getDesc_producto() + " - " + (String) Producto.getMarca_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_min_producto(), fila_seleccionada, columna_seleccionada + 3);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 4);
            }
            
            //Verifica la cantidad actual del producto
            if (columna_seleccionada == 4) {

                //Evaluar que la cantidad no sea nula
                if (tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la cantidad a vender.", "Tabla Detalle");
                } else {
                    cantidad = (float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                }

                //Evaluar que la cantidad sea mayor a cero
                if ((float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                    Mensaje.manipulacionExcepciones("critico", "La cantidad ingresada no es valida.", "Tabla Detalle");
                }

                //Evaluar que la cantidad no sea mayor que la existencia
                if ((float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) > Producto.getExi_producto()) {
                    Mensaje.manipulacionExcepciones("critico", "Esta cantidad excede el total de existencia.", "Tabla Detalle");
                }

                //Evaluar el minimo de producto existente
                if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo.", "Tabla Detalle");
                }

            }

            if (columna_seleccionada == 5) {
                precio = (float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1);
            }

            if (columna_seleccionada == 6) {
                //Evaluar el precio ingresado a excepcion del Administrador               
                if ((Float.parseFloat(tblDetalleProforma.getValueAt(tblDetalleProforma.getSelectedRow(),4).toString()) > Float.parseFloat(tblDetalleProforma.getValueAt(tblDetalleProforma.getSelectedRow(),5).toString())) || (Inventory.lblRol.getText().equals("Administrador"))) {
                    tblDetalleProforma.setValueAt(Math.rint(cantidad * precio * 100) / 100, fila_seleccionada, columna_seleccionada + 1);
                    tblDetalleProforma.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                    totalProforma();
                } else {
                    Mensaje.manipulacionExcepciones("critico", "No puede vender el producto a este precio.", "Tabla Detalle");
                }
            }
            
        }
    }//GEN-LAST:event_tblDetalleProformaKeyPressed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.dispose();
        wdwMovimientoProforma proforma = new wdwMovimientoProforma();
        ventana.abrirPantalla(proforma);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
       
        String nombre_reporte = "rptProforma";
        
        if(cbxTamanio.getSelectedItem().toString().equals("Media Carta")) {
            nombre_reporte = "rptProformaMediaCarta";
        } else {
            if(cbxTamanio.getSelectedItem().toString().equals("Sin Membrete")) {
                nombre_reporte = "rptProformaSinMembrete";
            } else {
                nombre_reporte = "rptProforma";
            }
        }
        
        
        try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/" + nombre_reporte + ".jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            
            //parametros del reporte
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtProforma.getText()));
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal());
            parametro.put("P_NOMBRE_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_SUCURSAL", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());            
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte PROFORMA");
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        try{
            
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.addColumn("No.");
            tabla.addColumn("Codigo");
            tabla.addColumn("Descripcion");
            tabla.addColumn("Cantidad");
            tabla.addColumn("P. Venta");
            tabla.addColumn("P. Minimo");
            tabla.addColumn("P. Normal");
            tabla.addColumn("Total");
            
            //Eliminar la fila y realizar nuevamente la suma         
            DefaultTableModel modelo = (DefaultTableModel) tblDetalleProforma.getModel();
            Object nueva_fila[] = {null,null,null,null,null,null,null,null};
            modelo.addRow(nueva_fila);
            modelo.removeRow(fila_seleccionada);
            
            //Reordenar la filas en la tabla del detalle
            fila_seleccionada = 0;
            for(int cFilas = 0; cFilas < 200; cFilas++){
                if (tblDetalleProforma.getValueAt(cFilas, 0) != null) {
                    tblDetalleProforma.setValueAt(cFilas + 1, cFilas, 0);
                    fila_seleccionada++;
                }
            }
            txtFilaActual.setText(String.valueOf(fila_seleccionada));

        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Boton Eliminar");
        }

        totalProforma();

        tblDetalleProforma.requestFocus();
        tblDetalleProforma.changeSelection(fila_seleccionada, 0, false, false);

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleProformaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleProformaMouseClicked
        fila_seleccionada = tblDetalleProforma.getSelectedRow();
        columna_seleccionada = tblDetalleProforma.getSelectedColumn();
    }//GEN-LAST:event_tblDetalleProformaMouseClicked

    private void cbxEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEmpleadoActionPerformed
        String seleccion = "";
        seleccion = cbxEmpleado.getSelectedItem().toString();

        int idEmpleado = 0;

        try {
            idEmpleado = NuevaProforma.retornaIDEmpleado(seleccion, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            txtIdEmpleado.setText(String.valueOf(idEmpleado));

        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Retorna ID Empleado");
        }
    }//GEN-LAST:event_cbxEmpleadoActionPerformed

    private void tblProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductoMouseClicked

        if (String.valueOf(tblProducto.getSelectedColumn()).equals("0")) {

            txtIdProducto.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 0).toString());
            txtDescripcionProducto.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 2).toString());
            txtPrecioNormal.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 7).toString());
            txtPrecioMinimo.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 8).toString());

            if (cbxTipoDeCliente.getSelectedItem().toString().equals("Cliente Normal")) {
                txtPrecioVenta.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 7).toString());
            } else {
                txtPrecioVenta.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 8).toString());
            }

            txtCantidadVenta.setText("1");

            float existencia_actual = Float.parseFloat(tblProducto.getValueAt(tblProducto.getSelectedRow(), 5).toString());

            //validar si es mayor a la existencia
            if (existencia_actual > existencia_actual) {
                txtCantidadMinima.setText("Minmo");
                txtCantidadMinima.setForeground(Color.RED);
                txtCantidadMinima.setBackground(Color.RED);
            } else {
                txtCantidadMinima.setText("");
                txtCantidadMinima.setForeground(Color.DARK_GRAY);
                txtCantidadMinima.setBackground(Color.DARK_GRAY);
            }
            
            txtPrecioEspecial.setText(tblProducto.getValueAt(tblProducto.getSelectedRow(), 11).toString());
            
            //calcular el valor del producto con el descuento seleccionado
            calcular_descuento();
        }

    }//GEN-LAST:event_tblProductoMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        AgregarProductoAlDetalle();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnMostrarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarImagenActionPerformed
        wdwMostrarImagenes pantalla = new wdwMostrarImagenes();
        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        int x = (ancho / 2) - (pantalla.getWidth() / 2);
        int y = (alto / 2) - (pantalla.getHeight() / 2);
        pantalla.setLocation(x, y);
        pantalla.setVisible(true);
        Inventory.pnlPrincipal.add(pantalla);
        pantalla.toFront();

        //cargar los id's de las imagenes asociadas al producto seleccionado
        ArrayList<String> lista = new ArrayList();
        AccesoImagen acceso = new AccesoImagen();
        String id = txtIdProducto.getText();
        String pro = txtDescripcionProducto.getText();
        wdwMostrarImagenes.txtIdProducto.setText(id);
        wdwMostrarImagenes.txtDescripcionProducto.setText(pro);
        lista = acceso.listarImagenes(id, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        for (String c : lista) {
            wdwMostrarImagenes.cbxIdProducto.addItem(c);
        }
    }//GEN-LAST:event_btnMostrarImagenActionPerformed

    private void cbxDescuentoChange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxDescuentoChange
        calcular_descuento();
    }//GEN-LAST:event_cbxDescuentoChange

    private void btnBuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscar1ActionPerformed
        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscar1ActionPerformed

    private void txtBuscarkeyPressedEnter(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarkeyPressedEnter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarEnRegistrosGuardados();
        }
    }//GEN-LAST:event_txtBuscarkeyPressedEnter

    private void cbxTipoDeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoDeClienteActionPerformed
        if( cbxTipoDeCliente.getSelectedItem().toString().equals("Cliente Mayorista") ) {
            cbxDescuento.setSelectedIndex(0);
            cbxDescuento.setEnabled(false);
        }
    }//GEN-LAST:event_cbxTipoDeClienteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    public static javax.swing.JButton btnMostrarImagen;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox cbxDescuento;
    private javax.swing.JComboBox cbxEmpleado;
    private javax.swing.JComboBox cbxTamanio;
    private javax.swing.JComboBox cbxTipoDeCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblDirCliente;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNitPersona;
    private javax.swing.JLabel lblProformaNo;
    private javax.swing.JLabel lblTelCliente;
    private javax.swing.JLabel lblTotalFactura;
    private javax.swing.JLabel lblTotalFactura1;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlBotonesOpcionales;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlDetalleProducto;
    private javax.swing.JPanel pnlEncabezado;
    public static javax.swing.JTable tblDetalleProforma;
    private javax.swing.JTable tblProducto;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCantidadMinima;
    private javax.swing.JFormattedTextField txtCantidadVenta;
    private javax.swing.JTextField txtCategoriaCliente;
    private javax.swing.JTextField txtDescripcionProducto;
    private javax.swing.JTextField txtDirCliente;
    private javax.swing.JTextField txtFechaEmisionProforma;
    private javax.swing.JFormattedTextField txtFilaActual;
    private javax.swing.JTextField txtIDCliente;
    private javax.swing.JTextField txtIdEmpleado;
    private javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNombrePersona;
    private javax.swing.JFormattedTextField txtPrecioDescuento;
    private javax.swing.JTextField txtPrecioEspecial;
    private javax.swing.JFormattedTextField txtPrecioMinimo;
    private javax.swing.JFormattedTextField txtPrecioNormal;
    private javax.swing.JTextField txtPrecioVenta;
    private javax.swing.JTextField txtProforma;
    private javax.swing.JTextField txtTelCliente;
    public static javax.swing.JTextField txtTotalProforma;
    // End of variables declaration//GEN-END:variables
}
