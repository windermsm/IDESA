package inventory.vistas;

import inventory.acceso.*;
import inventory.librerias.NormalCell;
import inventory.objetos.*;
import inventory.servicios.Matematicas;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

public class wdwCatalogoProductos extends javax.swing.JInternalFrame {

    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    ObjetosProducto Producto = new ObjetosProducto();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoArchivo Configuracion = new AccesoArchivo();
    
    //VARIABLES PUBLICAR PARA ENVIAR EL ID DEL PRODUCTO
    //SELECCIONADO A LA PATALLA DE VENTAS
    public int fila_seleccionada = 0;
    public int columan_seleccionada = 0;
    private Matematicas matematicas = new Matematicas();
            
    
    boolean LeDiClick = false;
    
    private int decimales;
    
    /**
     * Creates new form wdwCatalogoProductos
     */
    public wdwCatalogoProductos() {
        initComponents();
        
        //Obtenner valores del archivo de configuracion
        try {
            decimales = Integer.parseInt(Configuracion.leer("[Decimales]"));
        } catch(IOException | NumberFormatException Error) {
            decimales = 0;
            System.out.println("Error al leer configuraciones: " + Error.toString());
        }
        
        obtenerCategorias();
        obtenerMarcas();
        mostrarRegistrosGuardados();
        tblProducto.setDefaultRenderer(Object.class, new NormalCell());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdProducto = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();
        lblMarcaProducto = new javax.swing.JLabel();
        lblDescProducto = new javax.swing.JLabel();
        txtDescProducto = new javax.swing.JTextField();
        lblPrecioCompraProducto = new javax.swing.JLabel();
        txtPrecioCompraProducto = new javax.swing.JTextField();
        lblPrecioEstProducto = new javax.swing.JLabel();
        txtPrecioVentaProducto = new javax.swing.JTextField();
        lblIdProveedor = new javax.swing.JLabel();
        lblExiProducto = new javax.swing.JLabel();
        txtExiProducto = new javax.swing.JTextField();
        lblUnidadMedidaProducto = new javax.swing.JLabel();
        txtUnidadMedidaProducto = new javax.swing.JTextField();
        lblMinimoProducto = new javax.swing.JLabel();
        txtMinimoProducto = new javax.swing.JTextField();
        lblMaximoProducto = new javax.swing.JLabel();
        txtMaximoProducto = new javax.swing.JTextField();
        txtNomProvedor = new javax.swing.JTextField();
        txtIdProveedor = new javax.swing.JTextField();
        txtPrjEstProducto = new javax.swing.JTextField();
        txtPrjMinProducto = new javax.swing.JTextField();
        txtPrecioMinProducto = new javax.swing.JTextField();
        lblPrecio_min_producto = new javax.swing.JLabel();
        lblLinea = new javax.swing.JLabel();
        btnMostarImagen = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        btnBuscarImagen = new javax.swing.JButton();
        txtUrlImagen = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBuscarProveedor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCodigoFabricante = new javax.swing.JTextField();
        btnCodigoBarra = new javax.swing.JButton();
        lblMaximoProducto1 = new javax.swing.JLabel();
        txtUbicacion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbxGeneraFactura = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbxGeneraDescuento = new javax.swing.JComboBox();
        cbxVisible = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cbxSerie = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cbxGarantia = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cbxComponente = new javax.swing.JComboBox();
        cbxCategoria = new javax.swing.JComboBox();
        cbxMarca = new javax.swing.JComboBox();
        btnRecargarMarcas = new javax.swing.JButton();
        btnCorrelativo = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtPrecioEspecial = new javax.swing.JTextField();
        btnCorrelativo1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cbxTipoSatProducto = new javax.swing.JComboBox<>();
        pnlBotones = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducto = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgCatalogoProductos.png"))); // NOI18N
        setMaximumSize(null);
        setMinimumSize(null);
        setPreferredSize(new java.awt.Dimension(1250, 650));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdProducto.setText("ID Producto");

        txtIdProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtIdProducto.setToolTipText("Este campo acepta numeros y letras.");
        txtIdProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdProductoFocusLost(evt);
            }
        });

        lblMarcaProducto.setText("Marca o Fabricante");

        lblDescProducto.setText("Descripcion");
        lblDescProducto.setToolTipText("");

        txtDescProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtDescProducto.setToolTipText("Nombre completo del produto, evite ingresar marcas.");

        lblPrecioCompraProducto.setText("Precio Compra");

        txtPrecioCompraProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtPrecioCompraProducto.setToolTipText("Ingrese el precio de compra, no puede ingresar letras.");

        lblPrecioEstProducto.setText("Precio Estandar");

        txtPrecioVentaProducto.setBackground(new java.awt.Color(102, 102, 102));
        txtPrecioVentaProducto.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioVentaProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioVentaProductoLostFocus(evt);
            }
        });
        txtPrecioVentaProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyPressed(evt);
            }
        });

        lblIdProveedor.setText("ID Proveedor");
        lblIdProveedor.setToolTipText("");

        lblExiProducto.setText("Existencias");

        txtExiProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtExiProducto.setToolTipText("Existencias actuales de este producto");

        lblUnidadMedidaProducto.setText("Medida");

        txtUnidadMedidaProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtUnidadMedidaProducto.setToolTipText("Ingrese la unidad de medida del producto un maximo de 50 caracteres");

        lblMinimoProducto.setText("Minimo");

        txtMinimoProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtMinimoProducto.setToolTipText("Ingrese la cantidad minima dle producto que puede tener en exixtencia");

        lblMaximoProducto.setText("Maximo");

        txtMaximoProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtMaximoProducto.setToolTipText("Ingrese el maximo de producto que puede tener en existencia");

        txtNomProvedor.setEditable(false);
        txtNomProvedor.setBackground(new java.awt.Color(102, 102, 102));
        txtNomProvedor.setForeground(new java.awt.Color(255, 255, 255));

        txtIdProveedor.setBackground(new java.awt.Color(255, 255, 204));
        txtIdProveedor.setMaximumSize(new java.awt.Dimension(6, 20));
        txtIdProveedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIdProveedorClick(evt);
            }
        });
        txtIdProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdProveedorActionPerformed(evt);
            }
        });
        txtIdProveedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdProveedorFocusLost(evt);
            }
        });

        txtPrjEstProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtPrjEstProducto.setToolTipText("Ingrese el porcentaje de ganancia Estandar o Normal");
        txtPrjEstProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrjEstProductoFocusLost(evt);
            }
        });

        txtPrjMinProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtPrjMinProducto.setToolTipText("Ingrese el porcentaje de ganancia minimo.");
        txtPrjMinProducto.setMaximumSize(new java.awt.Dimension(6, 20));
        txtPrjMinProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrjMinProductoFocusLost(evt);
            }
        });

        txtPrecioMinProducto.setBackground(new java.awt.Color(102, 102, 102));
        txtPrecioMinProducto.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioMinProducto.setToolTipText("Ingrese el precio minimo de este producto.");
        txtPrecioMinProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioMinimoLostFocus(evt);
            }
        });
        txtPrecioMinProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioMinimoKeyPressed(evt);
            }
        });

        lblPrecio_min_producto.setText("Precio Minimo");

        lblLinea.setText("Categoria");

        btnMostarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgMostrarImagenes.png"))); // NOI18N
        btnMostarImagen.setText("Mostrar");
        btnMostarImagen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnMostarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostarImagenActionPerformed(evt);
            }
        });

        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCargarImagen.png"))); // NOI18N
        btnCargar.setText("Cargar");
        btnCargar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        lblImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagen.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnBuscarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscarImagen.png"))); // NOI18N
        btnBuscarImagen.setText("Buscar");
        btnBuscarImagen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnBuscarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarImagenActionPerformed(evt);
            }
        });

        txtUrlImagen.setEditable(false);
        txtUrlImagen.setBackground(new java.awt.Color(102, 102, 102));
        txtUrlImagen.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Formato: JPEG");

        jLabel2.setText("Tamaño: 1 MB");

        btnBuscarProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscarProveedor.setActionCommand("buscar");
        btnBuscarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProveedorActionPerformed(evt);
            }
        });

        jLabel3.setText("Codigo Fabricante");

        btnCodigoBarra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCodigoDeBarras.png"))); // NOI18N
        btnCodigoBarra.setActionCommand("buscar");
        btnCodigoBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodigoBarraActionPerformed(evt);
            }
        });

        lblMaximoProducto1.setText("Ubicacion");

        txtUbicacion.setToolTipText("Ingrese el maximo de producto que puede tener en existencia");

        jLabel4.setText("Factura");

        cbxGeneraFactura.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        jLabel5.setText("Descuento");

        cbxGeneraDescuento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        cbxVisible.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        jLabel6.setText("Visible");

        cbxSerie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        jLabel7.setText("Serie");

        cbxGarantia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        jLabel8.setText("Garantia");

        jLabel9.setText("Comp.");

        cbxComponente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SI", "NO" }));

        btnRecargarMarcas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgRecargar.png"))); // NOI18N
        btnRecargarMarcas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecargarMarcasActionPerformed(evt);
            }
        });

        btnCorrelativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonCorrelativo.png"))); // NOI18N
        btnCorrelativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorrelativoActionPerformed(evt);
            }
        });

        jLabel10.setText("Precio Especial");

        txtPrecioEspecial.setBackground(new java.awt.Color(255, 255, 204));

        btnCorrelativo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/btnBotonCodigoDisponible.png"))); // NOI18N
        btnCorrelativo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorrelativo1ActionPerformed(evt);
            }
        });

        jLabel11.setText("Tipo");

        cbxTipoSatProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "B", "S" }));
        cbxTipoSatProducto.setToolTipText("Elegir producto segun SAT. Bien o Servicio.");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrecioCompraProducto)
                    .addComponent(lblIdProducto)
                    .addComponent(lblPrecioEstProducto)
                    .addComponent(lblExiProducto)
                    .addComponent(lblMinimoProducto)
                    .addComponent(lblMaximoProducto)
                    .addComponent(lblLinea)
                    .addComponent(lblMaximoProducto1))
                .addGap(14, 14, 14)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUbicacion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbxCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCorrelativo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCorrelativo1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtMaximoProducto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(txtMinimoProducto, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtExiProducto, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrjEstProducto, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrecioCompraProducto, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPrecioVentaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBuscarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnMostarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCodigoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(cbxGeneraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel6))
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(cbxGeneraDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel7)))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(cbxVisible, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel8))
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(cbxSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel9)))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbxComponente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(txtUrlImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtCodigoFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblMarcaProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPrecio_min_producto)
                                .addComponent(lblIdProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblDescProducto))
                        .addGap(28, 28, 28)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescProducto)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(cbxMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRecargarMarcas))
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPrjMinProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                            .addComponent(txtIdProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(15, 15, 15)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(txtPrecioMinProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblUnidadMedidaProducto)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtUnidadMedidaProducto))
                                            .addComponent(txtNomProvedor, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(btnBuscarProveedor))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPrecioEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18)
                                                .addComponent(cbxTipoSatProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIdProducto)
                        .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMarcaProducto)
                        .addComponent(cbxMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRecargarMarcas))
                    .addComponent(btnCorrelativo1)
                    .addComponent(btnCorrelativo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLinea)
                            .addComponent(lblDescProducto)
                            .addComponent(cbxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPrecioCompraProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPrecio_min_producto)
                                .addComponent(lblPrecioCompraProducto))
                            .addComponent(txtPrjMinProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPrecioMinProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblUnidadMedidaProducto)
                                .addComponent(txtUnidadMedidaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)
                                .addComponent(txtPrecioEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPrecioVentaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPrecioEstProducto)
                                .addComponent(txtPrjEstProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblIdProveedor))
                            .addComponent(txtNomProvedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarProveedor)))
                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(cbxTipoSatProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCodigoFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBuscarImagen)
                                    .addComponent(txtUrlImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnCargar)
                                                .addComponent(jLabel1))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnMostarImagen)
                                                .addComponent(jLabel2)))
                                        .addComponent(btnCodigoBarra))
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbxGeneraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6)
                                            .addComponent(cbxVisible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel8)
                                            .addComponent(cbxGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(cbxGeneraDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbxSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7)
                                            .addComponent(cbxComponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9)))))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblExiProducto, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(txtExiProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMinimoProducto)
                                            .addComponent(txtMinimoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMaximoProducto)
                                    .addComponent(txtMaximoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMaximoProducto1))))
                        .addGap(1, 1, 1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblBuscar.setText("Buscar");

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonLimpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonEditar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonGuardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonBuscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtBuscar.setToolTipText("Ingrese el nombre del producto que desea buscar");
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyPressedEnter(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imgBotonAgregar.png"))); // NOI18N
        btnAgregar.setActionCommand("btnAgregar");
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAgregar)
                .addGap(97, 97, 97)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar)
                        .addComponent(btnLimpiar)
                        .addComponent(btnModificar)
                        .addComponent(btnGuardar)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProducto.getTableHeader().setReorderingAllowed(false);
        tblProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducto);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        ArrayList<ObjetosProducto> buscarProducto = NuevoProducto.buscarProducto(txtIdProducto.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                
        if(buscarProducto.size()>=1){
            Mensaje.manipulacionExcepciones("critico", "Existen dos productos con el ID " + buscarProducto.get(0).getId_producto(), "Guardar");
        } else {
            
            try {
                
                Producto.setId_producto(txtIdProducto.getText().toUpperCase().replaceAll("'", "´"));
                Producto.setMarca_producto(cbxMarca.getSelectedItem().toString().toUpperCase());
                Producto.setDesc_producto(txtDescProducto.getText().toUpperCase());
                Producto.setLinea_producto(cbxCategoria.getSelectedItem().toString().toUpperCase());
                Producto.setPrecio_compra_producto(Float.parseFloat(txtPrecioCompraProducto.getText()));
                Producto.setPrecio_est_producto(Float.parseFloat(txtPrecioVentaProducto.getText()));
                Producto.setId_proveedor(Integer.parseInt(txtIdProveedor.getText()));
                Producto.setExi_producto(Float.parseFloat(txtExiProducto.getText()));
                Producto.setUnidad_medida_producto(txtUnidadMedidaProducto.getText().toUpperCase());  
                Producto.setMinimo_producto(Float.parseFloat(txtMinimoProducto.getText()));
                Producto.setMaximo_producto(Float.parseFloat(txtMaximoProducto.getText()));
                Producto.setPrj_est_producto(Float.parseFloat(txtPrjEstProducto.getText()));
                Producto.setPrj_min_producto(Float.parseFloat(txtPrjMinProducto.getText()));
                Producto.setPrecio_min_producto(Float.parseFloat(txtPrecioMinProducto.getText()));
                Producto.setCodigo_fabricante(txtCodigoFabricante.getText().toUpperCase().trim().replaceAll("'","´"));
                Producto.setUbicacion_producto(txtUbicacion.getText().toUpperCase());
                Producto.setFactura_producto(cbxGeneraFactura.getSelectedItem().toString());
                Producto.setDescuento_producto(cbxGeneraDescuento.getSelectedItem().toString());
                Producto.setVisible_producto(cbxVisible.getSelectedItem().toString());
                Producto.setSerie_producto(cbxSerie.getSelectedItem().toString());
                Producto.setComponente_producto(cbxComponente.getSelectedItem().toString());
                Producto.setGarantia_producto(cbxGarantia.getSelectedItem().toString());
                Producto.setPrecio_especial_producto(Float.parseFloat(txtPrecioEspecial.getText()));
                Producto.setTipo_sat_producto(cbxTipoSatProducto.getSelectedItem().toString());
                
                try{
                    Mensaje.manipulacionExcepciones("informacion", NuevoProducto.insertarProducto(Producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()), "Insertar Producto");
                    limpiarCampos();
                } catch(Exception error){
                    Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Insertar Producto");
                }
                
            } catch(Exception error){
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Guardar");
            }
        }
        
        mostrarRegistrosGuardados();
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        
        Producto.setId_producto(txtIdProducto.getText().toUpperCase().replaceAll("'", "´"));
        Producto.setMarca_producto(cbxMarca.getSelectedItem().toString().toUpperCase());
        Producto.setDesc_producto(txtDescProducto.getText().toUpperCase());
        Producto.setLinea_producto(cbxCategoria.getSelectedItem().toString().toUpperCase());
        Producto.setId_proveedor(Integer.parseInt(txtIdProveedor.getText()));
        Producto.setPrecio_compra_producto(Float.parseFloat(txtPrecioCompraProducto.getText()));
        Producto.setPrecio_est_producto(Float.parseFloat(txtPrecioVentaProducto.getText()));
        Producto.setExi_producto(Float.parseFloat(txtExiProducto.getText()));
        Producto.setUnidad_medida_producto(txtUnidadMedidaProducto.getText());
        Producto.setMinimo_producto(Float.parseFloat(txtMinimoProducto.getText()));
        Producto.setMaximo_producto(Float.parseFloat(txtMaximoProducto.getText()));
        Producto.setPrj_est_producto(Float.parseFloat(txtPrjEstProducto.getText()));
        Producto.setPrj_min_producto(Float.parseFloat(txtPrjMinProducto.getText()));
        Producto.setPrecio_min_producto(Float.parseFloat(txtPrecioMinProducto.getText()));
        Producto.setCodigo_fabricante(txtCodigoFabricante.getText().toUpperCase().trim().replaceAll("'","´"));
        Producto.setUbicacion_producto(txtUbicacion.getText());
        Producto.setFactura_producto(cbxGeneraFactura.getSelectedItem().toString());
        Producto.setDescuento_producto(cbxGeneraDescuento.getSelectedItem().toString());
        Producto.setVisible_producto(cbxVisible.getSelectedItem().toString());
        Producto.setSerie_producto(cbxSerie.getSelectedItem().toString());
        Producto.setComponente_producto(cbxComponente.getSelectedItem().toString());
        Producto.setGarantia_producto(cbxGarantia.getSelectedItem().toString());
        Producto.setPrecio_especial_producto(Float.parseFloat(txtPrecioEspecial.getText()));
        Producto.setTipo_sat_producto(cbxTipoSatProducto.getSelectedItem().toString());

        try {
            Mensaje.manipulacionExcepciones("informacion", NuevoProducto.actualizarProducto(Producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()), "Actualizar Producto");
            mostrarRegistrosGuardados();
            limpiarCampos();
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Actualizar Producto " + Producto.getId_producto());
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void tblProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductoMouseClicked

        btnGuardar.setEnabled(false);
        
        if (String.valueOf(tblProducto.getSelectedColumn()).equals("0")) {
            
            int fila_seleccionada = tblProducto.getSelectedRow();
            int columna_seleccionada = tblProducto.getSelectedColumn();

            txtIdProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada)));
            cbxMarca.setSelectedItem(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 1)));
            //txtMarcaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 1)));
            cbxCategoria.setSelectedItem(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada +3)));
            //txtLinea.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada +3)));
            txtDescProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 2)));
            txtPrecioCompraProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 4)));
            txtPrjEstProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 5)));
            txtPrecioVentaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 6)));
            txtPrjMinProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 7)));
            txtPrecioMinProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 8)));
            txtNomProvedor.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 9)));
            txtExiProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 10)));
            txtUnidadMedidaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 11)));
            txtMinimoProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 12).toString()));
            txtMaximoProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 13)));
            txtCodigoFabricante.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 14)));
            txtUbicacion.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 15)));
            cbxGeneraFactura.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 16));
            cbxGeneraDescuento.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 17));
            cbxVisible.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 18));
            cbxSerie.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 19));
            cbxComponente.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 20));
            cbxGarantia.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 21));
            txtPrecioEspecial.setText(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 22).toString());
            cbxTipoSatProducto.setSelectedItem(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 23));
            
            AccesoProducto Proveedor = new AccesoProducto();
            String cIdProveedor = Proveedor.buscarIdProveedor(txtNomProvedor.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()).toString();
            txtIdProveedor.setText(cIdProveedor);
            
        }
        
        //mostrar la primera imagen guardada
        try {
            AccesoImagen acceso_imagen = new AccesoImagen();
            String producto = txtIdProducto.getText().replaceAll("'", "´");
            int id = acceso_imagen.listarPrimeraImagen(producto, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            Image imagen = acceso_imagen.buscar(id, producto);
            java.awt.Dimension tamanio = lblImagen.getSize();
            Icon icono = new ImageIcon(imagen.getScaledInstance(tamanio.width - 4, tamanio.height - 4, BufferedImage.TYPE_INT_ARGB));
            lblImagen.setIcon(icono);
        } catch (Exception error) {
            Icon icono = new ImageIcon();
            lblImagen.setIcon(icono);
        }
            
    }//GEN-LAST:event_tblProductoMouseClicked

    private void btnBuscarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarImagenActionPerformed
        JFileChooser seleccion = new JFileChooser(".");
        int estado = seleccion.showOpenDialog(null);
        if (estado == JFileChooser.APPROVE_OPTION) {
            File archivo = seleccion.getSelectedFile();
            String direccion = archivo.getParent() + "\\" + archivo.getName();
            txtUrlImagen.setText(direccion);
            ImageIcon image = new ImageIcon(direccion);
            java.awt.Dimension tamanio = lblImagen.getSize();
            ImageIcon imagenEcalada = new ImageIcon(image.getImage().getScaledInstance(tamanio.width - 4, tamanio.height - 4, BufferedImage.TYPE_INT_ARGB));
            lblImagen.setIcon(imagenEcalada);
        }
    }//GEN-LAST:event_btnBuscarImagenActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        AccesoImagen acceso_imagen = new AccesoImagen();
        Mensaje.manipulacionExcepciones("critico", acceso_imagen.guardar(txtIdProducto.getText(), txtUrlImagen.getText()), "Guardar Imagen");
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnMostarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostarImagenActionPerformed
        wdwMostrarImagenes pantalla = new wdwMostrarImagenes();
        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        int x  = (ancho / 2) - (pantalla.getWidth() / 2);
        int y  = (alto / 2) -  (pantalla.getHeight() / 2);
        pantalla.setLocation(x, y);
        pantalla .setVisible(true);
        Inventory.pnlPrincipal.add(pantalla);
        pantalla .toFront();
        
        //cargar los id's de las imagenes asociadas al producto seleccionado
        ArrayList<String> lista = new ArrayList();
        AccesoImagen acceso = new AccesoImagen();
        String id = txtIdProducto.getText();
        String pro = txtDescProducto.getText();
        wdwMostrarImagenes.txtIdProducto.setText(id);
        wdwMostrarImagenes.txtDescripcionProducto.setText(pro);
        lista = acceso.listarImagenes(id, Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        for(String c : lista){
            wdwMostrarImagenes.cbxIdProducto.addItem(c);
        }
        
    }//GEN-LAST:event_btnMostarImagenActionPerformed

    private void txtPrjMinProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrjMinProductoFocusLost
        float vPrecio_min_producto = 0;
        vPrecio_min_producto = ((Float.parseFloat(txtPrjMinProducto.getText()) / 100 ) + 1 ) * Float.parseFloat(txtPrecioCompraProducto.getText());
        vPrecio_min_producto = (float) Math.rint(vPrecio_min_producto * 100) / 100;
        txtPrecioMinProducto.setText(String.valueOf(matematicas.aproxima(vPrecio_min_producto, decimales)));
    }//GEN-LAST:event_txtPrjMinProductoFocusLost

    private void txtPrjEstProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrjEstProductoFocusLost
        double vPrecio_est_producto = 0;
        vPrecio_est_producto = ((Double.parseDouble(txtPrjEstProducto.getText()) / 100 ) + 1 ) * Double.parseDouble(txtPrecioCompraProducto.getText());
        vPrecio_est_producto = Math.rint(vPrecio_est_producto * 100) / 100;
        txtPrecioVentaProducto.setText(String.valueOf(matematicas.aproxima(vPrecio_est_producto, decimales)));
    }//GEN-LAST:event_txtPrjEstProductoFocusLost

    private void txtIdProveedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdProveedorFocusLost
        if(txtIdProveedor.getText().isEmpty() &&  LeDiClick == true){
            txtIdProveedor.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de ID del proveedor para el producto.", "Proveedor");
        }else{
            AccesoProducto Proveedor = new AccesoProducto();
            String cNomProveedor = Proveedor.buscarProveedor(Integer.parseInt(txtIdProveedor.getText()), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            txtNomProvedor.setText(cNomProveedor);
        }
        LeDiClick = false;
    }//GEN-LAST:event_txtIdProveedorFocusLost

    private void txtIdProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdProveedorActionPerformed
        if(txtIdProveedor.getText().isEmpty() && LeDiClick == true){
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de ID del proveedor para el producto.", "Proveedor");
        } else {
            AccesoProducto Proveedor = new AccesoProducto();
            String cNomProveedor = Proveedor.buscarProveedor(Integer.parseInt(txtIdProveedor.getText()), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            txtNomProvedor.setText(cNomProveedor);
        }
        LeDiClick = false;
    }//GEN-LAST:event_txtIdProveedorActionPerformed

    private void txtIdProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdProductoFocusLost
        if(!"".equals(txtIdProducto.getText())){
            ArrayList<ObjetosProducto> buscarProducto = NuevoProducto.buscarProducto(txtIdProducto.getText(), Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            if(buscarProducto.size()>0){
                Mensaje.manipulacionExcepciones("advertencia", "Ya existe un producto con este ID Producto.", "Buscar Producto");
                txtIdProducto.requestFocus();
            }
        }
    }//GEN-LAST:event_txtIdProductoFocusLost

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        wdwMovimientoCompraDeProductos.tblDetalleCompra.setValueAt(txtIdProducto.getText(), wdwMovimientoCompraDeProductos.tblDetalleCompra.getSelectedRow() , 1);
        this.dispose();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnBuscarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProveedorActionPerformed
        wdwConsultaProveedores ConsultaProveedor = new wdwConsultaProveedores();
        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        int x  = (ancho / 2) - (ConsultaProveedor.getWidth() / 2);
        int y  = ((alto / 2) - (ConsultaProveedor.getHeight() / 2)) / 2;
        Inventory.pnlPrincipal.add(ConsultaProveedor);
        ConsultaProveedor.setVisible(true);
        ConsultaProveedor.setLocation(x, y);
        ConsultaProveedor.toFront();
    }//GEN-LAST:event_btnBuscarProveedorActionPerformed

    private void btnCodigoBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodigoBarraActionPerformed
        AccesoExcepciones Mensaje = new AccesoExcepciones();
       AccesoArchivo Archivo = new AccesoArchivo();

        try {
            AccesoInventario Acceso = new AccesoInventario();
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptBarra.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            //ENVIAR EL PARAMETRO AL REPORTES
            HashMap parametro = new HashMap();
            
            if (txtIdProducto.getText().isEmpty()) {
                parametro.put("P_CODIGO_PRODUCTO", null);
            } else {
               parametro.put("P_CODIGO_PRODUCTO", txtIdProducto.getText()); 
            }
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla, false);
            visualizador.show();
            
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Reporte BARRA");
        }
        
    }//GEN-LAST:event_btnCodigoBarraActionPerformed

    private void keyPressedEnter(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressedEnter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarEnRegistrosGuardados();
        }
    }//GEN-LAST:event_keyPressedEnter

    private void txtIdProveedorClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIdProveedorClick
        LeDiClick = true;
    }//GEN-LAST:event_txtIdProveedorClick

    private void txtPrecioMinimoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioMinimoKeyPressed
        txtPrjMinProducto.setText(calculaPorcentaje(txtPrecioMinProducto.getText()));
    }//GEN-LAST:event_txtPrecioMinimoKeyPressed

    private void txtPrecioMinimoLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioMinimoLostFocus
        txtPrjMinProducto.setText(calculaPorcentaje(txtPrecioMinProducto.getText()));
    }//GEN-LAST:event_txtPrecioMinimoLostFocus

    private void txtPrecioVentaProductoLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaProductoLostFocus
        txtPrjEstProducto.setText(calculaPorcentaje(txtPrecioVentaProducto.getText()));
    }//GEN-LAST:event_txtPrecioVentaProductoLostFocus

    private void txtPrecioVentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyPressed
        txtPrjEstProducto.setText(calculaPorcentaje(txtPrecioVentaProducto.getText()));
    }//GEN-LAST:event_txtPrecioVentaKeyPressed

    private void btnRecargarMarcasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecargarMarcasActionPerformed
        obtenerCategorias();
        obtenerMarcas();
    }//GEN-LAST:event_btnRecargarMarcasActionPerformed

    private void btnCorrelativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorrelativoActionPerformed
        txtIdProducto.setText(NuevoProducto.buscarSiguienteCodigo(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()));
    }//GEN-LAST:event_btnCorrelativoActionPerformed

    private void btnCorrelativo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorrelativo1ActionPerformed
        String valor = String.valueOf(NuevoProducto.buscarCodigoDisponible(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()));
        txtIdProducto.setText(valor);
    }//GEN-LAST:event_btnCorrelativo1ActionPerformed

    private String calculaPorcentaje(String valor) {
        double precio = Double.parseDouble(valor);
        double costo = Double.parseDouble(txtPrecioCompraProducto.getText());
        double resultado = 0.0;
        try {
            if (precio > 0 && costo > 0) {
                resultado = ((precio / costo) - 1) * 100;
            }
        } catch (Exception Error) {
            System.out.println("Errror al calcular porcentaje: " + Error.toString());
        }
        return String.valueOf(matematicas.aproxima(resultado, 4));
    }
    
    private void mostrarRegistrosGuardados(){
        

        DefaultTableModel tabla = new DefaultTableModel();
        AccesoProducto Producto = new AccesoProducto();
        AccesoProveedor Proveedor = new AccesoProveedor();
        AccesoPersona Persona = new AccesoPersona();
        
        ArrayList<ObjetosProducto> listaProductos = new ArrayList();
        ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();
        
        try{
            listaProductos = Producto.seleccionarProducto(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), Inventory.lblRol.getText());
            listaProveedores = Proveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
            listaPersonas = Persona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccioar Producto - Seleccinar Proveedor - Seleccionar Persona");
        }
        
        //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
        if(listaProductos.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos.", "Mostrar Registros Guardados");
        } else {
            
            tabla.addColumn("ID Producto");
            tabla.addColumn("Marca");
            tabla.addColumn("Descripcion");
            tabla.addColumn("Linea/Familia");
            tabla.addColumn("Precio Compra");
            tabla.addColumn("% Estandar");
            tabla.addColumn("Precio Estandar");
            tabla.addColumn("% Minimo");
            tabla.addColumn("Precio Minimo");
            tabla.addColumn("Proveedor");
            tabla.addColumn("Existencias");
            tabla.addColumn("Unidad de Medida");
            tabla.addColumn("Minimo");
            tabla.addColumn("Maximo");
            tabla.addColumn("Codigo Fabricante");
            tabla.addColumn("Ubicacion");
            tabla.addColumn("Factura");
            tabla.addColumn("Descuento");
            tabla.addColumn("Visible");
            tabla.addColumn("Serie");
            tabla.addColumn("Componente");
            tabla.addColumn("Garantia");
            tabla.addColumn("Precio Especial");
            tabla.addColumn("Tipo");
            
            tabla.setRowCount(listaProductos.size());
            int cProducto = 0;
            
            // RECORRO LA LISTA DE PRODUCTOS
            for(ObjetosProducto xProducto:listaProductos ){
                
                // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                for(ObjetosProveedor xProveedor:listaProveedores){
                    
                    // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                    if(xProducto.getId_proveedor() == xProveedor.getId_proveedor()){
                        
                        // SOLO SI COINCIDE EL ID PROVEEDOR ARRIBA RECORRO  LA LISTA DE PERSONAS
                        for(ObjetosPersona xPersona:listaPersonas){
                            
                            // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR PINTO LOS DATOS
                            if(xProveedor.getId_persona() == xPersona.getId_persona()){
                                tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                tabla.setValueAt(xProducto.getPrecio_compra_producto(), cProducto, 4);
                                tabla.setValueAt(xProducto.getPrj_est_producto(), cProducto, 5);
                                tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 6);
                                tabla.setValueAt(xProducto.getPrj_min_producto(), cProducto,7);
                                tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                tabla.setValueAt(xPersona.getNom_persona(), cProducto, 9);
                                tabla.setValueAt(xProducto.getExi_producto(), cProducto, 10);
                                tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 11);
                                tabla.setValueAt(xProducto.getMinimo_producto(), cProducto, 12);
                                tabla.setValueAt(xProducto.getMaximo_producto(), cProducto, 13);
                                tabla.setValueAt(xProducto.getCodigo_fabricante(), cProducto, 14);
                                tabla.setValueAt(xProducto.getUbicacion_producto(), cProducto, 15);
                                tabla.setValueAt(xProducto.getFactura_producto(), cProducto, 16);
                                tabla.setValueAt(xProducto.getDescuento_producto(), cProducto, 17);
                                tabla.setValueAt(xProducto.getVisible_producto(), cProducto, 18);
                                tabla.setValueAt(xProducto.getSerie_producto(), cProducto, 19);
                                tabla.setValueAt(xProducto.getComponente_producto(), cProducto, 20);
                                tabla.setValueAt(xProducto.getGarantia_producto(), cProducto, 21);
                                tabla.setValueAt(xProducto.getPrecio_especial_producto(), cProducto, 22);
                                tabla.setValueAt(xProducto.getTipo_sat_producto(), cProducto, 23);
                                cProducto++;
                            }
                        }
                    }
                }
            }
            
            tblProducto.setModel(tabla);
            //CAMBIAR DE TAMAÑO LA TERCERA COLUMNA 'DESCRIPCION'
            tblProducto.getColumnModel().getColumn(2).setPreferredWidth(1000);
        }
    }
    
    
    private boolean verificarDatosProducto(){
       
        boolean vDatosCorrectos = true;   
       
        if(cbxMarca.getSelectedItem().toString().isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "Ingrese la marca del producto.", "Verificar Producto");
            vDatosCorrectos = false;
        }
        if(txtDescProducto.getText().isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "Ingrese la descripcio del producto.", "Verificar Producto");
                vDatosCorrectos = false;
        }
        if(txtIdProveedor.getText().isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "Ingrese el codigo del proveedor asociado a este producto.", "Verificar Producto");
                vDatosCorrectos = false;
        }
        
        return vDatosCorrectos;
    }
    
    private void obtenerCategorias() {
        cbxCategoria.removeAllItems();
        AccesoCategoria acceso_categoria = new AccesoCategoria();
        Iterator iterador_categorias = acceso_categoria.listarCategorias(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()).iterator();
        while(iterador_categorias.hasNext()) {
            ObjetosCategoria categoria = (ObjetosCategoria) iterador_categorias.next();
            cbxCategoria.addItem(categoria.getNombre_categoria());
        }
    }
    
    private void obtenerMarcas() {
        cbxMarca.removeAllItems();
        AccesoMarca acceso_marca = new AccesoMarca();
        Iterator iterador_marca = acceso_marca.listarMarcas(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText()).iterator();
        while(iterador_marca.hasNext()) {
            ObjetosMarca marca = (ObjetosMarca) iterador_marca.next();
            cbxMarca.addItem(marca.getMarca_producto());
        }
    }
    
    private void txtMarcaProductoFocusGained(java.awt.event.FocusEvent evt) {                                          

        if(cbxMarca.getSelectedItem().toString().isEmpty()){
            cbxMarca.requestFocus();
            Mensaje.manipulacionExcepciones("CRITICO", "Ingrese la Marca para este producto.", "Marca Producto");
        } 
    }                                        
    
     private void limpiarCampos(){
        btnGuardar.setEnabled(true);
        txtIdProducto.setText("");
        cbxMarca.setSelectedIndex(0);
        //txtMarcaProducto.setText("");
        txtDescProducto.setText("");
        cbxCategoria.setSelectedIndex(0);
        //txtLinea.setText("");
        txtExiProducto.setText("");
        txtMaximoProducto.setText("");
        txtMinimoProducto.setText("");
        txtPrecioCompraProducto.setText("");
        txtPrecioVentaProducto.setText("");
        txtUnidadMedidaProducto.setText("");
        txtIdProveedor.setText("");
        txtNomProvedor.setText("");
        txtPrjEstProducto.setText("");
        txtPrjMinProducto.setText("");
        txtPrecioMinProducto.setText("");
        txtCodigoFabricante.setText("");
        txtUbicacion.setText("");
        lblImagen.setIcon(null);
        cbxVisible.setSelectedIndex(1);
        cbxGeneraFactura.setSelectedIndex(1);
        cbxGeneraDescuento.setSelectedIndex(1);
        cbxSerie.setSelectedIndex(1);
        cbxComponente.setSelectedIndex(1);
        cbxGarantia.setSelectedIndex(1);
        txtPrecioEspecial.setText("");
        cbxTipoSatProducto.setSelectedIndex(0);
    }
     
     
    private void buscarEnRegistrosGuardados() {

        String busqueda = txtBuscar.getText().toUpperCase().replaceAll("'", "´");

        if (busqueda != null) {
            DefaultTableModel tabla = new DefaultTableModel();

            AccesoProducto Producto = new AccesoProducto();
            AccesoProveedor Proveedor = new AccesoProveedor();
            AccesoPersona Persona = new AccesoPersona();

            ArrayList<ObjetosProducto> listaProductos = new ArrayList();
            ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS PRODUCTOS
            try {

                listaProductos = Producto.seleccionarProducto(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText(), Inventory.lblRol.getText());
                listaProveedores = Proveedor.seleccionarProveedor(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                listaPersonas = Persona.seleccionarPersona(Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());

            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", error.getMessage(), "Seleccionar Producto - Seleccionar Proveedor - Seleccionar Persona");
            }

            //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
            if (listaProductos.isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos.", "Busacar Registros Guardados");
            } else {

                tabla.addColumn("ID Producto");
                tabla.addColumn("Marca");
                tabla.addColumn("Descripcion");
                tabla.addColumn("Linea/Familia");
                tabla.addColumn("Precio Compra");
                tabla.addColumn("% Estandar");
                tabla.addColumn("Precio Estandar");
                tabla.addColumn("% Minimo");
                tabla.addColumn("Precio Minimo");
                tabla.addColumn("Proveedor");
                tabla.addColumn("Existencias");
                tabla.addColumn("Unidad de Medida");
                tabla.addColumn("Minimo");
                tabla.addColumn("Maximo");
                tabla.addColumn("Codigo Fabricante");
                tabla.addColumn("Ubicacion");
                tabla.addColumn("Factura");
                tabla.addColumn("Descuento");
                tabla.addColumn("Visible");
                tabla.addColumn("Serie");
                tabla.addColumn("Componente");
                tabla.addColumn("Garantia");
                tabla.addColumn("Precio Especial");
                tabla.addColumn("Tipo");

                int cProducto = 0;
                int contadorFilas = 1;

                // RECORRO LA LISTA DE PRODUCTOS
                for (ObjetosProducto xProducto : listaProductos) {

                    // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                    for (ObjetosProveedor xProveedor : listaProveedores) {

                        // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                        if (xProducto.getId_proveedor() == xProveedor.getId_proveedor()) {

                            // SOLO SI COINCIDE LE ID PROVEEDOR ARRIBA RECORRO LA LISTA DE PERSONAS
                            for (ObjetosPersona xPersona : listaPersonas) {

                                // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR COMPARO CON EL STRING BUSCADO
                                if (xProveedor.getId_persona() == xPersona.getId_persona()) {

                                    // SI EXISTE ALGUNA COINCIDENCIA CON EL STRING BUSCADO PINTO LA TUPLA EN EL DETALLE
                                    // SEPARO LA CADENA PARA BUSCAR CADA PALABRA INGRESADA Y BUSCO POR CADA TOKEN
                                    String[] tokens = busqueda.split("%");
                                    int cuenta_coincidencias = tokens.length;
                                    cuenta_coincidencias = 0;

                                    for (int x = 0; x < tokens.length; x++) {

                                        if (xProducto.getId_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                                || xProducto.getMarca_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                                || xProducto.getDesc_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                                || xPersona.getNom_persona().toUpperCase().indexOf(tokens[x]) >= 0
                                                || xProducto.getLinea_producto().toUpperCase().indexOf(tokens[x]) >= 0
                                                || xProducto.getCodigo_fabricante().toUpperCase().indexOf(tokens[x]) >= 0) {

                                            cuenta_coincidencias++;

                                        } //fin de la validacion de la palabra

                                    } //fin del while que recorre los tokens

                                    if (cuenta_coincidencias == tokens.length) {
                                        tabla.setRowCount(contadorFilas);
                                        tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                        tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                        tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                        tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                        tabla.setValueAt(xProducto.getPrecio_compra_producto(), cProducto, 4);
                                        tabla.setValueAt(xProducto.getPrj_est_producto(), cProducto, 5);
                                        tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 6);
                                        tabla.setValueAt(xProducto.getPrj_min_producto(), cProducto, 7);
                                        tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                        tabla.setValueAt(xPersona.getNom_persona(), cProducto, 9);
                                        tabla.setValueAt(xProducto.getExi_producto(), cProducto, 10);
                                        tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 11);
                                        tabla.setValueAt(xProducto.getMinimo_producto(), cProducto, 12);
                                        tabla.setValueAt(xProducto.getMaximo_producto(), cProducto, 13);
                                        tabla.setValueAt(xProducto.getCodigo_fabricante(), cProducto, 14);
                                        tabla.setValueAt(xProducto.getUbicacion_producto(), cProducto, 15);
                                        tabla.setValueAt(xProducto.getFactura_producto(), cProducto, 16);
                                        tabla.setValueAt(xProducto.getDescuento_producto(), cProducto, 17);
                                        tabla.setValueAt(xProducto.getVisible_producto(), cProducto, 18);
                                        tabla.setValueAt(xProducto.getSerie_producto(), cProducto, 19);
                                        tabla.setValueAt(xProducto.getComponente_producto(), cProducto, 20);
                                        tabla.setValueAt(xProducto.getGarantia_producto(), cProducto, 21);
                                        tabla.setValueAt(xProducto.getPrecio_especial_producto(), cProducto, 22);
                                        tabla.setValueAt(xProducto.getTipo_sat_producto(), cProducto, 23);
                                        cProducto++;
                                        contadorFilas++;
                                    }
                                    
                                }
                            }
                        }
                    }
                }

                tblProducto.setModel(tabla);
                //CAMBIAR DE TAMAÑO LA TERCERA COLUMNA 'DESCRIPCION'
                tblProducto.getColumnModel().getColumn(2).setPreferredWidth(200);
            }
        } else {
            // SI NO HAY CARACTER DE BUSQUEDA SE DESPLIEGAN TODOS LOS DATOS
            mostrarRegistrosGuardados();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarImagen;
    private javax.swing.JButton btnBuscarProveedor;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnCodigoBarra;
    private javax.swing.JButton btnCorrelativo;
    private javax.swing.JButton btnCorrelativo1;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnMostarImagen;
    private javax.swing.JButton btnRecargarMarcas;
    private javax.swing.JComboBox cbxCategoria;
    private javax.swing.JComboBox cbxComponente;
    private javax.swing.JComboBox cbxGarantia;
    private javax.swing.JComboBox cbxGeneraDescuento;
    private javax.swing.JComboBox cbxGeneraFactura;
    private javax.swing.JComboBox cbxMarca;
    private javax.swing.JComboBox cbxSerie;
    private javax.swing.JComboBox<String> cbxTipoSatProducto;
    private javax.swing.JComboBox cbxVisible;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblDescProducto;
    private javax.swing.JLabel lblExiProducto;
    private javax.swing.JLabel lblIdProducto;
    private javax.swing.JLabel lblIdProveedor;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblLinea;
    private javax.swing.JLabel lblMarcaProducto;
    private javax.swing.JLabel lblMaximoProducto;
    private javax.swing.JLabel lblMaximoProducto1;
    private javax.swing.JLabel lblMinimoProducto;
    private javax.swing.JLabel lblPrecioCompraProducto;
    private javax.swing.JLabel lblPrecioEstProducto;
    private javax.swing.JLabel lblPrecio_min_producto;
    private javax.swing.JLabel lblUnidadMedidaProducto;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JTable tblProducto;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCodigoFabricante;
    private javax.swing.JTextField txtDescProducto;
    private javax.swing.JTextField txtExiProducto;
    private javax.swing.JTextField txtIdProducto;
    public static javax.swing.JTextField txtIdProveedor;
    private javax.swing.JTextField txtMaximoProducto;
    private javax.swing.JTextField txtMinimoProducto;
    public static javax.swing.JTextField txtNomProvedor;
    private javax.swing.JTextField txtPrecioCompraProducto;
    private javax.swing.JTextField txtPrecioEspecial;
    private javax.swing.JTextField txtPrecioMinProducto;
    private javax.swing.JTextField txtPrecioVentaProducto;
    private javax.swing.JTextField txtPrjEstProducto;
    private javax.swing.JTextField txtPrjMinProducto;
    private javax.swing.JTextField txtUbicacion;
    private javax.swing.JTextField txtUnidadMedidaProducto;
    private javax.swing.JTextField txtUrlImagen;
    // End of variables declaration//GEN-END:variables
}
